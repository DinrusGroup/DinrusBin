module stdrus;

private import sys.DStructs, sys.DConsts,sys.DFuncs;
private import tpl.args, tpl.stream;
import cidrus, global;
public import exception;


extern (D) struct Процессор
{
	ткст производитель();
	ткст название()		;
	бул поддержкаММЭкс()	;
	бул поддержкаФЭксСР()	;
	бул поддержкаССЕ()		;
	бул поддержкаССЕ2()		;
	бул поддержкаССЕ3()		;
	бул поддержкаСССЕ3()	;
	бул поддержкаАМД3ДНау()	;
	бул поддержкаАМД3ДНауЭкст();
	бул поддержкаАМДММЭкс()	;
	бул являетсяИА64()		;
	бул являетсяАМД64()		;
	бул поддержкаГиперПоточности();
	бцел потоковНаЦПБ()		;
	бцел ядерНаЦПБ()		;
	бул являетсяИнтел()		;
	бул являетсяАМД()		;
	бцел поколение()		;
	бцел модель()			;
	бцел семейство()		;
	ткст вТкст()			;
}

//////////////////////////////////

бул число_ли(ИнфОТипе[] _arguments, спис_ва _argptr)
{
    ткст  s  = "";
    шткст ws = "";
    юткст ds = "";

    
    if (_arguments.length == 0)
        return нет;

    if (_arguments[0] == typeid(ткст))
        return чис_ли(ва_арг!(ткст)(_argptr));
    else if (_arguments[0] == typeid(шткст))
        return чис_ли(вЮ8(ва_арг!(шткст)(_argptr)));
    else if (_arguments[0] == typeid(юткст))
        return чис_ли(вЮ8(ва_арг!(юткст)(_argptr)));
    else if (_arguments[0] == typeid(реал))
        return да;
    else if (_arguments[0] == typeid(дво)) 
        return да;   
    else if (_arguments[0] == typeid(плав)) 
        return да;  
    else if (_arguments[0] == typeid(бдол)) 
        return да; 
    else if (_arguments[0] == typeid(дол)) 
        return да;   
    else if (_arguments[0] == typeid(бцел)) 
        return да;  
    else if (_arguments[0] == typeid(цел)) 
        return да;   
    else if (_arguments[0] == typeid(бкрат)) 
        return да;   
    else if (_arguments[0] == typeid(крат)) 
        return да;   
    else if (_arguments[0] == typeid(ббайт)) 
    {
       s.length = 1;
       s[0]= ва_арг!(ббайт)(_argptr);
       return чис_ли(cast(ткст)s);
    }
    else if (_arguments[0] == typeid(байт)) 
    {
       s.length = 1;
       s[0] = ва_арг!(сим)(_argptr);
       return чис_ли(cast(ткст)s);
    }
    else if (_arguments[0] == typeid(вреал))
        return да;
    else if (_arguments[0] == typeid(вдво)) 
        return да;   
    else if (_arguments[0] == typeid(вплав)) 
        return да;  
    else if (_arguments[0] == typeid(креал))
        return да;
    else if (_arguments[0] == typeid(кдво)) 
        return да;   
    else if (_arguments[0] == typeid(кплав)) 
        return да;  
    else if (_arguments[0] == typeid(сим))
    {
        s.length = 1;
        s[0] = ва_арг!(сим)(_argptr);
        return чис_ли(s);
    }
    else if (_arguments[0] == typeid(шим))
    {
        ws.length = 1;
        ws[0] = ва_арг!(шим)(_argptr);
        return чис_ли(вЮ8(ws));
    }
    else if (_arguments[0] == typeid(дим))
    { 
        ds.length =  1;
        ds[0] = ва_арг!(дим)(_argptr);
        return чис_ли(вЮ8(ds));
    }    
    else       		
       return нет; 	   
} 

бул число_ли(...){ return cast(бул) число_ли(_arguments, _argptr);}


/*********************************
 * Возвращает !=0, если x нормализован (не равен 0, не субнормален, не бесконечен, не $(NAN)).
 */

/* Need one for each format because подстnormal floats might
 * be converted to normal reals.
 */

цел нормален_ли(X)(X x)
{
    alias плавТрэтс!(X) П;

    static if(real.mant_dig==106) { // doubledouble
        // doubledouble is normal if the least significant part is normal.
        return нормален_ли((cast(дво*)&x)[МАНТИССА_МЗЧ]);
    } else {
        // ridiculous DMD warning
        бкрат e = cast(бкрат)(П.МАСКАВЫР & (cast(бкрат *)&x)[П.ПОЗВЫР_КРАТ]);
        return (e != П.МАСКАВЫР && e!=0);
    }
}
////////////////////////////////////////////////////////////////////

struct т_регсвер
{
    цел рснач;			
    цел рскон;			
}

//////////////////////////////////////////////
extern (D)
{

	бул вОбразце(дим с, ткст образец);
	бул вОбразце(дим с, ткст[] образец);
	
	ткст вТкст(сим с);
	ткст вТкст(бул с);
	ткст вТкст(ббайт с);
	ткст вТкст(бкрат с);
	ткст вТкст(бцел с);
	ткст вТкст(бдол с);
	ткст вТкст(байт с);
	ткст вТкст(крат с);
	ткст вТкст(цел с);
	ткст вТкст(дол с);
	ткст вТкст(плав с);
	ткст вТкст(дво с);
	ткст вТкст(реал с);
	ткст вТкст(вплав с);
	ткст вТкст(вдво с);
	ткст вТкст(вреал с);
	ткст вТкст(кплав с);
	ткст вТкст(кдво с);
	ткст вТкст(креал с);
	ткст вТкст(дол знач, бцел корень);
	ткст вТкст(бдол знач, бцел корень);
	ткст вТкст(сим *с);
	
	ИнфОТипе простаяИнфОТипе(ПМангл m);
	Биб загрузиБиб(ткст имяб);
	Биб загрузиБиб(ткст[] именаб);
	проц выгрузиБиб(Биб биб);
	ук дайПроцИзБиб(Биб биб, ткст имяПроц);
	ткст дайТкстОшибки();
	цел генМакетИмпорта(ткст имяМ, ткст[] список);
	бул создайЛистинг(ткст имяБ);
	бул создайБибИзДлл(ткст имяБ, ткст имяД = пусто, ткст путь = пусто, ткст расшД = "dll");
}

extern (D) class Биб
{
    ткст имя();
  this(ук укз, ткст имя);
}


extern (D) struct ЖанБибгр {

   проц заряжай(ткст winLibs, проц function(Биб) userLoad, ткст versionStr = "");
    проц загружай(ткст libNameString = пусто);
    проц загружай(ткст[] libNames);
	
	alias загружай иниц, init;
	
    ткст строкаВерсии();
    проц выгружай();
    бул загружено();
    ткст имяБиб();
    static ~this();
}
//Зависимый Жанровый Загрузчик Библиотек
extern (D) struct ЗавЖанБибгр {

    проц заряжай(ЖанБибгр* dependence, проц function(Биб) userLoad);
    проц загружай();
    ткст строкаВерсии();
    проц выгружай();
    бул загружено();
    ткст имяБиб();
}

struct Вяз(T) {
    проц opCall(ткст n, Биб lib) {
        *fptr = дайПроцИзБиб(lib, n);
    }
        ук* fptr;  
}


template вяжи(T) {
    Вяз!(T) вяжи(inout T a) {
        Вяз!(T) рез;
        рез.fptr = cast(ук*)&a;
        return рез;
    }
}

/////////////////////////////////////////////////////
extern (D) struct ЧленАрхиваЗИП //ArchiveMember
{

    бкрат версияСборки = 20;	
    бкрат версияИзвлечения = 20;	
    бкрат флаги;		
    бкрат методСжатия;	
    ФВремяДос время;	
    бцел цпи32;			
    бцел сжатыйРазмер;	
    бцел расжатыйРазмер;		
    бкрат номерДиска;		
    бкрат внутренниеАтрибуты;	
    бцел внешниеАтрибуты;	
    private бцел смещение;
    ткст имя;
    ббайт[] экстра;		
    ткст комментарий;		
    ббайт[] сжатыеДанные;	
    ббайт[] расжатыеДанные;	

    проц выведи();
    
}

extern (D) class АрхивЗИП
{

 extern  (C) extern
 {
    ббайт[] данные;	
    бцел смещКПоследнЗаписи;

    бцел номерДиска;	
    бцел стартПапкаДиска;	
    бцел члоЗаписей;	
    бцел всегоЗаписей;	
    ткст комментарий;
 }
 
    проц выведи();
    this();
    проц добавьЧлен(ЧленАрхиваЗИП de);
    проц удалиЧлен(ЧленАрхиваЗИП de);
    this(проц[] буфер);
    ббайт[]расжать(ЧленАрхиваЗИП de);    
}

extern(D) class СжатиеЗлиб
{
	enum
	{
		БЕЗ_СЛИВА      = 0,
		СИНХ_СЛИВ    = 2,
		ПОЛН_СЛИВ    = 3,
		ФИНИШ       = 4,
	}

	this(цел ур);
	this();
	~this();
	проц[] сжать(проц[] буф);
	проц[] слей(цел режим = ФИНИШ);
}

extern(D) class РасжатиеЗлиб
{
	
	this(бцел размБуфЦели);
	this();
	~this();
	проц[] расжать(проц[] буф);
	проц[] слей();
}

extern(D) class РегВыр
{
     this(рсим[] образец, рсим[] атрибуты = пусто);
    static РегВыр opCall(рсим[] образец, рсим[] атрибуты = пусто);
     РегВыр ищи(рсим[] текст);   
     цел opApply(цел delegate(inout РегВыр) дг);
     ткст сверь(т_мера n);
     ткст перед();
	 ткст после();
    бцел члоподстр;		
    т_регсвер[] псовп;	
    рсим[] ввод;		
    
    рсим[] образец;		
    рсим[] флаги;		
    цел ошибки;
    бцел атрибуты;

    enum РВА
    {
	глоб		= 1,	
	любрег	= 2,	
	многострок	= 4,					
	тчксовплф	= 8,	
    }

 проц компилируй(рсим[] образец, рсим[] атрибуты);
 рсим[][] разбей(рсим[] текст);
 цел найди(рсим[] текст);
 рсим[][] сверь(рсим[] текст);
 рсим[] замени(рсим[] текст, рсим[] формат);
 рсим[][] выполни(рсим[] текст);
 рсим[][] выполни();
 цел проверь(рсим[] текст);
 цел проверь();
 цел проверь(ткст текст, цел стартиндекс);
цел чр(inout бцел ит, рсим c);
проц выведиПрограмму(ббайт[] прог);
цел пробнсвер(цел pc, цел пценд);
цел разборРегвыр();
цел разборКуска();
цел разборАтома();
рсим[] замени(рсим[] формат);
static рсим[] замени3(рсим[] формат, рсим[] ввод, т_регсвер[] псовп);
рсим[] замениСтарый(рсим[] формат);
~this();
}


extern(D) struct Дата
	{
	
	цел год = цел.min;
    цел месяц;
    цел день;
    цел час;
    цел минута;	
    цел секунда;
    цел мс;	
    цел день_недели;
    цел коррекцияЧП = цел.min;	    
	
    проц разбор(ткст т);
}

	
extern(D) struct ПапЗап
	{	
	ткст имя;
    бдол размер = ~0UL;
    т_время времяСоздания = т_время_нч;
    т_время времяПоследнегоДоступа = т_время_нч;	
    т_время времяПоследнейЗаписи = т_время_нч;
    бцел атрибуты;

    проц иниц(ткст путь, ПОИСК_ДАННЫХ_А *дф);
    проц иниц(ткст путь, ПОИСК_ДАННЫХ *дф);
    бцел папка_ли();
    бцел файл_ли();
}
	
extern(D) class БуферВывода
{
ббайт данные[];
бцел смещение;

invariant
    {
	assert(смещение <= данные.length);
	
    }
	
	this();	
	~this();
	
	ббайт[] вБайты();
	проц резервируй(бцел члобайт);
    проц пиши(ббайт[] байты);
    проц пиши(ббайт b);
    проц пиши(байт b);
    проц пиши(сим c);
    проц пиши(бкрат w);
    проц пиши(крат s);
    проц пиши(шим c);
    проц пиши(бцел w);
    проц пиши(цел i);
    проц пиши(бдол l);
    проц пиши(дол l);
    проц пиши(плав f);
    проц пиши(дво f);
    проц пиши(реал f);
    проц пиши(ткст s);
    проц пиши(БуферВывода буф);
    проц занули(бцел члобайт);
    проц расклад(бцел мера);
    проц расклад2();
    проц расклад4();
    ткст вТкст();
    проц ввыводф(ткст формат, спис_ва арги);
    проц выводф(ткст формат, ...);
    проц простели(бцел индекс, бцел члобайт);
}

extern(D) struct МассивБит
{

т_мера длин;
бцел *ук;

	
	т_мера разм();
	т_мера длина();
	проц длина(т_мера новдлин);
  бул opIndex(т_мера i);
  бул opIndexAssign(бул b, т_мера i);
 МассивБит дубль();
 цел opApply(цел delegate(inout бул) дг);
    цел opApply(цел delegate(inout т_мера, inout бул) дг);
	 МассивБит реверсни();
	 МассивБит сортируй();
    цел opEquals(МассивБит a2);
    цел opCmp(МассивБит a2);
	 проц иниц(бул[] бм);
	 проц иниц(проц[] в, т_мера члобит);
    проц[] opCast();
    МассивБит opCom();
    МассивБит opAnd(МассивБит e2);
     МассивБит opOr(МассивБит e2);
    МассивБит opXor(МассивБит e2);
    МассивБит opSub(МассивБит e2);
    МассивБит opAndAssign(МассивБит e2);
    МассивБит opOrAssign(МассивБит e2);
    МассивБит opXorAssign(МассивБит e2);
    МассивБит opSubAssign(МассивБит e2);
     МассивБит opCatAssign(бул b);
    МассивБит opCatAssign(МассивБит b);
    МассивБит opCat(бул b);
    МассивБит opCat_r(бул b);
    МассивБит opCat(МассивБит b);	
}

extern(D) class Модуль
{

	this(ук модуль, бул овладеть);
	this(ткст имяМодуля);
	проц закрой();
	ук дайСимвол(in ткст симв);
	ук найдиСимвол(in ткст симв);
	ук Ук();
	ткст Путь();
	~this();
}



//Файл, Размещённый в Карте Памяти (MMFile)
extern (D) class РПФайл
{
alias длина length;

    enum Режим
    {
	Чтение,		/// read existing файл
	ЧтенЗапНов,	/// delete existing файл, write new файл
	ЧтенЗап,	/// read/write existing файл, create if not existing
	ЧтенКопирПриЗап, /// read/write existing файл, copy on write
	
    }
	static this(){};
    this(ткст имяф);
    

    this(ткст имяф, Режим режим, бдол размер, ук адрес,
			т_мера окно = 0);
	~this();
	проц слей();
	бдол длина();
	Режим режим();
	проц[] opSlice();
	проц[] opSlice(бдол i1, бдол i2);
	ббайт opIndex(бдол i);
	ббайт opIndexAssign(ббайт значue, бдол i);

}

extern (D) class Файл: Поток 
{
	static this(){};
  this();
  this(ук файлУк, ПФРежим режим);
  this(ткст имяф, ПРежимФайла режим = cast(ПФРежим)1);
  проц открой(ткст имяф, ПРежимФайла режим = cast(ПФРежим)1);
  проц создай(ткст имяф);
  проц создай(ткст имяф, ПРежимФайла режим);
  override  проц закрой();
  ~this();
  override  бдол размер() ;
  т_мера читайБлок(ук буфер, т_мера размер);
  т_мера пишиБлок(ук буфер, т_мера размер);
  бдол сместись(дол смещение, ППозКурсора rel);
  override т_мера доступно();
  ук хэндл();
  
 }

extern (D) class ФильтрПоток : Поток
 {
	extern(C) extern
	{
	  Поток п;              // source stream
	бул закрытьГнездо;
	}
	
  бул закрытьИсток();
  проц закрытьИсток(бул б);
	static this(){};
  this(Поток исток);
   Поток исток();
  проц исток(Поток s);
  проц сбросьИсток() ;
  т_мера читайБлок(ук буфер, т_мера размер);
  т_мера пишиБлок(ук буфер, т_мера размер) ;
  override проц закрой();
  бдол сместись(дол смещение, ППозКурсора откуда) ;
  override т_мера доступно ();
  override проц слей() ;
   ~this();
}

extern (D) class БуфПоток : ФильтрПоток 
{
extern(C) extern
{
      ббайт[] буфер; 
	  бцел текБуфПоз;  
	 бцел длинаБуф; 
	  бул черновойБуф;
	   бцел позИстокаБуф;  
	  бдол позПотока; 
 }	
  		static this(){};
	проц устБуфер(ббайт[] буф);//setter
	ббайт[] дайБуфер();	//getter
	  
 	проц устТекБуфПоз(бцел тбп);
	бцел дайТекБуфПоз();
	  
  	проц устДлинуБуф(бцел дб);
	бцел дайДлинуБуф();
	
  	проц устЧерновой(бул чб);
	бул дайЧерновойБуф();
	
 	проц устПозИстокаБуф(бцел пиб);
	 бцел дайПозИстокаБуф();
	  
 	проц устПозПотока(бдол пп);
	бдол дайПозПотока();
	
 
  const бцел дефРазмБуфера = 8192;

   this(Поток исток, бцел размБуф = дефРазмБуфера);
   override проц сбросьИсток();
   override т_мера читайБлок(ук результат, т_мера длин);
   override т_мера пишиБлок(ук результат, т_мера длин) ;
   override бдол сместись(дол смещение, ППозКурсора откуда);
   override ткст читайСтр(ткст буфввода);
   override шткст читайСтрШ(шткст буфввода) ;
   override проц слей();
   override бул кф();
   override бдол размер() ;
   override т_мера доступно() ;
  ~this();
}

extern (D) class БуфФайл: БуфПоток {

	static this(){};
  this();
  this(ткст имяф, ПРежимФайла режим = cast(ПФРежим) 1,
       бцел размБуф = дефРазмБуфера);
  this(Файл файл, бцел размБуф = дефРазмБуфера);
  this(ук  файлУк, ПРежимФайла режим, бцел размбуфа);
  проц открой(ткст имяф, ПРежимФайла режим = cast(ПФРежим) 1);
  проц создай(ткст имяф, ПРежимФайла режим = cast(ПФРежим) 6) ;
  override  проц удали(ткст фимя);
  override проц закрой();
  
  ~this();
}
extern(D) БуфФайл объБуфФайл();


extern (D) class ПотокЭндианец : ФильтрПоток {

  Эндиан эндиан;
	static this(){};
  this(Поток исток, Эндиан end = _эндиан);
  проц устЭндиан(Эндиан э);
  проц выведиЭндиан();
  цел читайМПБ(цел размВозврСим = 1);
   проц фиксируйПБ(ук буфер, бцел размер);
   проц фиксируйБлокПБ(ук буфер, бцел размер, т_мера повтор);
   проц читай(out байт x) ;
   проц читай(out ббайт x);
  проц читай(out крат x);
  проц читай(out бкрат x) ;
  проц читай(out цел x) ;
  проц читай(out бцел x) ;
  проц читай(out дол x) ;
  проц читай(out бдол x) ;
  проц читай(out плав x) ;
  проц читай(out дво x) ;
  проц читай(out реал x) ;
  проц читай(out вплав x) ;
  проц читай(out вдво x) ;
  проц читай(out вреал x) ;
  проц читай(out кплав x) ;
  проц читай(out кдво x) ;
  проц читай(out креал x) ;
  проц читай(out шим x) ;
  проц читай(out дим x) ;
  шим бериш();
  шткст читайТкстШ(т_мера длина) ;
  проц пишиМПБ(МПБ b);
   проц пиши(байт x);
   проц пиши(ббайт x);
  проц пиши(крат x) ;
  проц пиши(бкрат x) ;
  проц пиши(цел x) ;
  проц пиши(бцел x) ;
  проц пиши(дол x) ;
  проц пиши(бдол x) ;
  проц пиши(плав x) ;
  проц пиши(дво x) ;
  проц пиши(реал x) ;
  проц пиши(вплав x) ;
  проц пиши(вдво x) ;
  проц пиши(вреал x) ;
  проц пиши(кплав x);
  проц пиши(кдво x);
  проц пиши(креал x);  
  проц пиши(шим x) ;
  проц пиши(дим x) ;
  проц пишиТкстШ(шткст str);
   бул кф();
   бдол размер() ;
   ~this();
}

extern (D) class ПотокПамяти : ТПотокМассив!(ббайт[])
 {
	static this(){};
  this(ббайт[] буф = пусто) ;
  this(байт[] буф);
  this(ткст буф) ;
  проц резервируй(т_мера count);
  override т_мера пишиБлок(ук буфер, т_мера размер);
  override т_мера читайБлок(ук буфер, т_мера размер);
  override бдол сместись(дол смещение, ППозКурсора rel);
   override т_мера доступно ();
  override ббайт[] данные();
  ткст вТкст();
  ~this();

}

extern (D) class РПФайлПоток : ТПотокМассив!(РПФайл)
 {
 	static this(){};
  this(РПФайл файл) ;
  override проц слей() ;
 override  проц закрой();
 override т_мера пишиБлок(ук буфер, т_мера размер);
  override т_мера читайБлок(ук буфер, т_мера размер);
 override  бдол сместись(дол смещение, ППозКурсора rel);
 override  т_мера доступно ();
 override ббайт[] данные();
 override ткст вТкст();  
  override проц удали(ткст фимя);
  ~this();
}
 
extern (D) class ПотокСрез : ФильтрПоток
 {
extern (C) extern
{
     бдол поз;  // our позиция relative to low
    бдол низ; // низ stream смещение.
    бдол верх; // верх stream смещение.
    бул ограничен; // upper-ограничен by верх.
	Поток п;
}
	static this(){};
  this (Поток s, бдол нз);  
  this (Поток s, бдол нз, бдол вх);
  override т_мера читайБлок (проц *буфер, т_мера размер);
  override т_мера пишиБлок (проц *буфер, т_мера размер) ;
  override  бдол сместись(дол смещение, ППозКурсора rel) ;
  override т_мера доступно () ;
  ~this();
}

extern (D) class СФайл : Поток
 {
 extern  (C) extern	фук файлси;
 	static this(){};
  this(фук файлси, ПРежимФайла режим, бул сканируемый = нет);
  ~this();
  фук файл();
  проц файл(фук файлси);
  override проц слей() ;
  override проц закрой();
  override бул кф() ;
  override сим берис() ;
  override сим отдайс(сим c);
  override т_мера читайБлок(ук буфер, т_мера размер);
  override т_мера пишиБлок(ук буфер, т_мера размер);
  бдол сместись(дол смещение, ППозКурсора rel);
  override проц пишиСтр(ткст s);
  override проц пишиСтрШ(шткст s);
}

extern (D) class СокетПоток: Поток
{
	static this(){};
  	this(Сокет сок, ПРежимФайла режим);
	this(Сокет сок);
	Сокет сокет();
	override т_мера читайБлок(ук _буфер, т_мера размер);
	override т_мера пишиБлок(ук _буфер, т_мера размер);
	бдол сместись(дол смещение, ППозКурсора куда);
	override ткст вТкст();
	override проц закрой();
}
////////////////////////////////////////////////////
extern (D) class СчётчикВысокойПроизводительности
 {  
	alias   дол    т_интервал;
	//alias PerformanceCounterScope!(СчётчикВысокойПроизводительности)  scope_type;
	static this();
	проц старт();
	проц стоп();
   	т_интервал счётПериодов();
	т_интервал секунды();
	т_интервал миллисекунды();
	т_интервал микросекунды();
 }
 
extern (D) class СчётчикТиков
    {
  	alias   дол    т_интервал;
	//alias PerformanceCounterScope!(СчётчикТиков) scope_type;
  	проц старт();
	проц стоп();  
	т_интервал счётПериодов();
	т_интервал секунды();
	т_интервал миллисекунды();
	т_интервал микросекунды();
    }

extern (D) class СчётчикВремениНити
    {
	alias   дол    т_интервал;
	//alias PerformanceCounterScope!(СчётчикВремениНити)  scope_type;
  
	this();
	проц старт();
	проц стоп();
	т_интервал счётПериодаЯдра();
	т_интервал секундыЯдра();
	т_интервал миллисекундыЯдра();	
	т_интервал микросекундыЯдра();
	т_интервал счётПользовательскогоПериода();
	т_интервал секундыПользователя();
	т_интервал миллисекундыПользователя();
	т_интервал микросекундыПользователя();
	т_интервал счётПериодов()	;
	т_интервал секунды();
	т_интервал миллисекунды()	;
	т_интервал микросекунды()	;  
   
    }	
	
extern (D) class СчётчикВремениПроцесса
    {
	alias   long    т_интервал;
	//alias PerformanceCounterScope!(СчётчикВремениПроцесса) scope_type;
 	проц старт();
	проц стоп();
	т_интервал счётПериодаЯдра();	
	т_интервал секундыЯдра();
	т_интервал миллисекундыЯдра();
	т_интервал микросекундыЯдра();
	т_интервал счётПользовательскогоПериода()	;
	т_интервал секундыПользователя()	;
	т_интервал миллисекундыПользователя()	;
	т_интервал микросекундыПользователя();
	т_интервал счётПериодов()	;
	т_интервал секунды();
	т_интервал миллисекунды()	;
	т_интервал микросекунды();
	static this();
  
    }
	
abstract class Адрес
{
	protected адрессок* имя();
	protected цел длинаИм();
	ПСемействоАдресов семействоАдресов();	/// Family of this address.
	ткст вТкст();		/// Human readable string representing this address.
}

extern (D)  class Протокол
{
	ППротокол тип;
	ткст имя;
	ткст[] алиасы;

	проц заполни(протзап* прото);
	бул дайПротоколПоИмени(ткст имя);
	бул дайПротоколПоТипу(ППротокол тип);
}

extern (D)  class Служба
{
	ткст имя;
	ткст[] алиасы;
	бкрат порт;
	ткст имяПротокола;

	проц заполни(служзап* служба);
	бул дайСлужбуПоИмени(ткст имя, ткст имяПротокола);
	бул дайСлужбуПоИмени(ткст имя);
	бул дайСлужбуПоПорту(бкрат порт, ткст имяПротокола);
	бул дайСлужбуПоПорту(бкрат порт);
}

extern (D)  class ИнтернетХост
{
	ткст имя;
	ткст[] алиасы;
	бцел[] списокАдр;

	проц реальнаяХостзап(хостзап* хз);
	проц заполни(хостзап* хз);
	бул дайХостПоИмени(ткст имя);
	бул дайХостПоАдр(бцел адр);
	бул дайХостПоАдр(ткст адр);
}

extern (D)  class НеизвестныйАдрес: Адрес
{
protected:
	override адрессок* имя();
	override цел длинаИм();
	
	public:
	override ПСемействоАдресов семействоАдресов();
	override ткст вТкст();
}

extern (D)  class ИнтернетАдрес: Адрес
{
	protected:
	адрессок_ин иас;
	override адрессок* имя();
	override цел длинаИм();
	this();	
	
public:
	const бцел АДР_ЛЮБОЙ = 0;//INADDR_ANY;	/// Любое адресное число IPv4.
	const бцел АДР_НЕУК = 0xFFFFFFFF;//INADDR_NONE;	/// Любое неверное адресное число IPv4.
	const бкрат ПОРТ_ЛЮБОЙ = 0;	/// Любое число порта IPv4.
	
	override ПСемействоАдресов семействоАдресов();
	бкрат порт();	
	бцел адр();	
	this(ткст адр, бкрат порт);
	this(бцел адр, бкрат порт);
	this(бкрат порт);
	ткст вАдрТкст();
	ткст вПортТкст();
	override ткст вТкст();	
	static бцел разбор(ткст адр);
}


extern (D)  class НаборСокетов
{
	this(бцел макс);
	this();
	проц переуст();
	проц прибавь(т_сокет с);
	проц прибавь(Сокет с);
	проц удали(т_сокет с);
	проц удали(Сокет с);
	цел вНаборе(т_сокет с);
	цел вНаборе(Сокет с);
	бцел макс();
	набор_уд* вНабор_уд();
	цел выберич();
}

extern (D)  class Сокет
{

this(ПСемействоАдресов са, ПТипСок тип, ППротокол протокол);
this(ПСемействоАдресов са, ПТипСок тип);
this(ПСемействоАдресов са, ПТипСок тип, ткст имяПротокола);
~this();
т_сокет Ук();
бул блокируемый();
проц блокируемый(бул б);
ПСемействоАдресов семействоАдресов() ;
бул жив_ли() ;
проц свяжи(Адрес адр);
проц подключись(Адрес к);
проц слушай(цел backlog);
Сокет принимающий();
Сокет прими();
проц экстрзак(ПЭкстрЗакрытиеСокета how);
проц закрой();
static ткст имяХоста() ;
Адрес удалённыйАдрес();
Адрес локальныйАдрес();

const цел ОШИБКА = -1;

цел шли(проц[] буф, ПФлагиСокета флаги);
цел шли(проц[] буф);
цел шли_на(проц[] буф, ПФлагиСокета флаги, Адрес куда);
цел шли_на(проц[] буф, Адрес куда);
цел шли_на(проц[] буф, ПФлагиСокета флаги);
цел шли_на(проц[] буф);
цел получи(проц[] буф, ПФлагиСокета флаги);
цел получи(проц[] буф);
цел получи_от(проц[] буф, ПФлагиСокета флаги, out Адрес от);
цел получи_от(проц[] буф, out Адрес от);
цел получи_от(проц[] буф, ПФлагиСокета флаги);
цел получи_от(проц[] буф);
цел дайОпцию(ППротокол уровень, ПОпцияСокета опция, проц[] результат);
цел дайОпцию(ППротокол уровень, ПОпцияСокета опция, out цел результат);
цел дайОпцию(ППротокол уровень, ПОпцияСокета опция, out заминка результат);
проц установиОпцию(ППротокол уровень, ПОпцияСокета опция, проц[] значение);
проц установиОпцию(ППротокол уровень, ПОпцияСокета опция, цел значение);
проц установиОпцию(ППротокол уровень, ПОпцияСокета опция, заминка значение);
static цел выбери(НаборСокетов checkRead, НаборСокетов checkWrite, НаборСокетов checkError, значврем* tv);
static цел выбери(НаборСокетов checkRead, НаборСокетов checkWrite, НаборСокетов checkError, цел микросекунды);
static цел выбери(НаборСокетов checkRead, НаборСокетов checkWrite, НаборСокетов checkError);
}

extern (D) class ПутСокет: Сокет
{
	this(ПСемействоАдресов семейство);
	this();
	this(Адрес подкл_к);
}

extern (D) class ПпдСокет: Сокет
{
	this(ПСемействоАдресов семейство);
	this();
}

alias ук нук;
alias бцел нид;

extern (Windows) alias бцел (*stdfp)(ук);

extern (C) нук начниНитьДоп(ук безоп, бцел размстека, stdfp стартадр, ук списаргов, бцел иницфлаг, нид* адрнити);

extern (D) class Нить
{	
    this(т_мера размстека = 0);  
    this(цел (*fp)(ук), ук арг, т_мера размстека = 0);
    this(цел delegate() дг, т_мера размстека = 0);
    ~this();
    
    ук низСтэка;

   проц старт();		
    цел пуск();
    проц жди();
    проц жди(бцел миллисек);
	бцел дайЧлоНитей();
	
    enum СН
    {
	НАЧАЛЬНОЕ,	/// The thread hasn't been started yet.
	ПУЩЕНА,	/// The thread is running or paused.
	ПРЕРВАНА,	/// The thread has ended.
        ЗАВЕРШЕНА        /// The thread has been cleaned up
    }

    СН дайСостояние();

    enum ПРИОРИТЕТ
    {
	УВЕЛИЧЬ,	/// Increase thread priority
	УМЕНЬШИ,	/// Decrease thread priority
	НИЗКИЙ,		/// Assign thread low priority
	ВЫСОКИЙ,	/// Assign thread high priority
	НОРМАЛЬНЫЙ,
    }

    проц устПриор(ПРИОРИТЕТ p);
    бул сама_ли();
    static Нить дайЭту();
    static Нить[] дайВсе();
    проц пауза();
    проц возобнови();
    static проц паузаВсем();
    static проц возобновиВсе();
    static проц рви();	
  
	
	extern (C) static бцел стартнити(ук p);

		public static проц пускНити();			
		
		static ~this();
		
		static ук дайУкНаТекНить();			

}


///////////////////////////////////////////////////////////////////////
	
extern(D) struct ПерестановкаБайт
{

        /***********************************************************************

                Реверсирует двубайтные цепочки. Параметр приёмн указывает 
                число байтов, которое должно быть кратно 2

        ***********************************************************************/

        final static проц своп16 (проц[] приёмн);
        /***********************************************************************

               Реверсирует четырёхбайтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 4

        ***********************************************************************/

        final static проц своп32 (проц[] приёмн);

        /***********************************************************************

               Реверсирует 8-байтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 8

        ***********************************************************************/

        final static проц своп64 (проц[] приёмн);

        /***********************************************************************

               Реверсирует 10-байтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 10

        ***********************************************************************/

        final static проц своп80 (проц[] приёмн);

        /***********************************************************************

               Реверсирует 2-байтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 2

        ***********************************************************************/

        final static проц своп16 (ук приёмн, бцел байты);

        /***********************************************************************

               Реверсирует четырёхбайтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 4

        ***********************************************************************/

        final static проц своп32 (ук приёмн, бцел байты);

        /***********************************************************************

               Реверсирует 8-байтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 8

        ***********************************************************************/

        final static проц своп64 (ук приёмн, бцел байты);

        /***********************************************************************

               Реверсирует 10-байтные цепочки. Параметр приёмн указывает  
                число байтов, к-е д.б. кратно 10

        ***********************************************************************/

        final static проц своп80 (ук приёмн, бцел байты);
}
///////////////////////////////////////////////////////////////////////
extern(D)
{

	бцел байтЮ(ткст т, т_мера и);
	бцел байтЮ(шткст т, т_мера и);	
	бцел байтЮ(юткст т, т_мера и);
	т_мера доИндексаУНС(ткст т, т_мера и);
	т_мера доИндексаУНС(шткст т, т_мера и);
	т_мера доИндексаУНС(юткст т, т_мера и);
	т_мера вИндексЮ(ткст т, т_мера и);
	т_мера вИндексЮ(шткст т, т_мера и);
	т_мера вИндексЮ(юткст т, т_мера и);
	дим раскодируйЮ(ткст т, inout т_мера инд);
	дим раскодируйЮ(шткст т, inout т_мера инд);
	дим раскодируйЮ(юткст т, inout т_мера инд);
	проц кодируйЮ(inout ткст т, дим с);
	проц кодируйЮ(inout шткст т, дим с);
	проц кодируйЮ(inout юткст т, дим с);
	проц оцениЮ(ткст т);
	проц оцениЮ(шткст т);
	проц оцениЮ(юткст т);
	ткст вЮ8(ткст т);
	ткст вЮ8(шткст т);
	ткст вЮ8(юткст т);
	ткст вЮ8(сим[4] буф, дим с);
	шткст вЮ16(ткст т);
	шим* вЮ16н(ткст т);
	шткст вЮ16(шткст т);
	шткст вЮ16(юткст т);
	шткст вЮ16(шим[2] буф, дим с);
	юткст вЮ32(ткст т);
	юткст вЮ32(шткст т);
	юткст вЮ32(юткст т);
	
проц пишиф(...);
проц пишифнс(...);
проц скажифнс(...);
проц скажиф(...);
проц пишиф_в(фук чф, ...);
проц пишифнс_в(фук чф, ...);
ткст фм(...);
alias фм форматируй;

проц форматДелай(проц delegate(дим) putc, ИнфОТипе[] arguments, спис_ва аргук);
ткст форматируйс(ткст т, ...);

проц разборСпискаАргументов(ref ИнфОТипе[] арги, ref спис_ва аргук, out ткст format);

ткст[] списпап(ткст имяп, РегВыр рег);
проц списпап(ткст имяп, бул delegate(ткст имяф) обрвызов);
проц списпап(ткст имяп, бул delegate(ПапЗап* пз) обрвызов);

ткст подставь(ткст текст, ткст образец, ткст delegate(РегВыр) дг, ткст атрибуты = пусто);

РегВыр ищи(ткст текст, ткст образец, ткст атрибуты = пусто);

т_время вЦел(т_время n);

	реал абс(креал х);
	реал абс(вреал х);
	креал конъюнк(креал у);
	вреал конъюнк(вреал у);
	креал кос(креал х);
	реал кос(вреал х);
	креал син(креал х);
	вреал син(вреал х);
	креал квкор(креал х);
	цел больш_из(цел а, цел б);
	дол больш_из(дол а, дол б);
	цел больш_из(цел[] ч);
	дол больш_из(дол[] ч);
	цел меньш_из(цел а, цел б);
	дол меньш_из(дол а, дол б);
	цел меньш_из(цел[] ч);
	дол меньш_из(дол[] ч);
	цел сумма(цел[] ч);
	дол сумма(дол[] ч);
	дол квадрат(цел а);
	цел квадрат(цел а);
}
/////////////////////////////////////
extern(D)
{
	ткст ДАТА(); ////alias _ДАТА ДАТА;
	ткст ВРЕМЯ(); //alias _ВРЕМЯ ВРЕМЯ;

	ук дай_низ_стека(); //alias  _дай_низ_стека дай_низ_стека;

	//МД5
	проц суммаМД5(ббайт[16] дайджест, проц[] данные); //alias _суммаМД5 суммаМД5;
	проц выведиМД5Дайджест(ббайт дайджест[16]); //alias _выведиМД5Дайджест выведиМД5Дайджест;
	ткст дайджестМД5вТкст(ббайт[16] дайджест); //alias _дайджестМД5вТкст дайджестМД5вТкст;
	//ЗИП

	//ЗЛИБ
	бцел адлер32(бцел адлер, проц[] буф); //alias _адлер32 адлер32;
	бцел цпи32(бцел кс, проц[] буф); //alias _цпи32 цпи32;
	проц[] сожмиЗлиб(проц[] истбуф, цел ур = цел.init); //alias _сожмиЗлиб сожмиЗлиб;
	проц[] разожмиЗлиб(проц[] истбуф, бцел итдлин = 0u, цел винбиты = 15); //alias _разожмиЗлиб разожмиЗлиб;

	//Универсальный Идентификатор Ресурса
	бцел аски8гекс(дим с); alias аски8гекс аскиВгекс;

	ткст раскодируйУИР(ткст кодирУИР);
	alias раскодируйУИР раскодуир;

	ткст раскодируйКомпонентУИР(ткст кодирКомпонУИР);
	alias раскодируйКомпонентУИР раскодкомпуир;

	ткст кодируйУИР(ткст уир);
	alias кодируйУИР кодуир;

	ткст кодируйКомпонентУИР(ткст уирКомпон);
	alias кодируйКомпонентУИР кодкомпуир;

	//Юникод

	бул юпроп_ли(дим с); //alias _юпроп_ли юпроп_ли;
	бул юзаг_ли(дим с); //alias _юзаг_ли юзаг_ли;
	дим в_юпроп(дим с); //alias _в_юпроп в_юпроп;
	дим в_юзаг(дим с);  //alias _в_юзаг в_юзаг;
	бул юцб_ли(дим с); alias юцб_ли юцифрабукв_ли;

	//утилиты
	ткст текстСисОшибки(бцел кодош); //alias _текстСисОшибки текстСисОшибки;

	//Динамически загружаемая библиотека
	цел иницМодуль(); //alias _иницМодуль иницМодуль;
	проц деиницМодуль(); //alias _деиницМодуль деиницМодуль;
	ук загрузиМодуль(in ткст имямод); //alias _загрузиМодуль загрузиМодуль;
	ук добавьСсылНаМодуль(ук умодуль); //alias _добавьСсылНаМодуль добавьСсылНаМодуль;
	проц отпустиМодуль(inout ук умодуль); //alias _отпустиМодуль отпустиМодуль, высвободиМодуль;
	ук дайСимволИМодуля(inout ук умодуль, in ткст имяСимвола); //alias _дайСимволИМодуля дайСимволМодуля;
	ткст ошибкаИМодуля(); //alias _ошибкаИМодуля ошибкаМодуля;

	цел пуб(бцел х); alias пуб дайПервУстБит;
	цел пубр(бцел х); alias пубр найдиПервУстБит;
	цел тб(in бцел *х, бцел номбит); alias тб тестируйБит;
	цел тбз(бцел *х, бцел номбит); alias тбз тестируйЗаполниБит;
	цел тбп(бцел *х, бцел номбит); alias тбп тестируйИзмениБит;
	цел тбу(бцел *х, бцел номбит); alias тбу тестируйУстановиБит;
	бцел развербит(бцел б); alias развербит разверниБайт;
	ббайт чипортБб(бцел адр_порта); alias чипортБб читайПортБбайт;
	бкрат чипортБк(бцел адр_порта); alias чипортБк читайПортБкрат;
	бкрат чипортБц(бцел адр_порта); alias чипортБц читайПортБцел;
	ббайт пипортБб(бцел адр_порта, ббайт зап); alias пипортБб пишиПортБбайт;
	бкрат пипортБк(бцел адр_порта, бкрат зап); alias пипортБк пишиПортБкрат;
	бкрат пипортБц(бцел адр_порта, бцел зап); alias  пипортБц пишиПортБцел;
	цел члоустбит32( бцел x ); //alias _члоустбит32 члоустбит32;
	бкрат битсвоп( бцел x ); alias битсвоп переставьБит ;

	бкрат кодируйДлину64(бцел сдлин); //alias _кодируйДлину64 кодируйДлину64;
	ткст кодируй64(ткст стр, ткст буф = ткст.init); //alias _кодируй64 кодируй64;
	бкрат раскодируйДлину64(бцел кдлин); //alias _раскодируйДлину64 раскодируйДлину64;
	ткст раскодируй64(ткст кстр, ткст буф = ткст.init); //alias _раскодируй64 раскодируй64;
	
	проц пишификс(фук фу, ИнфОТипе[] аргументы, ук аргук, цел нс = нет); //alias _пишификс пишификс;

	ткст читайстр(); //alias _читайстр читайстр, читайКонсоль;
	т_мера читайстр(фук чф, inout ткст буф);
	т_мера читайстр(inout ткст буф);

	цел числобукв_ли(дим б); //alias _числобукв_ли числобукв_ли;
	цел буква_ли(дим б); //alias _буква_ли буква_ли;
	цел управ_ли(дим б); //alias _управ_ли управ_ли;
	цел цифра_ли(дим б); //alias _цифра_ли цифра_ли;
	цел проп_ли(дим б); //alias _проп_ли проп_ли;
	цел пунктзнак_ли(дим б); //alias _пунктзнак_ли пунктзнак_ли;
	цел межбукв_ли(дим б); //alias _межбукв_ли межбукв_ли;
	цел заг_ли(дим б); //alias _заг_ли заг_ли;
	цел цифраикс_ли(дим б); //alias _цифраикс_ли цифраикс_ли;
	цел граф_ли(дим б); //alias _граф_ли граф_ли;
	цел печат_ли(дим б) ; //alias _печат_ли печат_ли;
	цел аски_ли(дим б); //alias _аски_ли аски_ли;
	дим впроп(дим б); //alias _впроп впроп;
	дим взаг(дим б); //alias _взаг взаг;
	цел руспроп_ли(дим б); //alias _руспроп_ли руспроп_ли;
	цел русзаг_ли(дим б); //alias _русзаг_ли русзаг_ли;

	бул пробел_ли(дим s); //alias _пробел_ли пробел_ли;
	дол ткствцел(ткст s); //alias _ткствцел ткствцел;
	реал ткствдробь(ткст s); //alias _ткствдробь ткствдробь;
	цел сравни(ткст s1, ткст s2); //alias _сравни сравни;
	цел сравнлюб(ткст s1, ткст s2); //alias _сравнлюб сравнлюб;
	сим* вТкст0(ткст s); //alias _вТкст0 вТкст0;
	цел найди(ткст s, дим c); //alias _найди найди;
	цел найдлюб(ткст s, дим c); //alias _найдлюб найдлюб;
	цел найдрек(ткст s, дим c); //alias _найдрек найдрек;
	цел найдлюбрек(ткст s, дим c); //alias _найдлюбрек найдлюбрек;
	цел найди(ткст s, ткст подст);
	цел найдлюб(ткст s, ткст подст);
	цел найдрек(ткст s, ткст подст);
	цел найдлюбрек(ткст s, ткст подст);
	ткст впроп(ткст s);
	ткст взаг(ткст s);
	ткст озаг(ткст т); //alias _озаг озаг;
	ткст озагслова(ткст т); //alias _озагслова озагслова;
	ткст повтори(ткст т, т_мера м);
	ткст объедини(ткст[] слова, ткст разд); //alias _объедини объедини;
	ткст [] разбейдоп(ткст т, ткст разделитель); //alias _разбейдоп разбейдоп;
	ткст [] разбей(ткст т); //alias _разбей разбей;
	ткст [] разбейнастр(ткст т); //alias _разбейнастр разбейнастр;
	ткст уберислева(ткст т); //alias _уберислева уберислева;
	ткст уберисправа(ткст т); //alias _уберисправа уберисправа;
	ткст убери(ткст т); //alias _убери убери;
	ткст убериразгр(ткст т); //alias _убериразгр убериразгр;
	ткст уберигран(ткст т); //alias _уберигран уберигран;
	ткст полев(ткст т, цел ширина); //alias _полев полев;
	ткст поправ(ткст т, цел ширина); //alias _поправ поправ;
	ткст вцентр(ткст т, цел ширина); //alias _вцентр вцентр;
	ткст занули(ткст т, цел ширина); //alias _занули занули;
	ткст замени(ткст т, ткст с, ткст на); //alias _замени замени;
	ткст заменисрез(ткст т, ткст срез, ткст замена);
	ткст вставь(ткст т, т_мера индекс, ткст подст); //alias _вставь вставь;
	т_мера счесть(ткст т, ткст подст); //alias 

	ткст заменитабнапбел(ткст стр, цел размтаб=8); //alias _заменитабнапбел заменитабнапбел;
	ткст заменипбелнатаб(ткст стр, цел размтаб=8); //alias _заменипбелнатаб заменипбелнатаб;
	ткст постройтранстаб(ткст из, ткст в); //alias _постройтранстаб постройтранстаб;
	ткст транслируй(ткст т, ткст табтранс, ткст удсим); //alias _транслируй транслируй; 
	
	т_мера посчитайсимв(ткст т, ткст образец); //alias _посчитайсимв посчитайсимв;
	ткст удалисимв(ткст т, ткст образец); //alias _удалисимв удалисимв;
	ткст сквиз(ткст т, ткст образец= пусто); //alias _сквиз сквиз;
	ткст следщ(ткст т); //alias _следщ следщ;
	ткст тз(ткст ткт, ткст из, ткст в, ткст модифф= пусто); //alias _тз тз;

	бул чис_ли(in ткст т, in бул раздВкл = нет); //alias _чис_ли чис_ли; 
	т_мера колном(ткст ткт, цел размтаб=8); //alias _колном колном;
	ткст параграф(ткст т, цел колонки = 80, ткст первотступ = пусто, ткст отступ = пусто, цел размтаб = 8); //alias _параграф параграф;
	ткст эладр_ли(ткст т); //alias _эладр_ли эладр_ли;
	ткст урл_ли(ткст т); //alias _урл_ли урл_ли;
	ткст целВЮ8(ткст врем, бцел знач); //alias _целВЮ8 целВЮ8;
	ткст бдолВЮ8(ткст врем, бцел знач); //alias _бдолВЮ8 бдолВЮ8;


	цел вЦел(ткст т); //alias _вЦел вЦел;
	бцел вБцел(ткст т); //alias _вБцел вБцел;
	дол вДол(ткст т); //alias _вДол вДол;
	бдол вБдол(ткст т); //alias _вБдол вБдол;
	крат вКрат(ткст т); //alias _вКрат вКрат;
	бкрат вБкрат(ткст т); //alias _вБкрат вБкрат;
	байт вБайт(ткст т); //alias _вБайт вБайт;
	ббайт вБбайт(ткст т); //alias _вБбайт вБбайт;
	плав вПлав(ткст т); //alias _вПлав вПлав;
	дво вДво(ткст т); //alias _вДво вДво;
	реал вРеал(ткст т); //alias _вРеал вРеал;

	проц установиИсходнуюПапкуДляКовер(ткст путь);
	проц установиПапкуЗаписиДляКовер(ткст путь);
	проц установиСлияниеКовер(бул флаг);
	проц регитьКовер(ткст фимя, МассивБит оу, бцел[] данные);

	бул дим_ли(дим д);

	проц случсей(бцел семя, бцел индекс);
	бцел случайно();
	бцел случген(бцел семя, бцел индекс, реал члоциклов);

	проц[] читайФайл(ткст имяф); //alias _читайФайл читайФайл;
	проц пишиФайл(ткст имяф, проц[] буф); //alias _пишиФайл пишиФайл;
	проц допишиФайл(ткст имяф, проц[] буф); //alias _допишиФайл допишиФайл;
	проц переименуйФайл(ткст из, ткст в); //alias _переименуйФайл переименуйФайл;
	проц удалиФайл(ткст имяф); //alias _удалиФайл удалиФайл;
	бдол дайРазмерФайла(ткст имяф); //alias _дайРазмерФайла дайРазмФайла, дайРазмерФайла;
	проц дайВременаФайла(ткст имяф, out т_время фтц, out т_время фта, out т_время фтм);
	бул естьФайл(ткст имяф); //alias _естьФайл естьФайл;
	бкрат дайАтрибутыФайла(ткст имяф); alias дайАтрибутыФайла дайАтрыФайла;
	бул файл_ли(ткст имяф); //alias _файл_ли файл_ли;
	бул папка_ли(ткст имяп); //alias _папка_ли папка_ли;
	проц сменипап(ткст имяп);	alias сменипап перейди_в;
	проц сделайпап(ткст имяп); alias сделайпап сделайПапку;
	проц удалипап(ткст имяп); alias удалипап  удалиПапку;
	ткст дайтекпап(); alias дайтекпап дайТекущуюПапку;
	ткст [] списпап(ткст имяп, ткст образец); alias списпап  списокПапки;
	ткст [] списпап(ткст имяп);
	проц копируйФайл(ткст из, ткст в); //alias _копируйФайл копируйФайл;
	сим* вМБТ_0(ткст т);
	бул выведиФайл(ткст имяф);

	Дата разборДаты(ткст т);

	проц вГодНедИСО8601(т_время t, out цел год, out цел неделя);	
	цел День(т_время t);
	цел високосныйГод(цел y);
	цел днейВГоду(цел y);
	цел деньИзГода(цел y);
	т_время времяИзГода(цел y);
	цел годИзВрем(т_время t);	
	бул високосный_ли(т_время t);
	цел месяцИзВрем(т_время t);
	цел датаИзВрем(т_время t);
	цел часИзВрем(т_время t);
	цел минИзВрем(т_время t);
	цел секИзВрем(т_время t);
	цел мсекИзВрем(т_время t);
	цел времениВДне(т_время t);
	цел ДеньНедели(т_время вр);
	т_время МВ8Местное(т_время вр);
	т_время местное8МВ(т_время вр);
	т_время сделайВремя(т_время час, т_время мин, т_время сек, т_время мс);
	т_время сделайДень(т_время год, т_время месяц, т_время дата);
	т_время сделайДату(т_время день, т_время вр);

	цел датаОтДняНеделиМесяца(цел год, цел месяц, цел день_недели, цел ч);
	цел днейВМесяце(цел год, цел месяц);
	ткст вТкст(т_время время);
	ткст вТкстМВ(т_время время);
	ткст вТкстДаты(т_время время);
	ткст вТкстВремени(т_время время);
	т_время разборВремени(ткст т);
	т_время дайВремяМВ();
	т_время ФВРЕМЯ8т_время(ФВРЕМЯ *фв);
	т_время СИСТВРЕМЯ8т_время(СИСТВРЕМЯ *св, т_время вр);
	т_время дайМестнуюЗЧП();
	цел дневноеСохранениеЧО(т_время вр);
	т_время вДвремя(ФВремяДос вр);
	ФВремяДос вФВремяДос(т_время вр);

	ткст о_ЦПУ();

	ткст разманглируй(ткст имя);
	ткст извлекиРасш(ткст пимя); alias извлекиРасш дайРасш;
	ткст дайИмяПути(ткст пимя);

	ткст извлекиИмяПути(ткст пимя);
	ткст извлекиПапку(ткст пимя);

	ткст извлекиМеткуДиска(ткст пимя);
	ткст устДефРасш(ткст пимя, ткст расш);
	ткст добРасш(ткст фимя, ткст расш);
	бул абсПуть_ли(ткст путь); //alias _абсПуть_ли абсПуть_ли;
	ткст слейПути(ткст п1, ткст п2); //alias _слейПути слейПути, объедини;
	бул сравниПути(дим п1, дим п2);
	бул сравниПутьОбразец(ткст фимя, ткст образец);
	ткст разверниТильду(ткст путь);

	реал абс(реал х); //alias _абс абс;
	дол абс(дол х);
	цел абс(цел х);
	реал кос(реал х); //alias _кос кос;
	реал син(реал х); //alias _син син;
	реал тан(реал х); //alias _тан тан;
	реал акос(реал х); //alias _акос акос;
	реал асин(реал х); //alias _асин асин;
	реал атан(реал х); //alias _атан атан;
	реал атан2(реал у, реал х); //alias _атан2 атан2;
	реал гкос(реал х); //alias _гкос гкос;
	реал гсин(реал х); //alias _гсин гсин;
	реал гтан(реал х); //alias _гтан гтан;
	реал гакос(реал х);  //alias _гакос гакос;
	реал гасин(реал х);  //alias _гасин гасин;
	реал гатан(реал х);  //alias _гатан гатан;
	дол округливдол(реал х);  //alias _округливдол округливдол;
	дол округливближдол(реал х);  //alias _округливближдол округливближдол;
	плав квкор(плав х);  //alias _квкор квкор;
	дво квкор(дво х); 
	реал квкор(реал х);
	реал эксп(реал х);  //alias _эксп эксп;
	реал экспм1(реал х);  //alias _экспм1 экспм1;
	реал эксп2(реал х);  //alias _эксп2 эксп2;
	креал экспи(реал х);  //alias _экспи экспи;
	реал прэксп(реал знач, out цел эксп);  //alias _прэксп прэксп;
	цел илогб(реал х);  //alias _илогб илогб;
	реал лдэксп(реал н, цел эксп);  //alias _лдэксп лдэксп;
	реал лог(реал х);  //alias _лог лог;
	реал лог10(реал х);  //alias _лог10 лог10;
	реал лог1п(реал х);  //alias _лог1п лог1п;
	реал лог2(реал х);  //alias _лог2 лог2;
	реал логб(реал х);  //alias _логб логб;
	реал модф(реал х, inout реал у);  //alias _модф модф;
	реал скалбн(реал х, цел н);  //alias _скалбн скалбн;
	реал кубкор(реал х);  //alias _кубкор кубкор;
	реал фабс(реал х);  //alias _фабс фабс;
	реал гипот(реал х, реал у);  //alias _гипот гипот;
	реал фцош(реал х);  //alias _фцош фцош;
	реал лгамма(реал х);  //alias _лгамма лгамма;
	реал тгамма(реал х);  //alias _тгамма тгамма;
	реал потолок(реал х);  //alias _потолок потолок;
	реал пол(реал х);  //alias _пол пол;
	реал ближцел(реал х);  //alias _ближцел ближцел;
	цел окрвцел(реал x); //alias _окрвцел окрвцел;
	реал окрвреал(реал х);   //alias _окрвреал окрвреал;
	дол окрвдол(реал х);  //alias _окрвдол окрвдол;
	реал округли(реал х);  //alias _округли округли;
	дол докругли(реал х);  //alias _докругли докругли;
	реал упрости(реал х);  //alias _упрости упрости;
	реал остаток(реал х, реал у);  //alias _остаток остаток;
	бул нч_ли(реал х);  //alias _нч_ли нч_ли;
	бул конечен_ли(реал р);  //alias _конечен_ли конечен_ли;
	бул субнорм_ли(плав п);  //alias _субнорм_ли субнорм_ли;
	бул субнорм_ли(дво п); 
	бул субнорм_ли(реал п);
	бул беск_ли(реал р);  //alias _беск_ли беск_ли;
	бул идентичен_ли(реал р, реал д);  //alias _идентичен_ли идентичен_ли;
	бул битзнака(реал р);  //alias _битзнака битзнака;
	реал копируйзнак(реал кому, реал у_кого);  //alias _копируйзнак копируйзнак;
	реал нч(ткст тэгп);  //alias _нч нч;
	реал следщБольш(реал р);  //alias _следщБольш следщБольш;
	дво следщБольш(дво р);  
	плав следщБольш(плав р);
	реал следщМеньш(реал р);  //alias _следщМеньш следщМеньш;
	дво следщМеньш(дво р); 
	плав следщМеньш(плав р); 
	реал следщза(реал а, реал б);  //alias _следщза следщза;
	плав следщза(плав а, плав б);
	дво следщза(дво а, дво б); 
	реал пдельта(реал а, реал б);  //alias _пдельта пдельта;
	реал пбольш_из(реал а, реал б);  //alias _пбольш_из пбольш_из;
	реал пменьш_из(реал а, реал б);  //alias _пменьш_из пменьш_из;
	реал степень(реал а, бцел н);  //alias _степень степень;
	реал степень(реал а, цел н);
	реал степень(реал а, реал н); 
	бул правны(реал а, реал б);  //alias _правны правны;
	бул правны(реал а, реал б, реал эпс);
	реал квадрат(цел а);  //alias _квадрат квадрат;
	реал дробь(реал а);  //alias _дробь дробь;
	цел знак(цел а);  //alias _знак знак;
	цел знак(дол а); 
	цел знак(реал а);  
	реал цикл8градус(реал ц);  //alias _цикл8градус цикл8градус;
	реал цикл8радиан(реал ц);  //alias _цикл8радиан цикл8радиан;
	реал цикл8градиент(реал ц);  //alias _цикл8градиент цикл8градиент;
	реал градус8цикл(реал г);  //alias _градус8цикл градус8цикл;
	реал градус8радиан(реал г);  //alias _градус8радиан градус8радиан;
	реал градус8градиент(реал г);  //alias _градус8градиент градус8градиент;
	реал радиан8градус(реал р);  //alias _радиан8градус радиан8градус;
	реал радиан8цикл(реал р);  //alias _радиан8цикл радиан8цикл;
	реал радиан8градиент(реал р);  //alias _радиан8градиент радиан8градиент;
	реал градиент8градус(реал г);  //alias _градиент8градус градиент8градус;
	реал градиент8цикл(реал г);  //alias _градиент8цикл градиент8цикл;
	реал градиент8радиан(реал г);  //alias _градиент8радиан градиент8радиан;
	реал сариф(реал[] ч);  //alias _сариф сариф;
	реал сумма(реал[] ч);  //alias _сумма сумма;
	реал меньш_из(реал[] ч);  //alias _меньш_из меньш_из;
	реал меньш_из(реал а, реал б);  
	реал больш_из(реал[] ч);  //alias _больш_из больш_из;
	реал больш_из(реал а, реал б);
	реал акот(реал р);  //alias _акот акот;
	реал асек(реал р);  //alias _асек асек;
	реал акосек(реал р);  //alias _акосек акосек;
	реал кот(реал р);  //alias _кот кот;
	реал сек(реал р);  //alias _сек сек;
	реал косек(реал р);  //alias _косек косек;
	реал гкот(реал р);  //alias _гкот гкот;
	реал гсек(реал р);  //alias _гсек гсек;
	реал гкосек(реал р);  //alias _гкосек гкосек;
	реал гакот(реал р);  //alias _гакот гакот;
	реал гасек(реал р);  //alias _гасек гасек;
	реал гакосек(реал р);  //alias _гакосек гакосек;
	реал ткст8реал(ткст т);  //alias _ткст8реал ткст8реал;

	ткст подставь(ткст текст, ткст образец, ткст формат, ткст атрибуты = пусто); //alias _подставь подставь;

	цел найди(рткст текст, ткст образец, ткст атрибуты);
	цел найдирек(рткст текст, ткст образец, ткст атрибуты = пусто);
	ткст [] разбей(ткст текст, ткст образец, ткст атрибуты = пусто);

	цел система (ткст команда); alias система сис;
	
	цел пауза(); alias пауза пз;
	цел пускпрог(цел режим, ткст путь, ткст[] арги);
	цел выппрог(ткст путь, ткст[] арги);
	цел выппрог(ткст путь, ткст[] арги, ткст[] перемср);
	цел выппрогcp(ткст путь, ткст[] арги);
	цел выппрогср(ткст путь, ткст[] арги, ткст[] перемср);

	//std.crc32 (ЦПИ - Циклическая Проверка Избыточности)
	бкрат иницЦПИ32();
	бкрат обновиЦПИ32б(ббайт зн, бцел црц);
	бкрат обновиЦПИ32с(сим зн, бцел црц);
	бкрат ткстЦПИ32(ткст т);

	бул закройДисковод(ткст меткаДиска);
	бул откройДисковод(ткст меткаДиска);

	проц инфо(ткст сооб); //alias _инфо инфо;
} //end of extern C
////////////////////////////////////////////////////////
/+
СФайл двхо;
СФайл двых;
СФайл дош;

static this() {
  // open standard I/O devices
  двхо = new СФайл(СТДВВОД, ПФРежим.Ввод);
  двых = new СФайл(СТДВЫВОД, ПФРежим.Вывод);
  дош = new СФайл(СТДОШ, ПФРежим.Вывод);
}

static ~this()
 {
  двхо.слей();
  двхо.закрой();
  двых.слей();
  двых.закрой();
  дош.слей();
  дош.закрой();
}
+/
extern(D):

ткст дайПеремСреды(ткст пер);
проц устПеремСреды(ткст пер, ткст знач);
ткст[] дайПуть();
бул гдеЯ(ткст арги, inout ткст пап, inout ткст имя);
ткст канонПуть(ткст origpath);
проц сделпапР(ткст пап);
проц удалиРек(ткст имя);
бул естьФайлВКэш(ткст имяФ);
проц удалиКэшСущФайлов();