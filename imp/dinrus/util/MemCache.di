/*******************************************************************************

        copyright:      Copyright (c) 2005 Kris Bell. все rights reserved

        license:        BSD стиль: $(LICENSE)

        version:        Mar 2005: Initial release

        author:         Kris

*******************************************************************************/

module util.MemCache;

private import  io.Console;

private import  thread,
                exception;

private import  io.stream.Lines,
                io.stream.Buffered;

private import  net.device.Socket,
                net.InternetAddress;

private import  Целое = text.convert.Integer;


/******************************************************************************

******************************************************************************/

class КэшПам : private Нить
{
        private Подключение      хосты[];
        private бул            активное;
        private бцел            наблюдение;

        /**********************************************************************
        
        **********************************************************************/
                
        this (ткст[] хосты, бцел наблюдение = 3)
        {
                super (&run);
                setHosts (хосты);      

                // save configuration
                this.наблюдение = наблюдение;

                // старт the наблюдение
                активное = да;
                super.старт;
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final проц закрой ()
        {
                if (хосты)
                   {
                   foreach (Подключение сервер; хосты)
                            сервер.закрой;
                   хосты = пусто;
                   }
        }

        /**********************************************************************
        
                Store the ключ и значение

        **********************************************************************/
                
        final бул установи (проц[] ключ, проц[] значение, цел флаги=0, цел таймаут=0)
        {       
                return выбери(ключ).помести("установи", ключ, значение, флаги, таймаут);
        }

        /**********************************************************************
        
                Store the значение if ключ does not already exist

        **********************************************************************/
                
        final бул добавь (проц[] ключ, проц[] значение, цел флаги=0, цел таймаут=0)
        {       
                return выбери(ключ).помести("добавь", ключ, значение, флаги, таймаут);
        }

        /**********************************************************************
        
                Store the значение only if ключ есть_ли

        **********************************************************************/
                
        final бул замени (проц[] ключ, проц[] значение, цел флаги=0, цел таймаут=0)
        {
                return выбери(ключ).помести("замени", ключ, значение, флаги, таймаут);
        }

        /**********************************************************************
        
                Удали the specified ключ и сделай ключ "не_годится" for the 
                duration of таймаут, causing добавь(), получи() и удали() on
                the same ключ на_это краш внутри that period

        **********************************************************************/
                
        final бул удали (проц[] ключ, цел таймаут=0)
        {
                return выбери(ключ).удали(ключ, таймаут);
        }

        /**********************************************************************

                VALUE <ключ> <флаги> <байты>\r\n
                <данные блок>\r\n

        **********************************************************************/

        final бул получи (проц[] ключ, Буфер буфер)
        {       
                return выбери(ключ).получи(ключ, буфер);
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final бул инкр (проц[] ключ, бцел значение)
        {
                бцел результат;
                return инкр (ключ, значение, результат);
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final бул декр (проц[] ключ, бцел значение)
        {
                бцел результат;
                return декр (ключ, значение, результат);
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final бул инкр (проц[] ключ, бцел значение, ref бцел результат)
        {
                return выбери(ключ).bump ("инкр", ключ, значение, результат);
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final бул декр (проц[] ключ, бцел значение, ref бцел результат)
        {
                return выбери(ключ).bump ("декр", ключ, значение, результат);
        }

        /**********************************************************************
        
        **********************************************************************/
        
        final проц статус (проц delegate (ткст, ткст[] список) дг)
        {
                foreach (Подключение сервер; хосты)
                         сервер.статус (дг);
        }

        /**********************************************************************
        
        **********************************************************************/
        
        final Буфер буфер (бцел размер)
        {
                return new Буфер (размер);
        }

        /**********************************************************************
        
        **********************************************************************/
                
        final проц setHosts (ткст[] хосты)
        {
                auto conn = new Подключение [хосты.length];     

                foreach (цел i, ткст хост; хосты)
                         conn[i] = new Подключение (хост);

                // установи new список of connections
                this.хосты = conn;
                подключись (conn);
        }

        /**********************************************************************
        
                Подключение наблюдение нить

        **********************************************************************/
                
        private проц run ()
        {
                while (активное)
                       try {
                           Нить.сон (наблюдение);
                           debug(TangoMemCache) Квывод ("testing connections ...").нс;
                           подключись (хосты);
                           } catch (Исключение e)
                                    debug(TangoMemCache) Квывод ("memcache наблюдение: ") (e.вТкст).нс;
        }

        /**********************************************************************
        
        **********************************************************************/
                
        private Подключение выбери (проц[] ключ)
        {
                return хосты[jhash(ключ) % хосты.length];
        }

        /**********************************************************************
        
        **********************************************************************/
                
        private проц подключись (Подключение[] хосты)
        {
                foreach (Подключение c; хосты)
                         c.подключись;
        }

        /**********************************************************************
        
        **********************************************************************/
        
        static class Буфер
        {
                private бцел    протяженность;
                private проц[]  контент;
        
                /**************************************************************
                        
                **************************************************************/
        
                private this (бцел размер)
                {
                        this.контент = new байт [размер];
                }
        
                /**************************************************************
                        
                **************************************************************/
        
                бул расширь (бцел размер)
                {
                        if (размер > контент.length)
                            контент.length = размер;
                        return да;
                }
        
                /**************************************************************
                        
                **************************************************************/
        
                проц[] установи (бцел размер)
                {
                        протяженность = размер;
                        return получи();
                }
        
                /**************************************************************
                        
                **************************************************************/
        
                проц[] получи ()
                {
                        return контент [0..протяженность];
                }
        }

	/**********************************************************************
	
	        jhash() -- хэш a переменная-length ключ into a 32-bit значение
	
	          k     : the ключ (the unaligned переменная-length Массив of байты)
	          длин   : the length of the ключ, counting by байты
	          уровень : can be any 4-байт значение
	
	        Returns a 32-bit значение.  Every bit of the ключ affects every bit of
	        the return значение.  Every 1-bit и 2-bit delta achieves avalanche.
	
	        About 4.3*длин + 80 X86 instructions, with excellent pipelining
	
	        The best хэш таблица размеры are powers of 2.  There is no need на_это do
	        mod a prime (mod is sooo slow!).  If you need less than 32 биты,
	        use a bitmask.  For example, if you need only 10 биты, do
	
	                    h = (h & hashmask(10));
	
	        In which case, the хэш таблица should have hashsize(10) элементы.
	        If you are hashing n strings (ub1 **)k, do it like this:
	
	                    for (i=0, h=0; i<n; ++i) h = хэш( k[i], длин[i], h);
	
	        By Bob Jenkins, 1996.  bob_jenkins@burtleburtle.net.  You may use 
	        this код any way you wish, private, educational, or commercial.  
	        It's free.
	
	        See http://burlteburtle.net/bob/хэш/evahash.html
	        Use for хэш таблица отыщи, or anything where one collision in 2^32 
	        is acceptable. Do NOT use for cryptographic purposes.
	
	**********************************************************************/
	
	static final бцел jhash (проц[] x, бцел c = 0)
	{
	        бцел    a,
	                b;
	
	        a = b = 0x9e3779b9; 
	
	        бцел длин = x.length;
	        ббайт* k = cast(ббайт *) x.ptr;
	
	        // укз most of the ключ 
	        while (длин >= 12) 
	              {
	              a += *cast(бцел *)(k+0);
	              b += *cast(бцел *)(k+4);
	              c += *cast(бцел *)(k+8);
	
	              a -= b; a -= c; a ^= (c>>13); 
	              b -= c; b -= a; b ^= (a<<8); 
	              c -= a; c -= b; c ^= (b>>13); 
	              a -= b; a -= c; a ^= (c>>12);  
	              b -= c; b -= a; b ^= (a<<16); 
	              c -= a; c -= b; c ^= (b>>5); 
	              a -= b; a -= c; a ^= (c>>3);  
	              b -= c; b -= a; b ^= (a<<10); 
	              c -= a; c -= b; c ^= (b>>15); 
	              k += 12; длин -= 12;
	              }
	
	        // укз the последний 11 байты 
	        c += x.length;
	        switch (длин)
	               {
	               case 11: c += (cast(бцел)k[10]<<24);
	               case 10: c += (cast(бцел)k[9]<<16);
	               case 9 : c += (cast(бцел)k[8]<<8);
	               case 8 : b += (cast(бцел)k[7]<<24);
	               case 7 : b += (cast(бцел)k[6]<<16);
	               case 6 : b += (cast(бцел)k[5]<<8);
	               case 5 : b += k[4];
	               case 4 : a += (cast(бцел)k[3]<<24);
	               case 3 : a += (cast(бцел)k[2]<<16);
	               case 2 : a += (cast(бцел)k[1]<<8);
	               case 1 : a += k[0];
	               default:
	               }
	
	        a -= b; a -= c; a ^= (c>>13); 
	        b -= c; b -= a; b ^= (a<<8); 
	        c -= a; c -= b; c ^= (b>>13); 
	        a -= b; a -= c; a ^= (c>>12);  
	        b -= c; b -= a; b ^= (a<<16); 
	        c -= a; c -= b; c ^= (b>>5); 
	        a -= b; a -= c; a ^= (c>>3);  
	        b -= c; b -= a; b ^= (a<<10); 
	        c -= a; c -= b; c ^= (b>>15); 
	
	        return c;
	}
}


/******************************************************************************

******************************************************************************/

private class Подключение
{
        private alias Строки!(сим) Line;

        private ткст          хост;           // original хост адрес
        private Line            строка;           // reading строки это сервер
        private Бввод             ввод;          // ввод поток
        private Бвыв            вывод;         // вывод поток
        private Сокет          провод;        // socket на_это сервер
        private АдресИнтернета адрес;        // where сервер is listening
        private бул            connected;      // currently connected?

        /**********************************************************************
        
        **********************************************************************/
                
        this (ткст хост)
        {
                this.хост = хост;
                провод = new Сокет;
                вывод = new Бвыв (провод);
                ввод = new Бввод (провод);
                строка = new Line (ввод);
                адрес = new АдресИнтернета (хост);
        }
        
        /**********************************************************************
        
        **********************************************************************/
                
        private проц подключись ()
        {
                if (! connected)
                      try {
                          провод.подключись (адрес);
                          connected = да;
                          debug(TangoMemCache) Квывод ("connected на_это ") (хост).нс;
                          } catch (Объект o)
                                   debug(TangoMemCache) Квывод ("failed на_это подключись на_это ")(хост).нс;
        }
        
        /**********************************************************************
        
        **********************************************************************/
                
        private synchronized проц закрой ()
        {
                бул alive = connected;
                connected = нет;

                if (alive)
                    провод.закрой;
        }
        
        /**********************************************************************
        
        **********************************************************************/
                
        private проц ошибка ()
        {
                // закрой this dead socket
                закрой;

                // открой другой one for следщ attempt на_это подключись
                провод.socket.переоткрой;
        }

        /**********************************************************************
        
        **********************************************************************/
                
        private synchronized бул помести (ткст cmd, проц[] ключ, проц[] значение, цел флаги, цел таймаут)
        {
                if (connected)
                    try {
                        сим[16] врем;
                        
                        вывод.очисть;
                        вывод.добавка ("delete ")
                              .добавка (ключ)
                              .добавка (" ")
                              .добавка (Целое.форматируй (врем, таймаут))
                              .добавка ("\r\n")
                              .слей;

                        if (строка.следщ)
                            return строка.получи == "DELETED";
                        } catch (ВВИскл e)
                                 ошибка;
                return нет;
        }

        /**********************************************************************

                VALUE <ключ> <флаги> <байты>\r\n
                <данные блок>\r\n

        **********************************************************************/

        private synchronized бул получи (проц[] ключ, КэшПам.Буфер буфер)
        {       
                if (connected)
                    try {
                        вывод.очисть;
                        вывод.добавка ("получи ")
                              .добавка (ключ)
                              .добавка ("\r\n")
                              .слей;
        
                        if (строка.следщ)
                           {
                           ткст контент = строка.получи;
                           if (контент.length > 4 && контент[0..5] == "VALUE")
                              {
                              цел i;
        
                              // разбор the incoming контент-length
                              for (i=контент.length; контент[--i] != ' ';) 
                                  {}
                              i = cast(цел)Целое.разбор (контент[i .. $]);
        
                              // ensure вывод буфер имеется enough пространство
                              буфер.расширь (i);
                              проц[] приёмн = буфер.установи (i);
        
                              // заполни the буфер контент
                              if (! ввод.заполни (приёмн))
                                    return нет;
        
                              // съешь the CR и тест terminator
                              строка.следщ;
                              строка.следщ;
                              return строка.получи == "END";
                              }
                           }
                        } catch (ВВИскл e)
                                 ошибка;
                return нет;
        }

        /**********************************************************************
        
                Удали the specified ключ и сделай ключ "не_годится" for the 
                duration of таймаут, causing добавь(), получи() и удали() on
                the same ключ на_это краш внутри that period

        **********************************************************************/
                
        private synchronized бул удали (проц[] ключ, цел таймаут=0)
        {
                if (connected)
                    try {
                        сим[16] врем;
        
                        вывод.очисть;
                        вывод.добавка ("delete ")
                              .добавка (ключ)
                              .добавка (" ")
                              .добавка (Целое.форматируй (врем, таймаут))
                              .добавка ("\r\n")
                              .слей;
        
                        if (строка.следщ)
                            return строка.получи == "DELETED";
                        } catch (ВВИскл e)
                                 ошибка;
                return нет;
        }

        /**********************************************************************
        
        **********************************************************************/
                
        private synchronized бул bump (ткст cmd, проц[] ключ, бцел значение, 
                                        ref бцел результат)
        {
                if (connected)
                    try {
                        сим[16] врем;
        
                        вывод.очисть;
                        вывод.добавка (cmd)
                              .добавка (" ")
                              .добавка (ключ)
                              .добавка (" ")
                              .добавка (Целое.форматируй (врем, значение))
                              .добавка ("\r\n")
                              .слей;
        
                        if (строка.следщ)
                            if (строка.получи != "NOT_FOUND")
                               {
                               результат = cast(бцел)Целое.разбор (строка.получи);
                               return да;
                               }
                        } catch (ВВИскл e)
                                 ошибка;
                return нет;
        }

        /**********************************************************************
        
        **********************************************************************/
        
        private synchronized проц статус (проц delegate (ткст, ткст[] список) дг)
        {
                if (connected)
                    try {
                        ткст[] список;

                        вывод.очисть;
                        вывод.пиши ("статс\r\n");
        
                        while (строка.следщ)
                               if (строка.получи == "END")
                                  {
                                  дг (хост, список);
                                      break;
                                  }
                               else
                                  список ~= строка.получи;

                        } catch (ВВИскл e)
                                 ошибка;
        }

}       


debug (TangoMemCache)
{
/******************************************************************************

******************************************************************************/

проц main()
{
        static ткст[] хосты = ["192.168.111.224:11211"];

        auto кэш = new КэшПам (хосты);

        кэш.установи ("foo", "bar");
        кэш.установи ("foo", "wumpus");

        auto буфер = кэш.буфер (1024);
        if (кэш.получи ("foo", буфер))
            Квывод ("значение: ") (cast(ткст) буфер.получи).нс;

        проц stat (ткст хост, ткст[] список)
        {
                foreach (ткст строка; список) 
                         Квывод (хост) (" ") (строка).нс;
        }
        
        while (да)
              {
              кэш.статус (&stat);
              Нить.сон (1.0);
              }
        Квывод ("exiting");
}
}

