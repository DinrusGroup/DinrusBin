module util.demangler;
import cidrus;
//Использует Dinrus.Tools.dll

enum ПФОбрМашина: бкрат {
	Неизвестно   = 0x0000,
	I386      = 0x014C,
	R3000     = 0x0162,
	R4000     = 0x0166,
	R10000    = 0x0168,
	WCEMIPSV2 = 0x0169,
	ALPHA     = 0x0184,
	SH3       = 0x01A2,
	SH3DSP    = 0x01A3,
	SH4       = 0x01A6,
	SH5       = 0x01A8,
	ARM       = 0x01C0,
	THUMB     = 0x01C2,
	AM33      = 0x01D3,
	POWERPC   = 0x01F0,
	POWERPCFP = 0x01F1,
	IA64      = 0x0200,
	MIPS16    = 0x0266,
	MIPSFPU   = 0x0366,
	MIPSFPU16 = 0x0466,
	EBC       = 0x0EBC,
	AMD64     = 0x8664,
	M32R      = 0x9041
}

enum ПРежим_Адресации
{
	РА1616,
	РА1632,
	Реальный,
	Плоский,
}
alias ПРежим_Адресации ПРежАдр;

 struct ИНФ_О_СИМВОЛЕ
	{
        бцел РазмерСтруктуры;
        бцел ИндексТипа;
        бдол Резерв[2];
        бцел Индекс;
        бцел Размер;
        бдол ОваМод;
        бцел Флаги;
        бдол Значение;
        бдол Адрес;
        бцел Регистр;
        бцел Масштаб;
        бцел Тэг;
        бцел ДлинаИм;
        бцел МаксДлинаИм;
        сим Имя[1];
    }

   struct АДРЕС64 //ADDRESS64
	{
	бдол Смещение;
	бкрат Сегмент;
	ПРежим_Адресации  Режим;
	}

	struct ПОМОЩЬОЯ64 //KDHELP64
	{
    бдол     Нить;
    бцел       СтэкОбрВызова;
    бцел       СмещКУкВозврХр;
    бцел       СледщОбрВызов;
    бцел       УкНаКадр;
    бдол     АдрФцииЯдраВызПользРеж;
    бдол    АдрФцииДиспетчераПользРеж;
    бдол     МладшАдрУрЯдра;
    бдол     АдрФцииДиспетчераИсклПользРеж;
    бдол     ОваСтэка;
    бдол     ЛимитСтэка;
    бдол[5]  Резерв;
	}

 	struct КАДР_СТЕКА64 //STACKFRAME64
	{
    АДРЕС64   АдрСчётчикаПрограммы;
    АДРЕС64   АдрВозврата;
    АДРЕС64   АдрКадра;
    АДРЕС64   АдрСтэка;
    АДРЕС64   АдрВозврХр;
    ук       ЗаписьТабФций;
    бдол[4]  АргиФции;
    бул        Фар;//Far;
    бул        Вирт;//Virtual;
    бдол[3]  Резерв;
    ПОМОЩЬОЯ64    помОЯ;
	}


    alias бул function( ук процесс, бдол адрОвы, ук буф, т_мера разм, т_мера *члоСчитБайтов) ФункЧтенПамПроцесса64;
	alias ук function( ук процесс, бдол адрОвы ) ФункДоступаКТабСимФций64;
	alias бдол function( ук процесс, бдол адр ) ФункПолучОвыМодуля64;
	alias бдол function( ук процесс, ук нить, АДРЕС64 адр ) ФункТрансляцииАдреса64;


extern (C)
{
бул хэшированМД5_ли(ткст имя);
ткст разожмиСимволОМФ(ткст з, ткст* буф);
ткст разожмиСимвол(ткст функ, ткст* буф);
бцел вБцел(ткст т);
ткст деманглируй(ткст т);
ткст деманглируй2(ткст ввод, ткст вывод);
проц подробность(бцел уровень);
проц иницОтладСимв();
бул СимПоАдр(ук процесс, т_мера адр, т_мера *смещ, ИНФ_О_СИМВОЛЕ *симв);
бул СимПоИмени(ук процесс, сим* имя, ИНФ_О_СИМВОЛЕ *симв);
бцел ДайФимяМодуляДопА(ук процесс, ук модуль, сим* фимя, бцел разм);
бул ПроходСтека64(ПФОбрМашина маш, ук процесс, ук нить, КАДР_СТЕКА64 *кс, ук записьКтекста, ФункЧтенПамПроцесса64 процЧтенПамяти, ФункДоступаКТабСимФций64 процДоступаКТабФций, ФункПолучОвыМодуля64 процПолучОвыМодуля, ФункТрансляцииАдреса64 транслАдрес );
ук ПроцДоступаКТабФций64( ук процесс, бдол адрОвы );
бдол ПроцПолучОвыМодуля64( ук процесс, бдол адр );
бцел УстОпцСим(бцел опц);
бул ИницСим(ук процесс, сим* путьПоискаПольз, бул ворватьсяВПроцесс);
бдол загрузиСимМодуль64(ук процесс, фук файл, сим* имяОбр, сим* имяМод, бдол оваДлл, т_мера размДлл);
}

