module io.device.Array;

private import exception;
private import io.device.Conduit;



class Массив : Провод, БуферВвода, БуферВывода, ИПровод.ИШаг
{
        private проц[]  данные;                   // the необр данные буфер
        private т_мера  индекс;                  // current читай позиция
        private т_мера  протяженность;                 // предел of valid контент
        private т_мера  дименсия;              // maximum протяженность of контент
        private т_мера  расширение;              // for нарастает instances

        protected static ткст перебор  = "буфер вывода полон";
        protected static ткст недобор = "буфер ввода пуст";
        protected static ткст кфЧтен   = "достигнут конец потока при чтении";
        protected static ткст кфЗап  = "достигнут конец потока при записи";

        this (т_мера ёмкость = 0, т_мера нарастает = 0);
        this (проц[] данные);
        this (проц[] данные, т_мера читаемый);
        final override ткст вТкст ();
        final override т_мера читай (проц[] приёмн);
        final override т_мера пиши (проц[] ист);
        final override т_мера размерБуфера ();
        override проц открепи ();
        override дол сместись (дол смещение, Якорь якорь = Якорь.Нач);
        Массив присвой (проц[] данные);
        Массив присвой (проц[] данные, т_мера читаемый);
        final проц[] присвой ();
        final проц[] opSlice (т_мера старт, т_мера конец);
        final проц[] срез ();
        final проц[] срез (т_мера размер, бул съешь = да);
        final Массив добавь (проц[] ист);
        final бул следщ (т_мера delegate (проц[]) скан);
        final т_мера читаемый ();
        final т_мера записываемый ();
        final т_мера предел ();
        final т_мера ёмкость ();
        final т_мера позиция ();
        final Массив очисть ();
        final override Массив слей ();
        final т_мера писатель (т_мера delegate (проц[]) дг);
        final т_мера читатель (т_мера delegate (проц[]) дг);

}
