module net.device.Berkeley;

private import sys.Common;
private import exception;
private import stringz;

private extern(C) цел strlen(сим*);

import sys.WinConsts:МАСКА_ВВПАРАМ, ВВК_ВХО, ВВФСБВВ, СОКОШИБ, ПОпцияСокета, ППротокол, ПТипСок, ПСемействоАдресов, ПЭкстрЗакрытиеСокета, ПФлагиСокета, ПФлагиАИ, ПОшибкаАИ,  ПФлагиУИ, ПИмИнфо;

import sys.WinStructs: ВИНСОКДАН, ВИНСОКБУФ, набор_уд, значврем, хостзап, адрессок, заминка, адрес_ин, протзап, служзап, адринфо;

extern(C)
{
	бкрат х8сбк(бкрат x);	//htons
	бцел х8сбц(бцел x);//htonl
	бкрат с8хбк(бкрат x);//ntohs
	бцел с8хбц(бцел x);//ntohl

	проц УД_УДАЛИ(СОКЕТ уд, набор_уд* набор);
	цел УД_УСТАНОВЛЕН(СОКЕТ уд, набор_уд* набор);
	проц УД_УСТАНОВИ(СОКЕТ уд, набор_уд* набор);
	проц УД_ОБНУЛИ(набор_уд* набор);

	цел ВСАСтарт(крат требВерсия, ВИНСОКДАН* всадан);
	цел ВСАЧистка();
	цел ВСАДайПоследнююОшибку();
	СОКЕТ сокет(ПСемействоАдресов са, ПТипСок тип, ППротокол протокол);
	цел ввктлсок(СОКЕТ с, цел кмд, бцел* аргук);
	цел свяжисок(СОКЕТ с, адрессок* имя, цел длинаим);
	цел подключи(СОКЕТ с, адрессок* имя, цел длиннаим);		
	цел слушай(СОКЕТ с, цел бэклог);
	СОКЕТ пусти(СОКЕТ с, адрессок* адр, цел *длинадр);		
	цел закройсок(СОКЕТ с);	
	цел экстрзак(СОКЕТ с, ПЭкстрЗакрытиеСокета как);	
	цел дайимяпира(СОКЕТ с, адрессок* имя,  цел * длинаим);
	цел дайимясок(СОКЕТ с, адрессок* адр,  цел * длинаим);
	цел шли(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги);
	цел шли_на(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги, адрессок* кому, цел длинаприём);
	цел прими(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги);
	цел прими_от(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги, адрессок* от_кого,  цел* длинаистока);
	цел дайопцсок(СОКЕТ с, цел уровень, цел имяопц, ук значопц,  цел* длинаопц);
	цел установиопцсок(СОКЕТ с, цел уровень, цел имяопц, ук значопц, цел длинаопц);		
	бцел адр_инет(ткст т);	
	цел выбери(цел нуд, набор_уд* читнуд, набор_уд* запнуд, набор_уд* ошнуд, значврем* таймаут);
	ткст инетс8а(адрес_ин иа);	
	хостзап* дайхостпоимени(ткст имя);	
	хостзап* дайхостпоадресу(ук адр, цел длин, цел тип);		
	протзап* дайпротпоимени(ткст имя);	
	протзап* дайпротпономеру(цел номер);
	служзап* дайслужбупоимени(ткст имя, ткст протокол);
	служзап* дайслужбупопорту(цел порт, ткст протокол);		
	цел дайимяхоста(ткст имя, цел длинаим);	
	цел дайадринфо(ткст имяузла, ткст имяслуж, адринфо* хинты, адринфо** рез);		
	проц высвободиадринфо(адринфо* аи);	
	цел дайинфобимени(адрессок* ас, т_длинсок длинсок, ткст хост, бцел длинхост, ткст серв, бцел длинсерв, ПИмИнфо флаги);
	
}

alias закройсок закрой;


                цел function(сим* узел, сим* служба, Адрес.ИнфОбАдре* hints, Адрес.ИнфОбАдре** рез) getAddrinfo;
				проц function(Адрес.ИнфОбАдре *рез) freeAddrinfo; 
                цел function(Адрес.адрессок* sa, цел salen, сим* хост, цел hostlen, сим* serv, цел servlen, цел флаги) getnameinfo; 
				
                бул function (т_сокет, бцел, ук, DWORD, DWORD, DWORD, DWORD*, OVERLAPPED*) AcceptEx;
                бул function (т_сокет, HANDLE, DWORD, DWORD, OVERLAPPED*, ук, DWORD) TransmitFile;
                бул function (т_сокет, ук, цел, ук, DWORD, DWORD*, OVERLAPPED*) ConnectEx;
			

        static this();

        static ~this();

/*******************************************************************************

*******************************************************************************/

public struct Беркли
{
        т_сокет        сок;
        ПТипСок      тип;
        ПСемействоАдресов   семейство;
        ППротокол    протокол;
version (Windows)
         бул           синхронно;

        enum : т_сокет 
        {
                НЕВЕРНСОК = т_сокет.init
        }
        
        enum 
        {
                Ошибка = -1
        }

        alias Ошибка        ОШИБКА;               // backward compatibility
        alias безЗаминки      установиБезЗаминки;          // backward compatibility
        alias повторнИспАдреса установиПовторнИспАдреса;     // backward compatibility
        

        /***********************************************************************

                Configure this экземпляр

        ***********************************************************************/

        проц открой (ПСемействоАдресов семейство, ПТипСок тип, ППротокол протокол, бул создай=да);

        /***********************************************************************

                Открыть/переоткрой a исконный сокет for this экземпляр

        ***********************************************************************/

        проц переоткрой (т_сокет сок = сок.init);

        /***********************************************************************

                calling экстрзак() before this is recommended for connection-
                oriented СОКЕТs

        ***********************************************************************/

        проц открепи ();

        /***********************************************************************

                Return the underlying OS укз of this Провод

        ***********************************************************************/

        т_сокет укз ();

        /***********************************************************************

                Return сокет ошибка статус

        ***********************************************************************/

        цел ошибка ();

        /***********************************************************************

                Return the последний ошибка

        ***********************************************************************/

        static цел последнОшиб ();

        /***********************************************************************

                Is this сокет still alive? A закрыт сокет is consопрered куда
                be dead, but a экстрзак сокет is still alive.

        ***********************************************************************/

        бул жив_ли ();

        /***********************************************************************

        ***********************************************************************/

        ПСемействоАдресов семействоАдресов ();

        /***********************************************************************

        ***********************************************************************/

        Беркли* вяжи (Адрес адр);

        /***********************************************************************

        ***********************************************************************/

        Беркли* подключись (Адрес куда);

        /***********************************************************************

                need куда вяжи() первый

        ***********************************************************************/

        Беркли* слушай (цел backlog);

        /***********************************************************************

                need куда вяжи() первый

        ***********************************************************************/

        проц прими (ref Беркли мишень);

        /***********************************************************************

                The экстрзак function shuts down the connection of the сокет.
                Depending on the аргумент значение, it will:

                    -   stop receiving данные for this сокет. If further данные
                        arrives, it is rejected.

                    -   stop trying куда transmit данные из_ this сокет. Also
                        discards any данные waiting куда be sent. Стоп looking for
                        acknowledgement of данные already sent; don't retransmit
                        if any данные is lost.

        ***********************************************************************/

        Беркли* глуши (ПЭкстрЗакрытиеСокета как);

        /***********************************************************************

                установи заминка таймаут

        ***********************************************************************/

        Беркли* заминка (цел период);

        /***********************************************************************

                активируй/disable адрес reuse

        ***********************************************************************/

        Беркли* повторнИспАдреса (бул включен);

        /***********************************************************************

                активируй/disable безЗаминки опция (nagle)

        ***********************************************************************/

        Беркли* безЗаминки (бул включен);

        /***********************************************************************

                Helper function куда укз the добавим и dropping of группа
                membershИП.

        ***********************************************************************/

        проц включиВГруппу (АдресИПв4 адрес, бул onOff);

        /***********************************************************************

        ***********************************************************************/

        Адрес новОбъектСемейства ();

        /***********************************************************************

                return the имя_хоста

        ***********************************************************************/

        static ткст имяХоста ();

        /***********************************************************************

                return the default хост адрес (ИПv4)

        ***********************************************************************/

        static бцел адресХоста ();

        /***********************************************************************

                return the remote адрес of the текущ connection (ИПv4)

        ***********************************************************************/

        Адрес удалённыйАдрес ();
        

        /***********************************************************************

                return the local адрес of the текущ connection (ИПv4)

        ***********************************************************************/

        Адрес локальныйАдрес ();

        /***********************************************************************

                Отправка данные on the connection. Returns the число of байты 
                actually sent, or ERROR on failure. If the сокет is блокируется 
                и there is no буфер пространство left, шли waits.

                Returns число of байты actually sent, or -1 on ошибка

        ***********************************************************************/

        цел шли (проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);

        /***********************************************************************

                Отправка данные куда a specific приёмник адрес. If the 
                приёмник адрес is not specified, a connection 
                must have been made и that адрес is использован. If the 
                сокет is блокируется и there is no буфер пространство left, 
                отправь_на waits.

        ***********************************************************************/

        цел отправь_на (проц[] буф, ПФлагиСокета флаги, Адрес куда);

        /***********************************************************************

                ditto

        ***********************************************************************/

        цел отправь_на (проц[] буф, Адрес куда);
		
        /***********************************************************************

                ditto - assumes you подключись()ed

        ***********************************************************************/

        цел отправь_на (проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);

        /***********************************************************************

                Отправка данные куда a specific приёмник адрес. If the 
                приёмник адрес is not specified, a connection 
                must have been made и that адрес is использован. If the 
                сокет is блокируется и there is no буфер пространство left, 
                отправь_на waits.

        ***********************************************************************/

        private цел отправь_на (проц[] буф, цел флаги, Адрес.адрессок* куда, цел длин);

        /***********************************************************************
                принять данные on the connection. Returns the число of 
                байты actually Приёмd, 0 if the remote sопрe имеется закрыт 
                the connection, or ERROR on failure. If the сокет is блокируется, 
                принять waits until there is данные куда be Приёмd.
                
                Returns число of байты actually Приёмd, 0 on connection 
                closure, or -1 on ошибка

        ***********************************************************************/

        цел принять (проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);

        /***********************************************************************

                принять данные и получи the remote endpoint адрес. Returns 
                the число of байты actually Приёмd, 0 if the remote sопрe 
                имеется закрыт the connection, or ERROR on failure. If the сокет 
                is блокируется, принять_от waits until there is данные куда be 
                Приёмd.

        ***********************************************************************/

        цел принять_от (проц[] буф, ПФлагиСокета флаги, Адрес из_);

        /***********************************************************************

                ditto

        ***********************************************************************/

        цел принять_от (проц[] буф, Адрес из_);

        /***********************************************************************

                ditto - assumes you подключись()ed

        ***********************************************************************/

        цел принять_от (проц[] буф, ПФлагиСокета флаги = ПФлагиСокета.Неук);

        /***********************************************************************

                returns the length, in байты, of the actual результат - very
                different из_ дайопцсок()

        ***********************************************************************/

        цел дайОпцию (ППротокол уровень, ПОпцияСокета опция, проц[] результат);

        /***********************************************************************

        ***********************************************************************/

        Беркли* установиОпцию (ППротокол уровень, ПОпцияСокета опция, проц[] значение);

        /***********************************************************************

                getter

        ***********************************************************************/

        бул блокируется();

        /***********************************************************************

                setter

        ***********************************************************************/

        проц блокируется(бул да);

        /***********************************************************************

        ***********************************************************************/

        static проц исключение (ткст сооб);

        /***********************************************************************

        ***********************************************************************/

        protected static проц плохойАрг (ткст сооб);
}



/*******************************************************************************


*******************************************************************************/

public abstract class Адрес
{
        public struct адрессок
        {
                бкрат   семейство;
                сим[14] данные = 0;
        }

        struct ИнфОбАдре 
        { 
                цел       ai_flags; 
                цел       ai_family; 
                цел       ai_socktype; 
                цел       ai_protocol; 
                бцел      ai_Addrlen; 
                version (freebsd)
                        {
                        сим*     ai_canonname; 
                        адрессок* ai_Addr; 
                        }
                     else
                        {
                        адрессок* ai_Addr; 
                        сим*     ai_canonname; 
                        }
                ИнфОбАдре* ai_next; 
        } 

        abstract адрессок*      имя();
        abstract цел            длинаИмени();

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static бкрат с8хбк (бкрат x);

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static бцел с8хбц (бцел x);

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static ткст преобразуй2Д (сим* s);

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static сим* преобразуй2Си (ткст ввод, ткст вывод);

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static ткст изЦел (ткст врем, цел i);
        

        /***********************************************************************

                Internal usage

        ***********************************************************************/

        private static цел вЦел (ткст s);

        /***********************************************************************

                Dinrus: добавьed this common function

        ***********************************************************************/

        static проц исключение (ткст сооб);
				
        /***********************************************************************

                Адрес factory

        ***********************************************************************/

        static Адрес создай (адрессок* sa) ;
				
        /*********************************************************************** 
  
        ***********************************************************************/ 
         
        static Адрес разреши (ткст хост, ткст служба = пусто, 
                                ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                ПФлагиАИ флаги = cast(ПФлагиАИ)0) ;
         
        /*********************************************************************** 
  
        ***********************************************************************/ 
         
        static Адрес разреши (ткст хост, бкрат порт, 
                                ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                ПФлагиАИ флаги = cast(ПФлагиАИ)0) ;
         
        /*********************************************************************** 
  
        ***********************************************************************/ 
         
        static Адрес[] разрешиВсе (ткст хост, ткст служба = пусто, 
                                     ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                     ПФлагиАИ флаги = cast(ПФлагиАИ)0) ;
         
        /*********************************************************************** 
  
        ***********************************************************************/ 
         
        static Адрес[] разрешиВсе (сим хост[], бкрат порт, 
                                     ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                     ПФлагиАИ флаги = cast(ПФлагиАИ)0) ;
         
        /*********************************************************************** 
  
        ***********************************************************************/ 
         
        static Адрес пассивное (ткст служба, 
                                ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                ПФлагиАИ флаги = cast(ПФлагиАИ)0) ;
         
        /*********************************************************************** 
 
         ***********************************************************************/ 
         
        static Адрес пассивное (бкрат порт, ПСемействоАдресов af = ПСемействоАдресов.НЕУК, 
                                ПФлагиАИ флаги = cast(ПФлагиАИ)0);
         
        /*********************************************************************** 
  
        ***********************************************************************/ 
 
        ткст вТкстАдреса() ;
 
        /*********************************************************************** 
 
         ***********************************************************************/ 
 
        ткст вТкстПорта() ;
          
        /*********************************************************************** 
  
        ***********************************************************************/ 
 
        ткст вТкст() ;
                  
        /*********************************************************************** 
 
         ***********************************************************************/ 
 
        ПСемействоАдресов семействоАдресов() ;
}


/*******************************************************************************

*******************************************************************************/

public class НеизвестныйАдрес : Адрес
{
        адрессок sa;

        /***********************************************************************

        ***********************************************************************/

        адрессок* имя();

        /***********************************************************************

        ***********************************************************************/

        цел длинаИмени();

        /***********************************************************************

        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();

        /***********************************************************************

        ***********************************************************************/

        ткст вТкст();
}


/*******************************************************************************


*******************************************************************************/

public class АдресИПв4 : Адрес
{
        /***********************************************************************

        ***********************************************************************/

        enum 
        {
                АДР_ЛЮБОЙ = 0, 
                АДР_НЕУК = cast(бцел)-1, 
                ПОРТ_ЛЮБОЙ = 0
        }

        /***********************************************************************

        ***********************************************************************/

        struct сокадр_ин
        {
                version (freebsd)
                        {
                        ббайт sin_len;
                        ббайт семействоИС  = ПСемействоАдресов.ИНЕТ;
                        } 
                     else 
                        {
                        бкрат семействоИС = ПСемействоАдресов.ИНЕТ;
                        }
                бкрат портИС;
                бцел адрИС; //in_Addr
                сим[8] зероИС = 0;
        }

        static assert(сокадр_ин.sizeof is 16);

        private сокадр_ин син;

        /***********************************************************************

        ***********************************************************************/

        package this ();

        /***********************************************************************

        ***********************************************************************/

        this (бкрат порт);

        /***********************************************************************

        ***********************************************************************/

        this (бцел адр, бкрат порт);

        /***********************************************************************

                -порт- can be ПОРТ_ЛЮБОЙ
                -адр- is an ИП Адрес or хост имя

        ***********************************************************************/

        this (ткст адр, цел порт = ПОРТ_ЛЮБОЙ);

        /***********************************************************************

        ***********************************************************************/

        this (адрессок* адр) ;
				
        /***********************************************************************

        ***********************************************************************/
				
        адрессок* имя();

        /***********************************************************************

        ***********************************************************************/

        цел длинаИмени();

        /***********************************************************************

        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();

        /***********************************************************************

        ***********************************************************************/

        бкрат порт();

        /***********************************************************************

        ***********************************************************************/

        бцел адр();

        /***********************************************************************

        ***********************************************************************/

        ткст вТкстАдреса();

        /***********************************************************************

        ***********************************************************************/

        ткст вТкстПорта();

        /***********************************************************************

        ***********************************************************************/

        ткст вТкст();

        /***********************************************************************

                -адр- is an ИП Адрес in the форматируй "a.b.c.d"
                returns АДР_НЕУК on failure

        ***********************************************************************/

        static бцел разбор(ткст адр);
}

/*******************************************************************************

*******************************************************************************/

debug(UnitTest)
{
        unittest
        {
        АдресИПв4 ia = new АдресИПв4("63.105.9.61", 80);
        assert(ia.вТкст() == "63.105.9.61:80");
        }
}

/******************************************************************************* 
        
        ИПv6 is the следщ-generation Internet Protocol version
        designated as the successor куда ИПv4, the первый
        implementation использован in the Internet that is still in
        dominant use currently.
	        			
        More information: http://ИПv6.com/
				
        ИПv6 supports 128-bit Адрес пространство as opposed куда 32-bit
        Адрес пространство of ИПv4.
				
        ИПv6 is записано as 8 блокs of 4 octal цифры (16 bit)
        separated by a colon (":"). Zero блок can be replaced by "::".
	        			
        For example: 
        ---
        0000:0000:0000:0000:0000:0000:0000:0001
        is equal
        ::0001
        is equal
        ::1
        is analogue ИПv4 127.0.0.1
				
        0000:0000:0000:0000:0000:0000:0000:0000
        is equal
        ::
        is analogue ИПv4 0.0.0.0
				
        2001:cdba:0000:0000:0000:0000:3257:9652 
        is equal
        2001:cdba::3257:9652
				
        ИПv4 Адрес can be submitted through ИПv6 as ::ffff:xx.xx.xx.xx,
        where xx.xx.xx.xx 32-bit ИПv4 адресes.
				
        ::ffff:51b0:ec6d
        is equal
        ::ffff:81.176.236.109
        is analogue ИПv4 81.176.236.109
				
        The URL for the ИПv6 Адрес will be of the form:
        http://[2001:cdba:0000:0000:0000:0000:3257:9652]/
				
        If needed куда specify a порт, it will be listed after the
        closing square bracket followed by a colon.
				
        http://[2001:cdba:0000:0000:0000:0000:3257:9652]:8080/
        Адрес: "2001:cdba:0000:0000:0000:0000:3257:9652"
        порт: 8080
				
        АдресИПв6 can be использован as well as АдресИПв4.
				
        scope адр = new АдресИПв6(8080); 
        Адрес: "::"
        порт: 8080
				
        scope Addr_2 = new АдресИПв6("::1", 8081); 
        Адрес: "::1"
        порт: 8081
				
        scope Addr_3 = new АдресИПв6("::1"); 
        Адрес: "::1"
        порт: ПОРТ_ЛЮБОЙ
				
        Also in the АдресИПв6 constructor can specify the служба имя
        or порт as ткст
				
        scope Addr_3 = new АдресИПв6("::", "ssh"); 
        Адрес: "::"
        порт: 22 (ssh служба порт)
				
        scope Addr_4 = new АдресИПв6("::", "8080"); 
        Адрес: "::"
        порт: 8080
				
*******************************************************************************/ 
				
class АдресИПв6 : Адрес 
{ 
protected:
        /*********************************************************************** 
         
        ***********************************************************************/ 
 
        struct sockAddr_in6 
        { 
                бкрат sin_family; 
                бкрат портИС; 
                 
                бцел sin6_flowinfo; 
                ббайт[16] sin6_Addr; 
                бцел sin6_scope_опр; 
        } 
         
        sockAddr_in6 син; 
 
        /*********************************************************************** 
 
         ***********************************************************************/ 
 
        this () ;
 
        /***********************************************************************

        ***********************************************************************/

        this (адрессок* sa);
         
        /*********************************************************************** 
 
        ***********************************************************************/ 
 
        адрессок* имя();
 
        /*********************************************************************** 
 
        ***********************************************************************/ 
 
        цел длинаИмени() ;
 
 public: 

        /***********************************************************************

        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();

 
        const бкрат ПОРТ_ЛЮБОЙ = 0; 
  
        /*********************************************************************** 
 
         ***********************************************************************/ 
 
        бкрат порт() ;
 				
        /*********************************************************************** 
 
                Созд АдресИПв6 with zero Адрес

        ***********************************************************************/ 
 				
        this (цел порт) ;
				
        /*********************************************************************** 
 
                -порт- can be ПОРТ_ЛЮБОЙ 
                -адр- is an ИП Адрес or хост имя 
 
        ***********************************************************************/ 
				
        this (ткст адр, цел порт = ПОРТ_ЛЮБОЙ) ;
               
        /*********************************************************************** 
 
                -служба- can be a порт число or служба имя 
                -адр- is an ИП Адрес or хост имя 
 
        ***********************************************************************/ 
 
        this (ткст адр, ткст служба) ;
 
        /*********************************************************************** 
  
        ***********************************************************************/ 
 
        ббайт[] адр() ;
 
        /*********************************************************************** 
  
        ***********************************************************************/ 
 
        version (Posix)
        ткст вТкстАдреса();

        /***********************************************************************

        ***********************************************************************/

        ткст вТкстПорта();
 
        /***********************************************************************

        ***********************************************************************/

        ткст вТкст() ;
} 

/*******************************************************************************

*******************************************************************************/

debug(UnitTest)
{
        unittest
        {
        АдресИПв6 ia = new АдресИПв6("7628:0d18:11a3:09d7:1f34:8a2e:07a0:765d", 8080);
        //assert(ia.вТкст() == "[7628:d18:11a3:9d7:1f34:8a2e:7a0:765d]:8080");
        assert(ia.вТкст() == "[7628:0d18:11a3:09d7:1f34:8a2e:07a0:765d]:8080");
        }
}


/*******************************************************************************


*******************************************************************************/

public class НетХост
{
        ткст          имя;
        ткст[]        алиасы;
        бцел[]          АдрСписок;

        /***********************************************************************

        ***********************************************************************/

        struct хостзап
        {
                сим* имя;
                сим** алиасы;
                version (Win32)
                        {
                        крат типадр;
                        крат длина;
                        }
                     else 
                        {
                        цел типадр;
                        цел длина;
                        }
                сим** списадр;

                сим* адр();
        }

        /***********************************************************************

        ***********************************************************************/

        protected проц проверьХостзап(хостзап* he);

        /***********************************************************************

        ***********************************************************************/

        проц наполни (хостзап* he);

        /***********************************************************************

        ***********************************************************************/

        бул дайХостПоИмени(ткст имя);

        /***********************************************************************

        ***********************************************************************/

        бул дайХостПоАдресу(бцел адр);

        /***********************************************************************

        ***********************************************************************/

        //shortcut
        бул дайХостПоАдресу(ткст адр);
}


/*******************************************************************************

*******************************************************************************/

debug (UnitTest)
{
        extern (C) цел printf(сим*, ...);
        unittest
        {
        НетХост ih = new НетХост;
        ih.дайХостПоИмени(Беркли.имяХоста());
        assert(ih.АдрСписок.length > 0);
        АдресИПв4 ia = new АдресИПв4(ih.АдрСписок[0], АдресИПв4.ПОРТ_ЛЮБОЙ);
        printf("ИП адрес = %.*s\nname = %.*s\n", ia.вТкстАдреса(), ih.имя);
        foreach(цел i, ткст s; ih.алиасы)
        {
                printf("алиасы[%d] = %.*s\n", i, s);
        }

        printf("---\n");

        assert(ih.дайХостПоАдресу(ih.АдрСписок[0]));
        printf("имя = %.*s\n", ih.имя);
        foreach(цел i, ткст s; ih.алиасы)
        {
                printf("алиасы[%d] = %.*s\n", i, s);
        }
        }
}


/*******************************************************************************

        a установи of СОКЕТs for Беркли.выбери()

*******************************************************************************/

public class НаборСокетов
{

        private бцел  члоБайт; //Win32: excludes бцел.размер "счёт"
        private байт* буф;

        struct fd {}

        version(Windows)
        {
                бцел счёт();

                проц счёт(цел setter);


                т_сокет* первый();
        }
        else version (Posix)
        {
                import core.BitManip;

                бцел nfdbits;
                т_сокет _maxfd = 0;

                бцел fdelt(т_сокет s);


                бцел fdmask(т_сокет s);


                бцел* первый();

                public т_сокет максуд();
        }


        public:

        this (бцел max);
        

        this (НаборСокетов o) ;
		
        this();

        НаборСокетов dup() ;
        
        НаборСокетов сбрось();

        проц добавь(т_сокет s);
		
        проц добавь(Беркли* s);
		
        проц удали(т_сокет s);

        проц удали(Беркли* s);

        цел набор_ли(т_сокет s);

        цел набор_ли(Беркли* s);

        бцел max();

        fd* вНабор_УД();

        /***********************************************************************

                НаборСокетов's are updated куда include only those СОКЕТs which an
                событие occured.

                Returns the число of события, 0 on таймаут, or -1 on ошибка

                for a подключись()ing сокет, writeability means подключен
                for a слушай()ing сокет, readability means listening

                Winsock: possibly internally limited куда 64 СОКЕТs per установи

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш, значврем* tv);

        /***********************************************************************

                выбери with specified таймаут

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш, дол микросекунды);

        /***********************************************************************

                выбери with maximum таймаут

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш);
}


