module net.http.HttpConst;

/*******************************************************************************

        Константы

*******************************************************************************/

struct КонстППГТ
{
        const ткст Кс = "\r\n";
}

/*******************************************************************************

        Заголовки - отдельные типы на собственных правах. Потому что они
        оптимизированы тем, что за ними следует двоеточие ':'.

*******************************************************************************/

struct ИмяЗаголовкаППГТ
{
        final ткст значение;  
}

/*******************************************************************************

        Определение традиционного набора названий заголовков HTTP (по-русски ППГТ).
        
*******************************************************************************/

struct ЗаголовокППГТ
{   
        const цел РазмерБуфераВВ                 = 16 * 1024;
        const цел МаксРазмерПараметровПост             = 4 * 1024;

        const ИмяЗаголовкаППГТ Версия           = {"HTTP/1.1"};
        const ИмяЗаголовкаППГТ ТекстППГТ          = {"text/html"};

        const ИмяЗаголовкаППГТ Акцепт            = {"Accept:"};
        const ИмяЗаголовкаППГТ ПринятьГарнитуру     = {"Accept-Charset:"};
        const ИмяЗаголовкаППГТ ПринятьКодировку    = {"Accept-Encoding:"};
        const ИмяЗаголовкаППГТ ПринятьЯзык    = {"Accept-Language:"};
        const ИмяЗаголовкаППГТ ПринятьДиапазоны      = {"Accept-Ranges:"};
        const ИмяЗаголовкаППГТ Возраст               = {"Age:"};
        const ИмяЗаголовкаППГТ Разрешить             = {"Allow:"};
        const ИмяЗаголовкаППГТ Авторизация     = {"Authorization:"};
        const ИмяЗаголовкаППГТ КонтрольКэша      = {"Cache-Control:"};
        const ИмяЗаголовкаППГТ Подключение        = {"Connection:"};
        const ИмяЗаголовкаППГТ КодировкаКонтента   = {"Content-Encoding:"};
        const ИмяЗаголовкаППГТ ЯзыкКонтента   = {"Content-Language:"};
        const ИмяЗаголовкаППГТ ДлинаКонтента     = {"Content-Length:"};
        const ИмяЗаголовкаППГТ РасположениеКонтента   = {"Content-Location:"};
        const ИмяЗаголовкаППГТ ДиапазонКонтента      = {"Content-Range:"};
        const ИмяЗаголовкаППГТ ТипКонтента       = {"Content-Type:"};
        const ИмяЗаголовкаППГТ Куки            = {"Cookies:"};
        const ИмяЗаголовкаППГТ Дата              = {"Date:"};
        const ИмяЗаголовкаППГТ ИТэг              = {"ETag:"};
        const ИмяЗаголовкаППГТ Икспект            = {"Expect:"};
        const ИмяЗаголовкаППГТ ДействительноДо           = {"Expires:"};
        const ИмяЗаголовкаППГТ ОтКого              = {"From:"};
        const ИмяЗаголовкаППГТ Хост              = {"Host:"};
        const ИмяЗаголовкаППГТ Идентичность          = {"Identity:"};
        const ИмяЗаголовкаППГТ ЕслиСовпадает           = {"If-Match:"};
        const ИмяЗаголовкаППГТ ЕслиИзмененоС   = {"If-Modified-Since:"};
        const ИмяЗаголовкаППГТ ЕслиНетСовпадения       = {"If-None-Match:"};
        const ИмяЗаголовкаППГТ ЕслиДиапазон           = {"If-Range:"};
        const ИмяЗаголовкаППГТ ЕслиНеИзмененоС = {"If-Unmodified-Since:"};
        const ИмяЗаголовкаППГТ БудьНаСвязи         = {"Keep-Alive:"};
        const ИмяЗаголовкаППГТ ПоследнееИзменение      = {"Last-Modified:"};
        const ИмяЗаголовкаППГТ Местоположение          = {"Location:"};
        const ИмяЗаголовкаППГТ МаксФорвардз       = {"Max-Forwards:"};
        const ИмяЗаголовкаППГТ ВерсияМайм       = {"MIME-Version:"};
        const ИмяЗаголовкаППГТ Прагма            = {"Pragma:"};
        const ИмяЗаголовкаППГТ АутентифицируйПрокси = {"Proxy-Authenticate:"};
        const ИмяЗаголовкаППГТ ПроксиПодключение   = {"Proxy-Connection:"};
        const ИмяЗаголовкаППГТ Диапазон             = {"Range:"};
        const ИмяЗаголовкаППГТ Рефер          = {"Referer:"};
        const ИмяЗаголовкаППГТ ПопробуйПозже        = {"Retry-After:"};
        const ИмяЗаголовкаППГТ Сервер            = {"Server:"};
        const ИмяЗаголовкаППГТ ДвигСервлетов     = {"Servlet-Движок:"};
        const ИмяЗаголовкаППГТ УстановитьКуки         = {"Set-Cookie:"};
        const ИмяЗаголовкаППГТ УстановитьКуки2        = {"Set-Cookie2:"};
        const ИмяЗаголовкаППГТ ТиИ                = {"TE:"};
        const ИмяЗаголовкаППГТ Трейлер           = {"Trailer:"};
        const ИмяЗаголовкаППГТ КодировкаТрансфера  = {"Transfer-Encoding:"};
        const ИмяЗаголовкаППГТ Апгрейд           = {"Upgrade:"};
        const ИмяЗаголовкаППГТ ЮзерАгент         = {"User-Agent:"};
        const ИмяЗаголовкаППГТ Варьируй              = {"Vary:"};
        const ИмяЗаголовкаППГТ Предупреждение           = {"Warning:"};
        const ИмяЗаголовкаППГТ АутентифицируйВВВ   = {"WWW-Authenticate:"};
}


/*******************************************************************************

         Декларируется традиционный набор кодов ответов HTTP

*******************************************************************************/

enum КодОтветаППГТ
{       
        Продолжение                     = 100,
        ПереключениеПротоколов           = 101,
        ОК                           = 200,
        Создано                      = 201,
        Принято                     = 202,
        НеАвторитативнаяИнформация  = 203,
        НетКонтента                    = 204,
        СброситьКонтекст                 = 205,
        ЧастичныйКонтент               = 206,
        НесколькоВыборов              = 300,
        УдаленоНавсегда             = 301,
        Найдено                        = 302,
        СмотриИное                     = 303,
        НеИзменено                  = 304,
        ИспользоватьПрокси                     = 305,
        ВременноеПеренаправление            = 307,
        ПлохойЗапрос                   = 400,
        Неавторизовано                 = 401,
        ТребуетсяОплата              = 402,
        Запрещено                    = 403,
        НеНайдено                     = 404,
        МетодНедозволен             = 405,
        Неприемлемо                = 406,
        ТребуетсяАутентикацияПрокси  = 407,
        ТаймаутЗапроса               = 408,
        Конфликт                     = 409,
        Ушло                         = 410,
        ТребуетсяДлина               = 411,
        ПредусловиеНеудовлетворено           = 412,
        СлишкомБольшойЗапрос        = 413,
        СлишкомБольшойУИРЗапроса           = 414,
        НеподдерживаемыйТипМедиа         = 415,
        ЗапрошенныйДиапазонНеУдовлетворителен = 416,
        ОжиданиеНапрасно            = 417,
        ВнутренняяОшибкаСервера          = 500,
        НеРеализовано               = 501,
        ПлохойГейтуэй                   = 502,
        СлужбаНедоступна           = 503,
        ГейуэйТаймаут               = 504,
        ВерсияНеПоддерживается          = 505,
};

/*******************************************************************************

        Status is a compound тип, with a имя и a код.

*******************************************************************************/

struct СтатусППГТ
{
        final цел     код; 
        final ткст  имя;  
}

/*******************************************************************************

        Декларируется традиционный набор ответов HTTP

*******************************************************************************/

struct ОтветыППГТ
{       
        static СтатусППГТ Продолжение                     = {КодОтветаППГТ.Продолжение, "Continuation"};
        static СтатусППГТ ПереключениеПротоколов           = {КодОтветаППГТ.ПереключениеПротоколов, "SwitchingProtocols"};
        static СтатусППГТ ОК                           = {КодОтветаППГТ.ОК, "OK"};
        static СтатусППГТ Создано                      = {КодОтветаППГТ.Создано, "Created"};
        static СтатусППГТ Принято                     = {КодОтветаППГТ.Принято, "Accepted"};
        static СтатусППГТ НеАвторитативнаяИнформация  = {КодОтветаППГТ.НеАвторитативнаяИнформация, "NonAuthoritativeInformation"};
        static СтатусППГТ НетКонтента                    = {КодОтветаППГТ.НетКонтента, "NoContent"};
        static СтатусППГТ СброситьКонтекст                 = {КодОтветаППГТ.СброситьКонтекст, "ResetContent"};
        static СтатусППГТ ЧастичныйКонтент               = {КодОтветаППГТ.ЧастичныйКонтент, "PartialContent"};
        static СтатусППГТ НесколькоВыборов              = {КодОтветаППГТ.НесколькоВыборов, "MultipleChoices"};
        static СтатусППГТ УдаленоНавсегда             = {КодОтветаППГТ.УдаленоНавсегда, "MovedPermanently"};
        static СтатусППГТ Найдено                        = {КодОтветаППГТ.Найдено, "Found"};
        static СтатусППГТ ВременноеПеренаправление            = {КодОтветаППГТ.ВременноеПеренаправление, "TemporaryRedirect"};
        static СтатусППГТ СмотриИное                     = {КодОтветаППГТ.СмотриИное, "SeeOther"};
        static СтатусППГТ НеИзменено                  = {КодОтветаППГТ.НеИзменено, "NotModified"};
        static СтатусППГТ ИспользоватьПрокси                     = {КодОтветаППГТ.ИспользоватьПрокси, "UseProxy"};
        static СтатусППГТ ПлохойЗапрос                   = {КодОтветаППГТ.ПлохойЗапрос, "BadRequest"};
        static СтатусППГТ Неавторизовано                 = {КодОтветаППГТ.Неавторизовано, "Unauthorized"};
        static СтатусППГТ ТребуетсяОплата              = {КодОтветаППГТ.ТребуетсяОплата, "PaymentRequired"};
        static СтатусППГТ Запрещено                    = {КодОтветаППГТ.Запрещено, "Forbidden"};
        static СтатусППГТ НеНайдено                     = {КодОтветаППГТ.НеНайдено, "NotFound"};
        static СтатусППГТ МетодНедозволен             = {КодОтветаППГТ.МетодНедозволен, "MethodNotAllowed"};
        static СтатусППГТ Неприемлемо                = {КодОтветаППГТ.Неприемлемо, "NotAcceptable"};
        static СтатусППГТ ТребуетсяАутентикацияПрокси  = {КодОтветаППГТ.ТребуетсяАутентикацияПрокси, "ProxyAuthenticationRequired"};
        static СтатусППГТ ТаймаутЗапроса               = {КодОтветаППГТ.ТаймаутЗапроса, "RequestTimeout"};
        static СтатусППГТ Конфликт                     = {КодОтветаППГТ.Конфликт, "Conflict"};
        static СтатусППГТ Ушло                         = {КодОтветаППГТ.Ушло, "Gone"};
        static СтатусППГТ ТребуетсяДлина               = {КодОтветаППГТ.ТребуетсяДлина, "LengthRequired"};
        static СтатусППГТ ПредусловиеНеудовлетворено           = {КодОтветаППГТ.ПредусловиеНеудовлетворено, "PreconditionFailed"};
        static СтатусППГТ СлишкомБольшойЗапрос        = {КодОтветаППГТ.СлишкомБольшойЗапрос, "RequestEntityTooLarge"};
        static СтатусППГТ СлишкомБольшойУИРЗапроса           = {КодОтветаППГТ.СлишкомБольшойУИРЗапроса, "RequestURITooLarge"};
        static СтатусППГТ НеподдерживаемыйТипМедиа         = {КодОтветаППГТ.НеподдерживаемыйТипМедиа, "UnsupportedMediaType"};
        static СтатусППГТ ЗапрошенныйДиапазонНеУдовлетворителен = {КодОтветаППГТ.ЗапрошенныйДиапазонНеУдовлетворителен, "RequestedRangeNotSatisfiable"};
        static СтатусППГТ ОжиданиеНапрасно            = {КодОтветаППГТ.ОжиданиеНапрасно, "ExpectationFailed"};
        static СтатусППГТ ВнутренняяОшибкаСервера          = {КодОтветаППГТ.ВнутренняяОшибкаСервера, "InternalServerError"};
        static СтатусППГТ НеРеализовано               = {КодОтветаППГТ.НеРеализовано, "NotImplemented"};
        static СтатусППГТ ПлохойГейтуэй                   = {КодОтветаППГТ.ПлохойГейтуэй, "BadGateway"};
        static СтатусППГТ СлужбаНедоступна           = {КодОтветаППГТ.СлужбаНедоступна, "ServiceUnavailable"};
        static СтатусППГТ ГейуэйТаймаут               = {КодОтветаППГТ.ГейуэйТаймаут, "GatewayTimeout"};
        static СтатусППГТ ВерсияНеПоддерживается          = {КодОтветаППГТ.ВерсияНеПоддерживается, "VersionNotSupported"};
}
