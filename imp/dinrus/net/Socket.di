module net.Socket;

private import  time.Time, sys.Common, exception;

version=Dinrus;
version (Dinrus)
{
        private ткст вТкст (ткст врем, цел i)
        {
                цел j = врем.length;
                do {
                   врем[--j] = cast(сим)(i % 10 + '0');
                   } while (i /= 10);

                return врем [j .. $];
        }
}

version (linux)
         version = СОКЕТЫБСД;

version (darwin)
         version = СОКЕТЫБСД;

version (Posix)
         version = СОКЕТЫБСД;


/*******************************************************************************


*******************************************************************************/

version (Win32)
{
		public import sys.DConsts: МАСКА_ВВПАРАМ, ВВК_ВХО,ВВФСБВВ, ДЛИНА_ВСАОПИСАНИЯ, ДЛИНА_ВСАСИС_СТАТУСА, НЕВЕРНСОК, СОКОШИБ, ПОпцияСокета, ППротокол, ПЭкстрЗакрытиеСокета, ПФлагиСокета, ПТипСок;
		
        private const цел WSAEWOULDBLOCK =  10035;
        private const цел WSAEINTR =        10004;

public import sys.DStructs: ВИНСОКДАН, набор_уд, значврем, хостзап, адрессок, заминка, адрес_ин;



public import sys.DFuncs: закройсок, ВСАСтарт, ВСАЧистка, сокет, адр_инет, ввктлсок, свяжисок, подключи, слушай, закройсок, экстрзак, дайимяпира, дайимясок,  шли, шли_на, пусти, прими, прими_от, выбери, дайопцсок, установиопцсок, дайимяхоста, инетс8а, дайхостпоимени,  дайхостпоадресу, ВСАДайПоследнююОшибку, х8сбк, х8сбц, с8хбк, с8хбц;

alias экстрзак глуши;
alias закройсок закрой;
                

        static this();


        static ~this();

}

version (СОКЕТЫБСД)
 {
        private import cidrus;

        private typedef цел т_сокет = -1;

        private const цел F_GETFL       = 3;
        private const цел F_SETFL       = 4;
        version (darwin)
                 private const цел O_NONBLOCK = 0x0004;
		else version (solaris)
                 private const цел O_NONBLOCK = 0x80;
           else
                 private const цел O_NONBLOCK = 04000;  // OCTAL! Thx куда volcore

        extern  (C)
                {
                т_сокет сокет(цел af, цел тип, цел протокол);
                цел fcntl(т_сокет s, цел f, ...);
                бцел адр_инет(ткст0 cp);
                цел свяжисок(т_сокет s, адрессок* имя, цел namelen);
                цел подключи(т_сокет s, адрессок* имя, цел namelen);
                цел слушай(т_сокет s, цел backlog);
                т_сокет пусти(т_сокет s, адрессок* адр, цел* Addrlen);
                цел закройсок(т_сокет s);
                цел экстрзак(т_сокет s, цел как);
                цел дайимяпира(т_сокет s, адрессок* имя, цел* namelen);
                цел дайимясок(т_сокет s, адрессок* имя, цел* namelen);
                цел шли(т_сокет s, ук буф, цел длин, цел флаги);
                цел шли_на(т_сокет s, ук буф, цел длин, цел флаги, адрессок* куда, цел tolen);
                цел прими(т_сокет s, ук буф, цел длин, цел флаги);
                цел прими_от(т_сокет s, ук буф, цел длин, цел флаги, адрессок* из_, цел* fromlen);
                цел выбери(цел nfds, набор_уд* readfds, набор_уд* writefds, набор_уд* errorfds, значврем* таймаут);
                цел дайопцсок(т_сокет s, цел уровень, цел optname, ук optval, цел* optlen);
                цел установиопцсок(т_сокет s, цел уровень, цел optname, ук optval, цел optlen);
                цел дайимяхоста(ук namebuffer, цел buflen);
                ткст0 инетс8а(бцел ina);
                хостзап* дайхостпоимени(ткст0 имя);
                хостзап* дайхостпоадресу(ук адр, цел длин, цел тип);
                }
 }



/*******************************************************************************


*******************************************************************************/

private extern (C) цел strlen(сим*);

private static ткст вТкст(ткст0 s);

private static ткст преобразуй2Си (ткст ввод, ткст вывод);

public:

static цел последнОшиб ();


version(Win32)
{
        import sys.DConsts: ПСемействоАдресов;
}
else version(СОКЕТЫБСД)
{
        version (darwin)
        {
                enum ПСемействоАдресов: цел
                {
                        НЕУК =     0,
                        ЮНИКС =       1,
                        ИНЕТ =       2,
                        АЙПИЭКС =        23,
                        ЭПЛТОК =  16,
                        //INET6 =      10,
                }
        }
        else version (freebsd)
        {
                enum ПСемействоАдресов: цел
                {
                        НЕУК =     0,
                        ЮНИКС =       1,
                        ИНЕТ =       2,
                        АЙПИЭКС =        23,
                        ЭПЛТОК =  16,
                        //INET6 =      28,
                }
        }    
        else version (linux)
        {
                enum ПСемействоАдресов: цел
                {
                        НЕУК =     0,
                        ЮНИКС =       1,
                        ИНЕТ =       2,
                        АЙПИЭКС =        4,
                        ЭПЛТОК =  5,
                        //INET6 =      10,
                }
        } // конец version
		else version (solaris)
		{
            enum ПСемействоАдресов: цел
            {
                    НЕУК =     0,
                    ЮНИКС =       1,
                    ИНЕТ =       2,
                    АЙПИЭКС =        23,
                    ЭПЛТОК =  16,
                    INET6 =      26,
            }
		}
}



/*******************************************************************************

*******************************************************************************/

class Сокет
{
        т_сокет        сок;
        ПТипСок      тип;
        ПСемействоАдресов   семейство;
        ППротокол    протокол;

        version(Win32)
                private бул _блокируется = да;

        // For use with прими().
        package this();


        /**
         * Describe a сокет flavor. If a single протокол тип есть_ли куда support
         * this сокет тип внутри the адрес семейство, the ППротокол may be
         * omitted.
         */
        this(ПСемействоАдресов семейство, ПТипСок тип, ППротокол протокол, бул создай=да);


        /**
         * Создаёт или присваивает сокет
         */
        private проц инициализуй (т_сокет сок = сок.init);

        /***********************************************************************

                Возвращает соответствуюший указатель ОС на данный Провод

        ***********************************************************************/

        т_сокет фукз ();

        /***********************************************************************

                Созд a new исконный сокет экземпляр for this Сокет

        ***********************************************************************/

        проц переоткрой (т_сокет сок = сок.init);

        /***********************************************************************

                Is this сокет still alive? A закрыт сокет is consопрered куда
                be dead, but a глуши сокет is still alive.

        ***********************************************************************/

        бул жив_ли();


        /***********************************************************************


        ***********************************************************************/

        override ткст вТкст();


        /***********************************************************************

                getter

        ***********************************************************************/

        бул блокируется();


        /***********************************************************************

                setter

        ***********************************************************************/

        проц блокируется(бул бда);


        /***********************************************************************


        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();


        /***********************************************************************


        ***********************************************************************/

        Сокет вяжи(Адрес адр);


        /***********************************************************************


        ***********************************************************************/

        Сокет подключись(Адрес куда);


        /***********************************************************************

                need куда вяжи() первый

        ***********************************************************************/

        Сокет слушай(цел backlog);

        /**
         * Акцепт an incoming connection. If the сокет is блокируется, прими
         * waits for a connection request. Throws СокетПриёмИскл if unable
         * куда прими. See accepting for use with производный classes.
         */
        Сокет прими ();

        Сокет прими (Сокет мишень);

        /***********************************************************************

                The глуши function shuts down the connection of the сокет.
                Depending on the аргумент значение, it will:

                    -   stop receiving данные for this сокет. If further данные
                        arrives, it is rejected.

                    -   stop trying куда transmit данные из_ this сокет. Also
                        discards any данные waiting куда be sent. Стоп looking for
                        acknowledgement of данные already sent; don't retransmit
                        if any данные is lost.

        ***********************************************************************/

        Сокет глуши(ПЭкстрЗакрытиеСокета как);


        /***********************************************************************

                Dinrus: добавьed

        ***********************************************************************/

        Сокет установиПериодЗаминки (цел период);


        /***********************************************************************


                Dinrus: добавьed

        ***********************************************************************/

        Сокет установиПовторнИспАдреса (бул включен);


        /***********************************************************************


                Dinrus: добавьed

        ***********************************************************************/

        Сокет установиБезЗаминки (бул включен);


        /***********************************************************************

                Helper function куда укз the добавьing и dropping of группа
                membershИП.

                Dinrus: добавьed

        ***********************************************************************/

        проц включиВГруппу (АдресИПв4 адрес, бул onOff);


        /***********************************************************************

                calling глуши() before this is recommended for connection-
                oriented СОКЕТs

        ***********************************************************************/

        проц открепи ();

        /***********************************************************************


        ***********************************************************************/

        Адрес новОбъектСемейства ();


        /***********************************************************************

                Dinrus: добавьed this куда return the имя_хоста

        ***********************************************************************/

        static ткст имяХоста ();


        /***********************************************************************

                Dinrus: добавьed this куда return the default хост адрес (ИПv4)

        ***********************************************************************/

        static бцел адресХоста ();


        /***********************************************************************


        ***********************************************************************/

        Адрес удалённыйАдрес ();


        /***********************************************************************


        ***********************************************************************/

        Адрес локальныйАдрес ();

        /// Отправка or принять ошибка код.
        const цел ERROR = СОКОШИБ;


        /**
         * Отправка данные on the connection. Returns the число of байты actually
         * sent, or ERROR on failure. If the сокет is блокируется и there is no
         * буфер пространство left, шли waits.
         */
        //returns число of байты actually sent, or -1 on ошибка
        цел шли(проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);

        /**
         * Отправка данные куда a specific приёмник адрес. If the приёмник адрес is not specified, a connection must have been made и that адрес is использован. If the сокет is блокируется и there is no буфер пространство left, отправь_на waits.
         */
        цел отправь_на(проц[] буф, ПФлагиСокета флаги, Адрес куда);

        /// ditto
        цел отправь_на(проц[] буф, Адрес куда);


        //assumes you подключись()ed
        /// ditto
        цел отправь_на(проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);


        /**
         * принять данные on the connection. Returns the число of байты actually
         * Приёмd, 0 if the remote sопрe имеется закрыт the connection, or ERROR on
         * failure. If the сокет is блокируется, принять waits until there is данные
         * куда be Приёмd.
         */
        //returns число of байты actually Приёмd, 0 on connection closure, or -1 on ошибка
        цел принять(проц[] буф, ПФлагиСокета флаги=ПФлагиСокета.Неук);

        /**
         * принять данные и получи the remote endpoint адрес. Returns the число of байты actually Приёмd, 0 if the remote sопрe имеется закрыт the connection, or ERROR on failure. If the сокет is блокируется, принять_от waits until there is данные куда be Приёмd.
         */
        цел принять_от(проц[] буф, ПФлагиСокета флаги, Адрес из_);


        /// ditto
        цел принять_от(проц[] буф, Адрес из_);


        //assumes you подключись()ed
        /// ditto
        цел принять_от(проц[] буф, ПФлагиСокета флаги = ПФлагиСокета.Неук);


        /***********************************************************************

                returns the length, in байты, of the actual результат - very
                different из_ дайопцсок()

        ***********************************************************************/

        цел дайОпцию (ППротокол уровень, ПОпцияСокета опция, проц[] результат);


        /***********************************************************************


        ***********************************************************************/

        Сокет установиОпцию (ППротокол уровень, ПОпцияСокета опция, проц[] значение);


        /***********************************************************************

                Dinrus: добавьed this common function

        ***********************************************************************/

        protected static проц исключение (ткст сооб);


        /***********************************************************************

                Dinrus: добавьed this common function

        ***********************************************************************/

        protected static проц плохойАрг (ткст сооб);


        /***********************************************************************

                НаборСокетов's are updated куда include only those СОКЕТs which an
                событие occured.

                Returns the число of события, 0 on таймаут, or -1 on ошибка

                for a подключись()ing сокет, writeability means подключен
                for a слушай()ing сокет, readability means listening

                Winsock: possibly internally limited куда 64 СОКЕТs per установи

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш, значврем* tv);

        /***********************************************************************

                выбери with specified таймаут

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш, ИнтервалВремени время);

        /***********************************************************************

                выбери with maximum таймаут

        ***********************************************************************/

        static цел выбери (НаборСокетов проверьЧит, НаборСокетов проверьЗап, НаборСокетов проверьОш);

        /***********************************************************************

                Handy utility for converting ИнтервалВремени преобр_в значврем

        ***********************************************************************/

        static значврем вЗначВрем (ИнтервалВремени время);
}



/*******************************************************************************


*******************************************************************************/

abstract class Адрес
{
        protected адрессок* имя();
        protected цел длинаИмени();
        ПСемействоАдресов семействоАдресов();
        ткст вТкст();

        /***********************************************************************

                Dinrus: добавьed this common function

        ***********************************************************************/

        static проц исключение (ткст сооб);

}


/*******************************************************************************


*******************************************************************************/

class НеизвестныйАдрес: Адрес
{
        protected:
        адрессок sa;


        /***********************************************************************


        ***********************************************************************/

        адрессок* имя();


        /***********************************************************************


        ***********************************************************************/

        цел длинаИмени();


        public:
        /***********************************************************************


        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();


        /***********************************************************************


        ***********************************************************************/

        ткст вТкст();
}


/*******************************************************************************


*******************************************************************************/

class НетХост
{
        ткст имя;
        ткст[] алиасы;
        бцел[] АдрСписок;


        /***********************************************************************


        ***********************************************************************/

        protected проц проверьХостзап(хостзап* he);


        /***********************************************************************


        ***********************************************************************/

        проц наполни(хостзап* he);


        /***********************************************************************


        ***********************************************************************/

        бул дайХостПоИмени(ткст имя);


        /***********************************************************************


        ***********************************************************************/

        бул дайХостПоАдресу(бцел адр);


        /***********************************************************************


        ***********************************************************************/

        //shortcut
        бул дайХостПоАдресу(ткст адр);
}


debug (UnitText)
{
extern (C) цел printf(сим*, ...);
unittest
{
        try
        {
        НетХост ih = new НетХост;
        ih.дайХостПоИмени(Сокет.имяХоста());
        assert(ih.АдрСписок.length > 0);
        АдресИПв4 ia = new АдресИПв4(ih.АдрСписок[0], АдресИПв4.ПОРТ_ЛЮБОЙ);
        printf("ИП адрес = %.*s\nname = %.*s\n", ia.вТкстАдреса(), ih.имя);
        foreach(цел i, ткст s; ih.алиасы)
        {
                printf("алиасы[%d] = %.*s\n", i, s);
        }

        printf("---\n");

        assert(ih.дайХостПоАдресу(ih.АдрСписок[0]));
        printf("имя = %.*s\n", ih.имя);
        foreach(цел i, ткст s; ih.алиасы)
        {
                printf("алиасы[%d] = %.*s\n", i, s);
                }
        }
        catch( Объект o )
        {
            assert( нет );
        }
}
}


/*******************************************************************************


*******************************************************************************/

class АдресИПв4 : Адрес
{
        protected:
        сим[8] _port;

        /***********************************************************************


        ***********************************************************************/

        struct сокадр_ин
        {
                бкрат семействоИС = cast(бкрат) ПСемействоАдресов.ИНЕТ;
                бкрат портИС;
                бцел адрИС; //in_Addr
                сим[8] зероИС = 0;
        }

        сокадр_ин син;


        /***********************************************************************


        ***********************************************************************/

        адрессок* имя();


        /***********************************************************************


        ***********************************************************************/

        цел длинаИмени();


        public:

        /***********************************************************************


        ***********************************************************************/

        this();


        const бцел АДР_ЛЮБОЙ = 0;
        const бцел АДР_НЕУК = cast(бцел)-1;
        const бкрат ПОРТ_ЛЮБОЙ = 0;


        /***********************************************************************


        ***********************************************************************/

        ПСемействоАдресов семействоАдресов();


        /***********************************************************************


        ***********************************************************************/

        бкрат порт();


        /***********************************************************************


        ***********************************************************************/

        бцел адр();


        /***********************************************************************

                -порт- can be ПОРТ_ЛЮБОЙ
                -адр- is an ИП адрес or хост имя

        ***********************************************************************/

        this(ткст адр, цел порт = ПОРТ_ЛЮБОЙ);


        /***********************************************************************


        ***********************************************************************/

        this(бцел адр, бкрат порт);


        /***********************************************************************


        ***********************************************************************/

        this(бкрат порт);

        /***********************************************************************


        ***********************************************************************/

        synchronized ткст вТкстАдреса();


        /***********************************************************************


        ***********************************************************************/

        ткст вТкстПорта();


        /***********************************************************************


        ***********************************************************************/

        ткст вТкст();


        /***********************************************************************

                -адр- is an ИП адрес in the форматируй "a.b.c.d"
                returns АДР_НЕУК on failure

        ***********************************************************************/

        static бцел разбор(ткст адр);
}

debug(Unittest)
{
unittest
{
        АдресИПв4 ia = new АдресИПв4("63.105.9.61", 80);
        assert(ia.вТкст() == "63.105.9.61:80");
}
}

/*******************************************************************************


*******************************************************************************/

//a установи of СОКЕТs for Сокет.выбери()
class НаборСокетов
{
        private бцел  члоБайт; //Win32: excludes бцел.размер "счёт"
        private байт* буф;

        version(Win32)
        {
                бцел счёт();


                проц счёт(цел setter);


                т_сокет* первый();
        }
        else version (Posix)
        {
                import core.BitManip;


                бцел nfdbits;
                т_сокет _maxfd = 0;

                бцел fdelt(т_сокет s);


                бцел fdmask(т_сокет s);


                бцел* первый();

                public т_сокет максуд();
        }


        public:
        /***********************************************************************


        ***********************************************************************/

        this (бцел max);

        /***********************************************************************


        ***********************************************************************/

        this (НаборСокетов o) ;

        /***********************************************************************


        ***********************************************************************/

        this();

        /***********************************************************************


        ***********************************************************************/
        
        НаборСокетов dup() ;
        
        /***********************************************************************


        ***********************************************************************/

        проц сбрось();

        /***********************************************************************


        ***********************************************************************/

        проц добавь(т_сокет s);

        /***********************************************************************


        ***********************************************************************/

        проц добавь(Сокет s);

        /***********************************************************************


        ***********************************************************************/

        проц удали(т_сокет s);

        /***********************************************************************


        ***********************************************************************/

        проц удали(Сокет s);

        /***********************************************************************


        ***********************************************************************/

        цел набор_ли(т_сокет s);

        /***********************************************************************


        ***********************************************************************/

        цел набор_ли(Сокет s);

        /***********************************************************************

                max СОКЕТs that can be добавьed, like FD_SETSIZE

        ***********************************************************************/

        бцел макс();

        /***********************************************************************


        ***********************************************************************/

        набор_уд* вНабор_УД();
}


