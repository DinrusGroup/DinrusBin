
module geom.LoopSchemeMask;

import tpl.singleton;


/** implements cache for the weights of the original Loop scheme 
    supports:
    $(UL 
      $(LI vertex projection rule on the next level)
      $(LI vertex projection rule on the limit surface)
      $(LI vertex projection rule on the k-th (level) step (Barthe, Kobbelt'2003))
      $(LI vertex tangents on the limit surface)
    )
*/
class МаскаСхемыЦикла(T_, бцел разм_кэша_ = 100)
{
public:
    enum { разм_кэша = разм_кэша_ };
    alias T_                               Скаляр;

protected:

    Скаляр[разм_кэша]                       веса_проекц_;
    Скаляр[разм_кэша]                       веса_пределов_;
    Скаляр[разм_кэша]                       веса_шага_;
    Скаляр[][разм_кэша]                     веса_танг0_;
    Скаляр[][разм_кэша]                     веса_танг1_;

protected:

    static Скаляр                      вычисли_вес_проекц(бцел _валентность);
    static Скаляр                      вычисли_вес_предела(бцел _валентность);
    static Скаляр                      вычисли_вес_шага(бцел _валентность);
    static Скаляр                      вычисли_вес_танг0(бцел _валентность, бцел _ид_вер);
    static Скаляр                      вычисли_вес_танг1(бцел _валентность, бцел _ид_вер);

    проц                                      кэшируй_веса();

public:

    this();

    Скаляр                             вес_проекц(бцел _валентность) ;
    Скаляр                             вес_предела(бцел _валентность) ;
    Скаляр                             вес_шага(бцел _валентность, бцел _шаг) ;
    Скаляр                             вес_танг0(бцел _валентность, бцел _ид_вер) ;
    Скаляр                             вес_танг1(бцел _валентность, бцел _ид_вер) ;
    проц                                      дамп(бцел _макс_валентность = разм_кэша - 1) ;
}

alias МаскаСхемыЦикла!(дво, 100)        МаскаСхемыЦиклаДво;
alias Синглтон!(МаскаСхемыЦиклаДво)    МаскаСхемыЦиклаСинглтон;

unittest {

}


