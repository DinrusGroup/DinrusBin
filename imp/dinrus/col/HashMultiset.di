/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.HashMultiset;

public import col.model.Multiset;
public import col.Functions;
private import col.Hash;

/+ ИНТЕРФЕЙС:

class ХэшМультинабор(З, alias ШаблРеализац=ХэшДуб, alias хэшФункц=ДефХэш) : Мультинабор!(З)
{

    alias ШаблРеализац!(З, хэшФункц) Реализ;

    struct курсор
    {
        З значение();
        курсор opPostInc();
        курсор opPostDec();
        курсор opAddAssign(цел прир);
        курсор opSubAssign(цел прир);
        бул opEquals(курсор обх);
    }

    цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг);
    цел opApply(цел delegate(ref З з) дг);
    this();
    private this(ref Реализ дубИз);
    ХэшМультинабор очисти();
    бцел длина();
	alias длина length;
    курсор начало();
    курсор конец();
    курсор удали(курсор обх);
    курсор найди(З з);
    курсор найди(курсор обх, З з);
    бул содержит(З з);
    ХэшМультинабор удали(З з);
    ХэшМультинабор удали(З з, ref бул был_Удалён);
    ХэшМультинабор добавь(З з);
    ХэшМультинабор добавь(З з, ref бул был_добавлен);
    ХэшМультинабор добавь(Обходчик!(З) обх);
    ХэшМультинабор добавь(Обходчик!(З) обх, ref бцел чло_добавленных);
    ХэшМультинабор добавь(З[] массив);
    ХэшМультинабор добавь(З[] массив, ref бцел чло_добавленных);
    бцел счёт(З з);
    ХэшМультинабор удалиВсе(З з);
    ХэшМультинабор удалиВсе(З з, ref бцел чло_Удалённых);
    ХэшМультинабор dup();
    З дай();
    З изыми();
}

+/

/**
 * Реализация мультинабора, использующая Хэш для ближней вставки O(1),
 * при удалении и поиске.
 *
 * Добавление элемента может повредить курсоры, зависимые от реализации.
 *
 *Удаление элемента повреждает только курсоры, которые указывали на этот
 * элемент.
 *
 * (члены-нефункции могут быть свойствами, если не задано иное):
 *
 *
 * Можно заменить реализацию Хэша адаптированной реализацией,
 * Хэш должен быть шаблоном структуры, который инстанциируется единственным аргументом
 * шаблона З, и должен реализовывать следующие члены (члены-нефункции
 * могут получать/устанавливать свойства, если не указано иное):
 *
 *
 * параметры -> должны быть структорой как минимум со следущими членами
 *   хэшФункц -> используемая хэш-функция (должна быть какой-л. ХэшФунк!(З))
 * 
 * проц установка(параметры p) -> инициализирует хэш с указанными параметрами.
 *
 * бцел счёт -> счёт элементов в хэше
 *
 * позиция -> должна быть структурой/классом со следующими членами:
 *   укз -> должно определять следующий член:
 *     значение -> значение, на которое указывает данная позиция (не может являться
 *  каким-либо свойством)
 *   позиция следщ -> следующая позиция в хэш-карте
 *   позиция предш -> предшествующая позиция в хэш-карте
 *
 * бул добавь(З з) -> добавить данное значение в хэш.  * Хэш этого значения
 * будет задан хэшФункц(з).  Если значение уже есть в хэше,
 *это вызовет обновлФункц(з) и не должно увеличивать счётчик.
 *
 * позиция начало -> должна быть позицией, которая указывает на самый первый целостный
 * элемент в хэше, или на конце, если нет никаких элементов.
 *
 * позиция конец -> должна быть позицией, которая указывает сразу после самого последнего
 *валидного элемента.
 *
 * позиция найди(З з) ->возвращает позицию, которая указывает на элемент, который
 * содержит з, или на конец , если его не существует.
 *
 * позиция удали(позиция p) -> удаляет данный элемент из хэша,
 *возвращает следующий валидный элемент или конец, если p был последним в хэше.
 *
 * проц очисти() -> удаляет все элементы из хэша, устанавливает счётчик на 0.
 *
 * бцел удалиВсе(З з) -> удаляет все экземпляры данного значения, возвращая
 * их удалённое количество.
 *
 * бцел считайВсе(З з) -> возвращает число экземпляров данного значения в
 *хэше.
 *
 * проц копируйВ(ref Хэш h) -> создаёт копию-дубликат этого хэша в
 * целевом хэше h.
 */
class ХэшМультинабор(З, alias ШаблРеализац=ХэшДуб, alias хэшФункц=ДефХэш) : Мультинабор!(З)
{
    /**
     * алиас инстанциации шаблона.
     */
    alias ШаблРеализац!(З, хэшФункц) Реализ;

    private Реализ _хэш;

    /**
     *Курсор для хэш-мультинабора.
     */
    struct курсор
    {
        private Реализ.позиция позиция;

        /**
         * даёт значение в данной позиции
         */
        З значение()
        {
            return позиция.ptr.значение;
        }

        /**
         * Увеличивает этот курсор, возвращая то значение, которое было до
         * этого.
         */
        курсор opPostInc()
        {
            курсор врм = *this;
            позиция = позиция.следщ;
            return врм;
        }

        /**
         * Уменьшает этот курсор, возращая значение, которое было до
         * декрементации.
         */
        курсор opPostDec()
        {
            курсор врм = *this;
            позиция = позиция.предш;
            return врм;
        }

        /**
         * Увеличивает курсор на указанное количество.
         *
         * Это операция O(прир)!  * Следует лишь использовать этот оператор в 
         * такой форме:
         *
         * ++i;
         */
        курсор opAddAssign(цел прир)
        {
            if(прир < 0)
                return opSubAssign(-прир);
            while(прир--)
                позиция = позиция.следщ;
            return *this;
        }

        /**
         * Уменьшает курсор на заданное значение.
         *
         * Это операция O(прир)!  * Следует лишь использовать этот оператор в 
         * такой форме:
         *
         * --i;
         */
        курсор opSubAssign(цел прир)
        {
            if(прир < 0)
                return opAddAssign(-прир);
            while(прир--)
                позиция = позиция.предш;
            return *this;
        }

        /**
         * Сравнивает два курсора на равенство
         */
        бул opEquals(курсор обх)
        {
            return обх.позиция == позиция;
        }
    }

    /**
     *итерирует по всем элементам мультинабора, включае те,
     * которые следует удалить
     *
     *
     * Используйте таким образом:
     * ----------
     * // удалить все нечётные элементы
     * foreach(ref чистить_ли, з; &hashMultiset.очистить)
     * {
     *   чистить_ли = ((з & 1) == 1);
     * }
     */
    цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг)
    {
        return _примени(дг);
    }

    private цел _примени(цел delegate(ref бул чистить_ли, ref З з) дг)
    {
        курсор обх = начало;
        бул чистить_ли;
        цел возврдг = 0;
        курсор _конец = конец; //  ***
        while(!возврдг && обх != _конец)
        {
            //
            // не позволяет пользователю изменить значение
            //
            З врмзначение = обх.значение;
            чистить_ли = нет;
            if((возврдг = дг(чистить_ли, врмзначение)) != 0)
                break;
            if(чистить_ли)
                удали(обх++);
            else
                обх++;
        }
        return возврдг;
    }

    /**
     * Итерирует по значениям коллекции
     */
    цел opApply(цел delegate(ref З з) дг)
    {
        цел _дг(ref бул чистить_ли, ref З з)
        {
            return дг(з);
        }
        return _примени(&_дг);
    }

    /**
     * создаёт экземпляр хэш-карты, используя параметры реализации по умолчанию.
     */
    this()
    {
        _хэш.установка();
    }

    private this(ref Реализ дубИз)
    {
        дубИз.копируйВ(_хэш);
    }

    /**
     *Очистить все элементы коллекции
     */
    ХэшМультинабор очисти()
    {
        _хэш.очисти();
        return this;
    }

    /**
     * Возвращает число элементов в коллекции
     */
    бцел длина()
    {
        return _хэш.счёт;
    }
	alias длина length;
    /**
     * Возвращает курсор на первый элемент в коллекции.
     */
    курсор начало()
    {
        курсор обх;
        обх.позиция = _хэш.начало();
        return обх;
    }

    /**
     * Возвращает курсор, который указывает сразу после последнего элемента
     * коллекции.
     */
    курсор конец()
    {
        курсор обх;
        обх.позиция = _хэш.конец();
        return обх;
    }

    /**
     * Удаляет элемент, на который указывает данный курсор, возвращая
     * курсор, указывающий на следующий элемент в коллекции.
     *
     *Выполняется в среднем за O(1) раз.
     */
    курсор удали(курсор обх)
    {
        обх.позиция = _хэш.удали(обх.позиция);
        return обх;
    }

    /**
     * Найти первый экземпляр значения в коллекции.  * Возвращает конец, если
     * значение отсутствует.
     *
     * Выполняется в среднем O(1) раз.
     */
    курсор найди(З з)
    {
        курсор обх;
        обх.позиция = _хэш.найди(з);
        return обх;
    }

    /**
     * Найти следщ курсор, указывающий на З значение.
     *
     * Возвращает конец, если больше не осталось экземпляров з в коллекции.
     */
    курсор найди(курсор обх, З з)
    {
        обх.позиция = _хэш.найди(з, обх.позиция);
        return обх;
    }

    /**
     *Возвращает да, если данное значение есть в коллекции.
     *
     * Выполняется в среднем O(1) раз.
     */
    бул содержит(З з)
    {
        return найди(з) != конец;
    }

    /**
     *Удаляет первый элемент, у которого значение з.  Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за O(n) раз.
     */
    ХэшМультинабор удали(З з)
    {
        бул пропущен;
        return удали(з, пропущен);
    }

    /**
     *Удаляет первый элемент, у которого значение з.  Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за O(n) раз.
     */
    ХэшМультинабор удали(З з, ref бул был_Удалён)
    {
        курсор обх = найди(з);
        if(обх == конец)
        {
            был_Удалён = нет;
        }
        else
        {
            был_Удалён = да;
            удали(обх);
        }
        return this;
    }

    /**
     *Добавляет элемент в набор.  * Возвращает да, если элемент ещё не
     * присутствовал.
     *
     *Выполняется в среднем за O(1) раз.
     */
    ХэшМультинабор добавь(З з)
    {
        _хэш.добавь(з);
        return this;
    }

    /**
     *Добавляет элемент в набор.  * Возвращает да, если элемент ещё не
     * присутствовал.
     *
     *Выполняется в среднем за O(1) раз.
     */
    ХэшМультинабор добавь(З з, ref бул был_добавлен)
    {
        был_добавлен = _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет все элементы из обх в набор.  Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за O(1) + O(m) раз, где m - число элементов
     * в итераторе.
     */
    ХэшМультинабор добавь(Обходчик!(З) обх)
    {
        foreach(з; обх)
            _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет все элементы из обх в набор.  Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за O(1) + O(m) раз, где m - число элементов
     * в итераторе.
     */
    ХэшМультинабор добавь(Обходчик!(З) обх, ref бцел чло_добавленных)
    {
        бцел исхдлина = длина;
        добавь(обх);
        чло_добавленных = длина - исхдлина;
        return this;
    }

    /**
     * Добавляет все элементы из массива в набор.  * Возвращает число
     *добавленных элементов.
     *
     *Выполняется в среднем за O(1) * O(m) время, где m - длина массива.
     */
    ХэшМультинабор добавь(З[] массив)
    {
        бцел пропущен;
        return добавь(массив, пропущен);
    }

    /**
     * Добавляет все элементы из массива в набор.  * Возвращает число
     *добавленных элементов.
     *
     *Выполняется в среднем за O(1) * O(m) время, где m - длина массива.
     */
    ХэшМультинабор добавь(З[] массив, ref бцел чло_добавленных)
    {
        бцел исхдлина = длина;
        foreach(з; массив)
            _хэш.добавь(з);
        чло_добавленных = длина - исхдлина;
        return this;
    }

    /**
     * Возвращает число элементов в коллекции, равное з.
     *
     *Выполняется в среднем за O(m * 1) раз, где m - число элементов,
     * равное з.
     */
    бцел счёт(З з)
    {
        return _хэш.считайВсе(з);
    }

    /**
     * Удаляет все элементы, равные з.
     *
     *Выполняется в среднем за O(m * 1) раз, где m - число элементов,
     * равное з.
     */
    ХэшМультинабор удалиВсе(З з)
    {
        _хэш.удалиВсе(з);
        return this;
    }

    /**
     * Удаляет все элементы, равные з.
     *
     *Выполняется в среднем за O(m * 1) раз, где m - число элементов,
     * равное з.
     */
    ХэшМультинабор удалиВсе(З з, ref бцел чло_Удалённых)
    {
        чло_Удалённых = _хэш.удалиВсе(з);
        return this;
    }

    /**
     * делает неполную (shallow) копию этого хэш-мультинабора.
     */
    ХэшМультинабор dup()
    {
        return new ХэшМультинабор(_хэш);
    }

    /**
     * Даёт наиболее подходящий элемент из набора.  * Это элемент, который
     *должен итерироваться первым.  Следовательно, вызов удали(дай())
     * гарантировано меньше, чем операция O(n).
     */
    З дай()
    {
        return начало.значение;
    }

    /**
     *Удалить наиболее подходящий элемент из набора, и вернуть его значение.
     * Это равносильно удали(дай()), только лишь один поиск
     * выполняется.
     */
    З изыми()
    {
        auto c = начало;
        auto возврзнач = c.значение;
        удали(c);
        return возврзнач;
    }
}

version(UnitTest)
{
    unittest
    {
        auto hms = new ХэшМультинабор!(бцел);
        Мультинабор!(бцел) ms = hms;
        hms.добавь([0U, 1, 2, 3, 4, 5, 5]);
        assert(hms.length == 7);
        assert(ms.счёт(5U) == 2);
        foreach(ref чистить_ли, i; &ms.очистить)
        {
            чистить_ли = (i % 2 == 1);
        }
        assert(ms.счёт(5U) == 0);
        assert(ms.length == 3);
    }
}
