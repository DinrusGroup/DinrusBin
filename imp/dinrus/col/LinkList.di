/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.LinkList;

public import col.model.List;
private import col.Link;
private import col.Functions;

/+ ИНТЕРФЕЙС:

class СвязкаСписок(З, alias ШаблРеализац = ГоловаСвязки) : Список!(З)
{

    alias ГоловаСвязки!(З) Реализ;
    alias СвязкаСписок!(З, ШаблРеализац) ТипСвязкаСписок;

    struct курсор
    {

        З значение();
        З значение(З з);
        курсор opPostInc();
        курсор opPostDec();
        курсор opAddAssign(цел прир);
        курсор opSubAssign(цел прир);
        бул opEquals(курсор обх);
    }


    this();
    private this(ref Реализ дубИз, бул копироватьУзлы);
    ТипСвязкаСписок очисти();
    бцел длина();
	alias длина length;
    курсор начало();
    курсор конец();
    курсор удали(курсор обх);
    курсор удали(курсор первый, курсор последн);
    ТипСвязкаСписок удали(З з);
    ТипСвязкаСписок удали(З з, ref бул был_Удалён);
    курсор найди(курсор обх, З з);
    курсор найди(З з);
    бул содержит(З з);
    цел opApply(цел delegate(ref З значение) дг);
    final цел очистить(цел delegate(ref бул удалить_ли, ref З значение) дг);
    ТипСвязкаСписок добавь(З з);
    ТипСвязкаСписок добавь(З з, ref бул был_добавлен);
    ТипСвязкаСписок добавь(Обходчик!(З) колл);
    ТипСвязкаСписок добавь(Обходчик!(З) колл, ref бцел чло_добавленных);
    ТипСвязкаСписок добавь(З[] массив);
    ТипСвязкаСписок добавь(З[] массив, ref бцел чло_добавленных);
    бцел счёт(З з);
    ТипСвязкаСписок удалиВсе(З з);
    ТипСвязкаСписок удалиВсе(З з, ref бцел чло_Удалённых);
    курсор вставь(курсор обх, З з);
    курсор приставь(З з);
    курсор поставь(З з);
    З тыл();
    З фронт();
    З возьмиФронт();
    З возьмиТыл();
    ТипСвязкаСписок opCat(Список!(З) rhs);
    ТипСвязкаСписок opCat(З[] массив);
    ТипСвязкаСписок opCat_r(З[] массив);
    ТипСвязкаСписок opCatAssign(Список!(З) rhs);
    ТипСвязкаСписок opCatAssign(З[] массив);
    ТипСвязкаСписок dup();
    цел opEquals(Объект o);
    СвязкаСписок сортируй(цел delegate(ref З, ref З) comp);
    СвязкаСписок сортируй(цел function(ref З, ref З) comp);
    СвязкаСписок сортируй();
    СвязкаСписок сортируйИкс(Сравниватель)(Сравниватель comp);
}

+/

/**
 * Этот класс реализует интерфейс списка, использующего узлы Связка.  Это даётs
 *преимущество O(1) добавления и удаления, но не даёт случайного доступа.
 *
 * Добавление элементов не влияет ни на какой курсор.
 *
 * Удаление элементов не влияет ни на какой курсор, если он не указывает
 * на удалённый элемент, в случае чего обх повреждается.
 *
 * Реализация может быть swapped out для другой реализации
 * дваджы линкованного списка.  Эта реалзация должна быть структурой, использующей один
 * шаблонный аргумент З со следующими членами (если не указано иного, то члены
 * могут реализовываться как свойства):
 *
 * параметры -> тип данных, передаваемый набору в помощь при установке Узел.
 * Для этого типа нет особых требований.
 *
 * Узел -> тип данных, представляющий Узел в списке.  Желательно, чтобы был
 * ссылочного типа.  Каждый Узел должен определять следующие члены:
 *   З значение -> значение, хранимое в этом Узел.  Не может быть свойством.
 *   Узел предш -> (только получение)  предыдущий Узел в списке
 *   Узел следщ -> (только получение (get)) следщ Узел в списке
 *
 * Узел конец -> (только получение (get)) Инвалидный Узел, который указывает сразу за последн валидный
 * Узел.  конец.предш должно быть последн валидным Узел.  конец.следщ не определён.
 *
 * Узел начало -> (только получение (get)) Первый валидный Узел.  начало.предш не определено.
 *
 * бцел счёт -> (только получение (get))  Число узлов в списке.  Может быть
 * вычислено за O(n) раз, ради эффективного удаления нескольких
 * узлов.
 *
 * проц установка(параметры p) -> установить список.  Подобно конструктору.
 *
 * Узел удали(Узел n) -> удаляет данный Узел из списка.  Возвращает
 * следщ Узел в списке.
 *
 * Узел удали(Узел первый, Узел последн) -> удаляет узлы отпервый до последн,
 * не включая последн.  Возвращает последн.  Может выполняться за O(n) раз, если счёт
 * O(1), или O(1) раз, если счёт is O(n).
 *
 * Узел вставь(Узел перед, З з) -> добавить новый Узел перед  Узел 'перед',
 * возвращает указатель на новый Узел.
 *
 * проц очисти() -> удалить все узлы из списка.
 * 
 * проц сортируй(ФункцСравнения!(З) comp) -> сортировать список, согласно
 * функции сравнения
 *
 */
class СвязкаСписок(З, alias ШаблРеализац = ГоловаСвязки) : Список!(З)
{
    /**
     * алиас для удобства
     */
    alias ГоловаСвязки!(З) Реализ;

    /**
     * алиас для удобства
     */
    alias СвязкаСписок!(З, ШаблРеализац) ТипСвязкаСписок;

    private Реализ _связка;

    /**
     * Курсор для линк-списка
     */
    struct курсор
    {
        private Реализ.Узел укз; alias укз ptr;

        /**
         * Выдаст значение, на которое указывает this курсор
         */
        З значение()
        {
            return укз.значение;
        }

        /**
         * Установит значение, на которое указывает this курсор
         */
        З значение(З з)
        {
            return (укз.значение = з);
        }

        /**
         * Увеличивает этот курсор, возвращая то значение, которое было до
         * этого.
         */
        курсор opPostInc()
        {
            курсор врм = *this;
            укз = укз.следщ;
            return врм;
        }

        /**
         * Уменьшает этот курсор, возращая значение, которое было до
         * декрементации.
         */
        курсор opPostDec()
        {
            курсор врм = *this;
            укз = укз.предш;
            return врм;
        }

        /**
         * Увеличивает курсор на указанное количество.
         *
         * Это операция O(прир)!  * Следует лишь использовать этот оператор в 
         * такой форме:
         *
         * ++i;
         */
        курсор opAddAssign(цел прир)
        {
            if(прир < 0)
                return opSubAssign(-прир);
            while(прир--)
                укз = укз.следщ;
            return *this;
        }

        /**
         * Уменьшает курсор на заданное значение.
         *
         * Это операция O(прир)!  * Следует лишь использовать этот оператор в 
         * такой форме:
         *
         * --i;
         */
        курсор opSubAssign(цел прир)
        {
            if(прир < 0)
                return opAddAssign(-прир);
            while(прир--)
                укз = укз.предш;
            return *this;
        }

        /**
         * Сравнивает два курсора на равенство
         */
        бул opEquals(курсор обх)
        {
            return укз is обх.ptr;
        }
    }

    /**
     * Constructor
     */
    this()
    {
        _связка.установка();
    }

    //
    // Приватный конструктор для dup
    //
    private this(ref Реализ дубИз, бул копироватьУзлы)
    {
      дубИз.копируйВ(_связка, копироватьУзлы);
    }

    /**
     *Очистить все элементы коллекции
     */
    ТипСвязкаСписок очисти()
    {
        _связка.очисти();
        return this;
    }

    /**
     * Возвращает число элементов в коллекции
     */
    бцел длина()
    {
        return _связка.счёт;
    }
	alias длина length;

    /**
     * Возвращает курсор на первый элемент в коллекции.
     */
    курсор начало()
    {
        курсор обх;
        обх.ptr = _связка.начало;
        return обх;
    }

    /**
     * Возвращает курсор, который указывает сразу после последнего элемента
     * коллекции.
     */
    курсор конец()
    {
        курсор обх;
        обх.ptr = _связка.конец;
        return обх;
    }

    /**
     * Удаляет элемент, на который указывает данный курсор, возвращая
     * курсор, указывающий на следующий элемент в коллекции.
     *
     * Выполняется за O(1) раз.
     */
    курсор удали(курсор обх)
    {
        обх.ptr = _связка.удали(обх.ptr);
        return обх;
    }

    /**
     * Удалить элементы, на которые указывает диапазон данного курсора, возвращая
     *  курсор, указывающий на элемент, на который указывал последн.
     *
     * Выполняется за O(последн-первый) раз.
     */
    курсор удали(курсор первый, курсор последн)
    {
        последн.ptr = _связка.удали(первый.ptr, последн.ptr);
        return последн;
    }

    /**
     *Удаляет первый элемент, у которого значение з.  Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за O(n) раз.
     */
    ТипСвязкаСписок удали(З з)
    {
        бул пропущен;
        return удали(з, пропущен);
    }

    /**
     *Удаляет первый элемент, у которого значение з.  Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за O(n) раз.
     */
    ТипСвязкаСписок удали(З з, ref бул был_Удалён)
    {
        auto обх = найди(з);
        if(обх == конец)
        {
            был_Удалён = нет;
        }
        else
        {
            был_Удалён = да;
            удали(обх);
        }
        return this;
    }

    /**
     * Найти указанное значение в коллекции, начиная с данного курсора.
     * Это полезно для итерации по всем элементам с одинаковыми значениями.
     *
     * Выполняется за O(n) раз.
     */
    курсор найди(курсор обх, З з)
    {
        return _найди(обх, конец, з);
    }

    /**
     * Найти экземпляр  значения  в коллекции.  Эквивалентно
     * найди(начало, з);
     *
     * Выполняется за O(n) раз.
     */
    курсор найди(З з)
    {
        return _найди(начало, конец, з);
    }

    private курсор _найди(курсор обх, курсор последн, З з)
    {
        while(обх != последн && обх.значение != з)
            обх++;
        return обх;
    }

    /**
     *Возвращает да, если данное значение есть в коллекции.
     *
     * Выполняется за O(n) раз.
     */
    бул содержит(З з)
    {
        return найди(з) != конец;
    }

    private цел _примени(цел delegate(ref бул, ref З) дг, курсор старт, курсор последн)
    {
        курсор i = старт;
        цел возврдг = 0;
        бул удалить_ли;

        while(i != последн && i.ptr !is _связка.конец)
        {
            удалить_ли = нет;
            if((возврдг = дг(удалить_ли, i.ptr.значение)) != 0)
                break;
            if(удалить_ли)
                удали(i++);
            else
                i++;
        }
        return возврдг;
    }

    private цел _примени(цел delegate(ref З значение) дг, курсор первый, курсор последн)
    {
        цел возврзнач = 0;
        for(курсор i = первый; i != последн; i++)
            if((возврзнач = дг(i.ptr.значение)) != 0)
                break;
        return возврзнач;
    }

    /**
     * Итерирует по значениям коллекции
     */
    цел opApply(цел delegate(ref З значение) дг)
    {
        return _примени(дг, начало, конец);
    }

    /**
     * Итерирует по значениям коллекции, определяя те, которые следует
     * удалить
     *
     * Используйте таким образом:
     *
     * -----------
     * // удалить все нечётные значения
     * foreach(ref чистить_ли, з; &list.очистить)
     * {
     *   чистить_ли = ((з & 1) == 1);
     * }
     * -----------
     */
    final цел очистить(цел delegate(ref бул удалить_ли, ref З значение) дг)
    {
        return _примени(дг, начало, конец);
    }

    /**
     * Добавляет элемент в список.  * Возвращает да, если элемент ещё не
     * присутствовал.
     *
     * Выполняется за O(1) раз.
     */
    ТипСвязкаСписок добавь(З з)
    {
        _связка.вставь(_связка.конец, з);
        return this;
    }

    /**
     * Добавляет элемент в список.  * Возвращает да, если элемент ещё не
     * присутствовал.
     *
     * Выполняется за O(1) раз.
     */
    ТипСвязкаСписок добавь(З з, ref бул был_добавлен)
    {
        _связка.вставь(_связка.конец, з);
        был_добавлен = да;
        return this;
    }

    /**
     * Добавляет все значения из данного итератора в список.
     *
     *Возвращает this.
     */
    ТипСвязкаСписок добавь(Обходчик!(З) колл)
    {
        foreach(з; колл)
            добавь(з);
        return this;
    }

    /**
     * Добавляет все значения из данного итератора в список.
     *
     * Возвращает число добавленных элементов.
     */
    ТипСвязкаСписок добавь(Обходчик!(З) колл, ref бцел чло_добавленных)
    {
        бцел оригДлина = длина;
        добавь(колл);
        чло_добавленных = длина - оригДлина;
        return this;
    }

    /**
     * Добавляет все значения из данного массива массив в список.
     *
     * Возвращает число добавленных элементов.
     */
    ТипСвязкаСписок добавь(З[] массив)
    {
        foreach(з; массив)
            добавь(з);
        return this;
    }

    /**
     * Добавляет все значения из данного массива массив в список.
     *
     * Возвращает число добавленных элементов.
     */
    ТипСвязкаСписок добавь(З[] массив, ref бцел чло_добавленных)
    {
        foreach(з; массив)
            добавь(з);
        чло_добавленных = массив.length;
        return this;
    }

    /**
     *Посчитать число случаев з<начения>
     *
     * Выполняется за O(n) раз.
     */
    бцел счёт(З з)
    {
        бцел экземпляры = 0;
        foreach(x; this)
            if(з == x)
                экземпляры++;
        return экземпляры;
    }

    /**
     * Удалить все случаи з<начения>.  Возвращаает число экземпляров, которые
     * были удалены.
     *
     * Выполняется за O(n) раз.
     */
    ТипСвязкаСписок удалиВсе(З з)
    {
        foreach(ref dp, x; &очистить)
        {
            dp = cast(бул)(x == з);
        }
        return this;
    }

    /**
     * Удалить все случаи з<начения>.  Возвращаает число экземпляров, которые
     * были удалены.
     *
     * Выполняется за O(n) раз.
     */
    ТипСвязкаСписок удалиВсе(З з, ref бцел чло_Удалённых)
    {
        бцел оригДлина;
        удалиВсе(з);
        чло_Удалённых = оригДлина - длина;
        return this;
    }

    //
    // handy link-list only functions
    //
    /**
     * Вставить элемент по указанной позиция.  Returns a курсор to the
     * вновь вставленный элемент.
     */
    курсор вставь(курсор обх, З з)
    {
        обх.ptr = _связка.вставь(обх.ptr, з);
        return обх;
    }

    /**
     * Приставить элемент к первый элемент в списке.  Возвращает
     * курсор на нов приставленный (prepended) элемент.
     */
    курсор приставь(З з)
    {
        return вставь(начало, з);
    }

    /**
     * Поставить элемент в последн элемент в списке.  Возвращает курсор
     * на вновь добавленный (appended) элемент.
     */
    курсор поставь(З з)
    {
        return вставь(конец, з);
    }

    /**
     * Вернуть последний элемент в списке.  Неопределённо, если список пустой.
     */
    З тыл()
    {
        return _связка.конец.предш.значение;
    }
    
    /**
     * Вернуть первый элемент в списке.  Неопределённо, если список пустой.
     */
    З фронт()
    {
        return _связка.начало.значение;
    }

    /**
     * Удалить первый элемент в списке, и вернуть его значение.
     *
     * Не вызывайте при пустом списке!
     */
    З возьмиФронт()
    {
        auto возврзнач = фронт;
        _связка.удали(_связка.начало);
        return возврзнач;
    }

    /**
     * Удалить последн элемент в списке, и вернуть его значение
     * Не вызывайте при пустом списке!
     */
    З возьмиТыл()
    {
        auto возврзнач = тыл;
        _связка.удали(_связка.конец.предш);
        return возврзнач;
    }

    /**
     * Создать новый список с this и rhs, конкатенированными вместе
     */
    ТипСвязкаСписок opCat(Список!(З) rhs)
    {
        return dup.добавь(rhs);
    }

    /**
     * Создать новый список с this и массивом,  конкатенированными вместе
     */
    ТипСвязкаСписок opCat(З[] массив)
    {
        return dup.добавь(массив);
    }

    /**
     * Создать новый список с массивом и списком this, конкатенированными вместе.
     */
    ТипСвязкаСписок opCat_r(З[] массив)
    {
        auto рез = new ТипСвязкаСписок(_связка, нет);
        return рез.добавь(массив).добавь(this);
    }

    /**
     * Приставить данный список в  конец списка this.
     */
    ТипСвязкаСписок opCatAssign(Список!(З) rhs)
    {
        return добавь(rhs);
    }

    /**
     * Приставить данный массив в конец списка this.
     */
    ТипСвязкаСписок opCatAssign(З[] массив)
    {
        return добавь(массив);
    }

    /**
     * Дублировать список
     */
    ТипСвязкаСписок dup()
    {
        return new ТипСвязкаСписок(_связка, да);
    }

    /**
     * Сравнить список this с другим.  Возвращает да, если у обеих списков
     * одинаковая длина и все элементы одинаковы.
     *
     * Если o is пусто или не Список, return 0.
     */
    цел opEquals(Объект o)
    {
        if(o !is пусто)
        {
            auto li = cast(Список!(З))o;
            if(li !is пусто && li.length == длина)
            {
                auto c = начало;
                foreach(элт; li)
                {
                    if(элт != c++.значение)
                        return 0;
                }
                return 1;
            }
        }
        return 0;
    }

    /**
     * Сортировать список, в соответствии с заданной функцией сравнения.
     *
     *Выполняется за O(n lg(n)) раз
     *
     * После сортировки возвращает this
     */
    СвязкаСписок сортируй(цел delegate(ref З, ref З) comp)
    {
        _связка.сортируй(comp);
        return this;
    }

    /**
     * Сортировать список, в соответствии с заданной функцией сравнения.
     *
     *Выполняется за O(n lg(n)) раз
     *
     * После сортировки возвращает this
     */
    СвязкаСписок сортируй(цел function(ref З, ref З) comp)
    {
        _связка.сортируй(comp);
        return this;
    }

    /**
     * Сортирует линкованный список в соответствии с дефолтной функцией сравнения для З.
     *
     *Выполняется за O(n lg(n)) раз
     *
     * Возвращает this
     */
    СвязкаСписок сортируй()
    {
        return сортируй(&ДефСравнить!(З));
    }

    /**
     * Сортирует линкованный список в согласии с указанным функтором сравнения.  Является
     * шаблонизированной версией, и поэтому может использоваться с функторами, и может быть
     * inlined.
     */
    СвязкаСписок сортируйИкс(Сравниватель)(Сравниватель comp)
    {
        _связка.сортируй(comp);
        return this;
    }
}

version(UnitTest)
{
    unittest
    {
        auto ll = new СвязкаСписок!(бцел);
        Список!(бцел) l = ll;
        l.добавь([0U, 1, 2, 3, 4, 5]);
        assert(l.length == 6);
        assert(l.содержит(5));
        foreach(ref чистить_ли, i; &l.очистить)
            чистить_ли = (i % 2 == 1);
        assert(l.length == 3);
        assert(!l.содержит(5));
    }
}
