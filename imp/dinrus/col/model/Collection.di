/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.model.Collection;

public import col.model.Iterator;

/**
 * Интерфейс собраний (коллекций) определяет основной интерфейс для всех коллекций.
 *
 * Базовая коллекция должна позволять обход всех её элементов, сообщать о том,
 * содержится ли в ней данный элемент, а также удалять элементы. Добавление элементов
 * в данном случае не поддерживается, поскольку элементы не всегда добавляются простым
 * приёмом. Например, карта (мэп) требует добавления в обходчик и ключа, и самого элемента.
 */
interface Коллекция(З) : Обходчик!(З), Чистящий!(З) 
{
    /**
     * очистить контейнер от всех значений
     */
    Коллекция!(З) очисти();

    /**
     * удалить элемент со специфичным значением.  " Это может быть какая-н. O(n)
     * операция.  Если колекция с ключами,  первый элемент, чьё значение
     * совпадает, будет удалён.
     *
     * возвращает this.
     */
    Коллекция!(З) удали(З з);

    /**
     * удалить элемент со специфичным значением.  " Это может быть какая-н. O(n)
     * операция.  Если колекция с ключами,  первый элемент, чьё значение
     * совпадает, будет удалён.
     *
     * возвращает this.
     *
     * Устанавливает был_Удалён в да, если элемент существовал и был удалён.
     */
    Коллекция!(З) удали(З з, ref бул был_Удалён);

    /**
     * возвращает да, если коллекция содержит значение.  Может быть O(n).
     */
    бул содержит(З з);

    /**
     * Сделать копию коллекции this.  Это не делает "глубокую" копию
     * элементов, если они ссылочного или указательного типа.
     */
    Коллекция!(З) dup();
}
