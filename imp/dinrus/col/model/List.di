/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.model.List;
public import col.model.Collection,
       col.model.Addable,
       col.model.Multi;

/**
 * Список - это коллекция, элементы которой находятся в порядке их добавления. Это
 * полезно, когда нужно проследить не только за значениями, но и за порядком
 * их появления.
 */
interface Список(З) : Коллекция!(З), Добавляемый!(З), Мульти!(З)
{
    /**
     * Конкатенировать два списка вместе.  Тип результирующего списка как у
     * элемента слева.
     */
    Список!(З) opCat(Список!(З) rhs);

    /**
     * Конкатенировать список this и массив.
     *
     * Результирующий список того же типа, что и список this.
     */
    Список!(З) opCat(З[] массив);

    /**
     * Конкатенировать массив и список this.
     *
     * Результирующий список того же типа, что и список this.
     */
    Список!(З) opCat_r(З[] массив);

    /**
     * Поставить данный список в список this.  Возвращает 'this'.
     */
    Список!(З) opCatAssign(Список!(З) rhs);

    /**
     * Поставить  данный массив в список this.  Возвращает 'this'.
     */
    Список!(З) opCatAssign(З[] массив);

    /**
     * covariant очисти (from Коллекция)
     */
    Список!(З) очисти();

    /**
     * covariant dup (from Коллекция)
     */
    Список!(З) dup();

    /**
     * Covariant удали (from Коллекция)
     */
    Список!(З) удали(З з);

    /**
     * Covariant удали (from Коллекция)
     */
    Список!(З) удали(З з, ref бул был_Удалён);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(З з);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(З з, ref бул был_добавлен);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(Обходчик!(З) обх);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(Обходчик!(З) обх, ref бцел чло_добавленных);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(З[] массив);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Список!(З) добавь(З[] массив, ref бцел чло_добавленных);

    /**
     * covariant удалиВсе (from Мульти)
     */
    Список!(З) удалиВсе(З з);

    /**
     * covariant удалиВсе (from Мульти)
     */
    Список!(З) удалиВсе(З з, ref бцел чло_Удалённых);

    /**
     * сортируй this list according to the default compare routine for З.  Returns
     * a ссылка to the list after обх is sorted.
     */
    Список!(З) сортируй();

    /**
     * Сортировать список this согласно заданной функции сравнивания.  Возвращает
     * ссылку на список после сортировки обходчика.
     */
    Список!(З) сортируй(цел delegate(ref З v1, ref З v2) comp);

    /**
     * Сортировать список this согласно заданной функции сравнивания.  Возвращает
     * ссылку на список после сортировки обходчика.
     */
    Список!(З) сортируй(цел function(ref З v1, ref З v2) comp);

    /**
     * Сравнить список this с другим списком.  Возвращает да, если у них одинаковое
     * число элементов и все элементы равны.
     *
     * Если o не есть список, то возвращается 0.
     */
    цел opEquals(Объект o);

    /**
     * Возвращает элемент в начале списка, или более старый элемент
     * добавленный.  Если список пуст, вызов фронт неопределён.
     */
    З фронт();

    /**
     * Возвращает элемент в конце списка, или самый последний элемент
     * добавленный.  Если список пуст, вызов тыл неопределён.
     */
    З тыл();

    /**
     * Принимает элемент на фронте списка, возвращая его значение.  Эта
     * операция может быть O(n).
     */
    З возьмиФронт();

    /**
     * Берёт элемент на конце спискаt, возвращая его значение.  Эта
     * операция может быть O(n).
     */
    З возьмиТыл();
}
