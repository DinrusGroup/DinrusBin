/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.model.Iterator;

enum : бцел
{
    /**
     * Возвращается из длина(), когда length не поддерживается
     */
    ДЛИНА_НЕ_ПОДДЕРЖИВАЕТСЯ = ~0
}

/**
 * базовый итератор.  Позволяет обходить по элементам объекта.
 */
interface Обходчик(З)
{
    /**
     *Если поддерживается, возвращает число элементов, которые будут итерированы.
     *
     * Если не поддерживается, возвращает ДЛИНА_НЕ_ПОДДЕРЖИВАЕТСЯ.
     */
    бцел длина(); alias длина length;

    /**
     *оператор  foreach.
     */
    цел opApply(цел delegate(ref З з) дг);
}

/**
 * Обходчик с ключами.  Это позволяет видеть ключ элемента как и
 * значение при итерации.
 */
interface Ключник(К, З) : Обходчик!(З)
{
    alias Обходчик!(З).opApply opApply;

    /**
     * Итерировать по ключам и значениям одновременно
     */
    цел opApply(цел delegate(ref К к, ref З з) дг);
}

/**
 * Чистящий итератор используется для очистки значений из коллекции.  Это выполняется путём
 * сообщения итератору, который должен удалить обходчик, последнего итерированного значения.
 */
interface Чистящий(З)
{
    /**
     * Итерирует по значениям итератора, сообщая обх, какие значения
     * удалить.  Чтобы удали значение, установить чистить_ли в да перед выходом из
     * цикла
     *
     * Прим.: укажите ref для параметра чистить_ли:
     *
     * -----
     * foreach(ref чистить_ли, з; &чистящий.очистить){
     * ...
     * -----
     */
    цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг);
}

/**
 * Чистящий обходчик для контейнеров с ключами.
 */
interface ЧистящийКлючи(К, З) : Чистящий!(З)
{
    /**
     * Итерировать по парам ключ/значение обходчика, сообщая ему, какие следует
     * удалить.
     *
     * Прим.: укажите ref для параметра чистить_ли:
     *
     * -----
     * foreach(ref чистить_ли, к, з; &чистящий.чисть_ключ){
     * ...
     * -----
     *
     * TODO: note this should have the name очистить, but because of asonine
     * lookup rules, обх makes обх difficult to specify this version over the
     * base version.  Once this is fixed, обх's highly likely that this goes
     * тыл to the name очистить.
     *
     * See bugzilla #2498
     */
    цел чисть_ключ(цел delegate(ref бул чистить_ли, ref К к, ref З з) дг);
}
