/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.model.Set;
public import col.model.Collection,
       col.model.Addable;

/**
 * Набор - это коллекция объектов, в которой может существовать только один
 * экземпляр объекта. Если добавляется 2 экземпляра объекта, то только первый
 * попадает в набор.
 */
interface Набор(З) : Коллекция!(З), Добавляемый!(З)
{
    /**
     * Удалить все значения, совпадающие с заданным итератором.
     */
    Набор!(З) удали(Обходчик!(З) поднабор);

    /**
     * Удалить все значения, совпадающие с заданным итератором.
     */
    Набор!(З) удали(Обходчик!(З) поднабор, ref бцел чло_Удалённых);

    /**
     * Удалить все значения, которых нет в заданном итераторе.
     */
    Набор!(З) накладка(Обходчик!(З) поднабор);

    /**
     * Удалить все значения, которых нет в заданном итераторе.
     */
    Набор!(З) накладка(Обходчик!(З) поднабор, ref бцел чло_Удалённых);

    /**
     * Covariant dup (from Коллекция)
     */
    Набор!(З) dup();

    /**
     * Covariant удали (from Коллекция)
     */
    Набор!(З) удали(З з);

    /**
     * Covariant удали (from Коллекция)
     */
    Набор!(З) удали(З з, ref бул был_Удалён);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(З з);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(З з, ref бул был_добавлен);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(Обходчик!(З) обх);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(Обходчик!(З) обх, ref бцел чло_добавленных);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(З[] массив);

    /**
     * Covariant добавь (from Добавляемый)
     */
    Набор!(З) добавь(З[] массив, ref бцел чло_добавленных);

    /**
     * Сравнить два набора.  Возвращает да, если оба набораs имеют одинаковое число
     * элементов, и все элементы из одного набора существуют и в другом наборе.
     *
     * если o не есть Набор, return нет.
     */
    цел opEquals(Объект o);

    /**
     * Даёт наиболее подходящий элемент из набора.  * Это элемент, который
     *должен итерироваться первым.  Следовательно, вызов удали(дай())
     * гарантировано меньше, чем операция O(n).
     */
    З дай();

    /**
     *Удалить наиболее подходящий элемент из набора, и вернуть его значение.
     * Это равносильно удали(дай()), только лишь один поиск
     * выполняется.
     */
    З изыми();
}
