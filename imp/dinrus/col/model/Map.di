/*********************************************************
   Авторское право: (C) 2008 принадлежит Steven Schveighoffer.
              Все права защищены

   Лицензия: $(LICENSE)

**********************************************************/
module col.model.Map;
public import col.model.Collection,
       col.model.Keyed,
       col.model.Multi;

/**
 * В коллекции Карта для значений используются ключи. Допускается наличие
 * только одного экземпляра ключа в одно и то же время.
 */
interface Карта(К, З) : СКлючом!(К, З), Коллекция!(З), Мульти!(З)
{
    /**
     * установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает.
     */
    Карта!(К, З) установи(Ключник!(К, З) исток);

    /**
     * установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает.
     *
     * чло_добавленных устанавливается в число элементов, которое было добавлено.
     */
    Карта!(К, З) установи(Ключник!(К, З) исток, ref бцел чло_добавленных);

    /**
     * установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает.
     */
    Карта!(К, З) установи(З[К] исток);

    /**
     * установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает.
     *
     * чло_добавленных устанавливается в число добавленных элементов.
     */
    Карта!(К, З) установи(З[К] исток, ref бцел чло_добавленных);

    /**
     * Удалить из карты все указанные ключи.
     *
     * return this.
     */
    Карта!(К, З) удали(Обходчик!(К) поднабор);

    /**
     * Удалить из карты все указанные ключи.
     *
     * return this.
     *
     * чло_Удалённых устанавливается в число удалённых элементов.
     */
    Карта!(К, З) удали(Обходчик!(К) поднабор, ref бцел чло_Удалённых);

    /**
     * Удалить из карты все указанные ключи.
     *
     * return this.
     */
    Карта!(К, З) удали(К[] поднабор);

    /**
     * Удалить из карты все указанные ключи.
     *
     * return this.
     *
     * чло_Удалённых устанавливается в число удалённых элементов.
     */
    Карта!(К, З) удали(К[] поднабор, ref бцел чло_Удалённых);

    /**
     * Удалить все ключи, которых нет в указанном итераторе.
     *
     * возвращает this.
     */
    Карта!(К, З) накладка(Обходчик!(К) поднабор);

    /**
     * Удалить все ключи, которых нет в указанном итераторе.
     *
     * Устанавливает чло_Удалённых в число удалённых элементов.
     *
     * возвращает this.
     */
    Карта!(К, З) накладка(Обходчик!(К) поднабор, ref бцел чло_Удалённых);

    /**
     * Удалить все ключи, не входящие в данный массив.
     *
     * возвращает this.
     */
    Карта!(К, З) накладка(К[] поднабор);

    /**
     * Удалить все ключи, не входящие в данный массив.
     *
     * Устанавливает чло_Удалённых в число удалённых элементов.
     *
     * возвращает this.
     */
    Карта!(К, З) накладка(К[] поднабор, ref бцел чло_Удалённых);

    /**
     * Получить набор ключей, содержащихся в карте.  Это не копия
     * ключей, но действительноеl "окно" в карту ключей.  Если добавлены
     * в карту значения, они покажут ключи итератора.
     *
     * Это не в СКлючом, т.к. некоторые контейнеры СКлючом не имеют пользователя
     * определившего ключи, и там это будет бесполезно.
     */
    Обходчик!(К) ключи();

    /**
     * ковариант с очисти (из Коллекция)
     */
    Карта!(К, З) очисти();

    /**
     * ковариант с dup (из Коллекция)
     */
    Карта!(К, З) dup();

    /**
     * ковариант с удали (из Коллекция)
     */
    Карта!(К, З) удали(З з);

    /**
     * ковариант с удали (из Коллекция)
     */
    Карта!(К, З) удали(З з, ref бул был_Удалён);

    /**
     * ковариант с удалиВсе (из Мульти)
     */
    Карта!(К, З) удалиВсе(З з);

    /**
     * ковариант с удалиВсе (из Мульти)
     */
    Карта!(К, З) удалиВсе(З з, ref бцел чло_Удалённых);

    /**
     * ковариант с удалиПо (из СКлючом)
     */
    Карта!(К, З) удалиПо(К ключ);

    /**
     * ковариант с удалиПо (из СКлючом)
     */
    Карта!(К, З) удалиПо(К ключ, ref бул был_Удалён);

    /**
     * ковариант с установи (из СКлючом)
     */
    Карта!(К, З) установи(К ключ, З значение);

    /**
     * ковариант с установи (из СКлючом)
     */
    Карта!(К, З) установи(К ключ, З значение, ref бул был_добавлен);

    /**
     * compare two maps.  Возвращает да, если обе карты имеют одинаковое число
     * элементов и обе имеют элементы, чьи ключи и значения равны.
     *
     * Если oне в карте, то возвращается 0.
     */
    цел opEquals(Объект o);
}
