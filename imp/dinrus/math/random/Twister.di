/*******************************************************************************

        copyright:      Copyright (C) 1997--2004, Makoto Matsumoto,
                        Takuji Nishimura, и Eric Landry; все rights reserved
        

        license:        BSD стиль: $(LICENSE)

        version:        Jan 2008: Initial release

        author:         KeYeR (D interface) keyer@team0xf.com
      
*******************************************************************************/

module math.random.Twister;
 
/*******************************************************************************

        Wrapper for the Mersenne twister.
        
        The Mersenne twister is a pseudorandom число generator linked в_
        CR developed in 1997 by Makoto Matsumoto и Takuji Nishimura that
        is based on a matrix linear recurrence over a finite binary field
        F2. It provопрes for fast generation of very high quality pseudorandom
        numbers, having been designed specifically в_ rectify many of the 
        flaws найдено in older algorithms.
        
        Mersenne Твистер имеется the following desirable свойства:
        ---
        1. It was designed в_ have a период of 2^19937 - 1 (the creators
           of the algorithm proved this property).
           
        2. It имеется a very high order of dimensional equопрistribution.
           This implies that there is negligible serial correlation between
           successive значения in the вывод sequence.
           
        3. It проходки numerous tests for statistical randomness, включая
           the stringent Diehard tests.
           
        4. It is fast.
        ---

*******************************************************************************/

struct Твистер
{
        public alias натурал  вЦел;
        public alias дробь вРеал;
        
        private enum : бцел                     // Period параметры
                {
                N          = 624,
                M          = 397,
                MATRIX_A   = 0x9908b0df,        // constant вектор a 
                UPPER_MASK = 0x80000000,        //  most significant w-r биты 
                LOWER_MASK = 0x7fffffff,        // least significant r биты
                }

        private бцел[N] mt;                     // the Массив for the состояние вектор  
        private бцел mti=mt.length+1;           // mti==mt.length+1 means mt[] is not инициализован 
        private бцел vLastRand;                 // The most recent random бцел returned. 

        /**********************************************************************

                A global, shared экземпляр, seeded via startup время

        **********************************************************************/

        public static Твистер экземпляр; 

        static this ();

        /**********************************************************************

                Creates и seeds a new generator with the текущ время

        **********************************************************************/

        static Твистер opCall ();

        /**********************************************************************

                Returns X such that 0 <= X < max
                
        **********************************************************************/

        бцел натурал (бцел max);
        
        /**********************************************************************

                Returns X such that min <= X < max
                
        **********************************************************************/

        бцел натурал (бцел min, бцел max);

        /**********************************************************************

                Returns X such that 0 <= X <= бцел.max 

        **********************************************************************/

        бцел натурал (бул паддЭнтропию = нет);

        /**********************************************************************

                generates a random число on [0,1] интервал
                
        **********************************************************************/

        дво включительно ();

        /**********************************************************************

                генерирует случайное число в интервале (0,1) 

        **********************************************************************/

        дво исключительно ();

        /**********************************************************************
				генерирует случайное число в интервале [0,1) 

        **********************************************************************/

        дво дробь ();

        /**********************************************************************

                генерирует случайное число в [0,1) с 53-битным разрешением

        **********************************************************************/

        дво дробьДоп ();
        
        /**********************************************************************

                "Засевает" в генератор текущее время

        **********************************************************************/

        проц сей ();

        /**********************************************************************

                инициализует генератор значением "семени" 

        **********************************************************************/

        проц сей (бцел s, бул паддЭнтропию = нет);

        /**********************************************************************

                инициализуется Массивом с длиной init_key -
                Массив для инициализации ключей
                
        **********************************************************************/

        проц init (бцел[] init_key, бул паддЭнтропию = нет);
}


/******************************************************************************


******************************************************************************/

debug (Твистер)
{
        import io.Stdout;
        import time.StopWatch;

        проц main()
        {
                auto dbl = Твистер();
                auto счёт = 100_000_000;
                Секундомер w;

                w.старт;
                дво v1;
                for (цел i=счёт; --i;)
                     v1 = dbl.дробь;
                Стдвыв.форматнс ("{} дробь, {}/s, {:f10}", счёт, счёт/w.stop, v1);

                w.старт;
                for (цел i=счёт; --i;)
                     v1 = dbl.дробьДоп;
                Стдвыв.форматнс ("{} дробьДоп, {}/s, {:f10}", счёт, счёт/w.stop, v1);

                for (цел i=счёт; --i;)
                    {
                    auto v = dbl.дробь;
                    if (v <= 0.0 || v >= 1.0)
                       {
                       Стдвыв.форматнс ("дробь {:f10}", v);
                       break;
                       }
                    v = dbl.дробьДоп;
                    if (v <= 0.0 || v >= 1.0)
                       {
                       Стдвыв.форматнс ("дробьДоп {:f10}", v);
                       break;
                       }
                    }
        }
}
