/**
 * Authors: The D DBI project
 * Copyright: BSD license
 */

module dbi.model.Result;

private import dbi.model.Constants;


//private import Вариант;
private import time.Time;


public alias ук delegate(т_мера) Размест;

interface Результат : МетаданныеСтолбца
{
    Размест разместитель();
    проц разместитель(Размест размест);
    бдол члоПолей();
    проц закрой();
    Время штампВремени();
    бул действителен();
}

interface ПолныйРезультат : Результат
{
    Ряды ряды();
    бдол члоРядов();
}

interface МультиРезультат : ПолныйРезультат
{
    бул ещё();
    МультиРезультат следщ();
}

interface Ряды {

    цел opApply (цел delegate(inout Ряд) дг);
    Размест разместитель();
    проц разместитель(Размест размест);
    Ряд следщ();
    бул добудь(Размест размест, ук ...);
    /*
    Вариант[] добудь ();
    бул добудь (inout Вариант[] v);
    */
    проц сместись(бдол offустанови);
    Ряд opIndex(бдол инд);
    бдол члоРядов();
    бдол члоПолей();
    бул действителен();
}

interface Ряд : МетаданныеСтолбца
{
    /*
    Вариант opIndex(т_мера инд);
    Вариант opIndex(ткст имя);

    Вариант[] добудь ();
    бул добудь (inout Вариант[] v);
    */

    проц добудь (inout ткст[] значения);
    проц добудь (inout ткст, т_мера инд = 0);

    /*
    проц добудь (inout байт, т_мера инд = 0);
    проц добудь (inout ббайт, т_мера инд = 0);
    проц добудь (inout крат, т_мера инд = 0);
    проц добудь (inout бкрат, т_мера инд = 0);

    проц добудь (inout цел, т_мера инд = 0);
    проц добудь (inout бцел, т_мера инд = 0);
    проц добудь (inout дол, т_мера инд = 0);
    проц добудь (inout бдол, т_мера инд = 0);

    проц добудь (inout плав, т_мера инд = 0);
    проц добудь (inout дво, т_мера инд = 0);
    проц добудь (inout реал, т_мера инд = 0);
    */

    ткст текстПо(т_мера инд);
    ткст текстПо(ткст имя);

    бдол члоПолей();
}

interface МетаданныеСтолбца
{
    ИнфОСтолбце[] метаданные();
    ИнфОСтолбце метаданные(т_мера инд);
}

enum ФлагСтолбца : бдол
{
    НеПусто = 1,
    ПервичныйКлюч = 2,
    УникальныйКлюч = 4,
    МультиКлюч = 8,
    Блоб = 16,
    БезЗнака = 32,
    Занул = 64,
    Бинар = 128
}

struct ИнфОСтолбце 
{
    ТипДби тип;
    ткст имя;
    бдол флаги;

    бул неПусто() { return cast(бул)(флаги & ФлагСтолбца.НеПусто); }
    бул первичныйКлюч() { return cast(бул)(флаги & ФлагСтолбца.ПервичныйКлюч); }
    бул уникальныйКлюч() { return cast(бул)(флаги & ФлагСтолбца.УникальныйКлюч); }
    бул мультиКлюч() { return cast(бул)(флаги & ФлагСтолбца.МультиКлюч); }
    бул блоб() { return cast(бул)(флаги & ФлагСтолбца.Блоб); }
    бул безЗнака() { return cast(бул)(флаги & ФлагСтолбца.БезЗнака); }
    бул бинар() { return cast(бул)(флаги & ФлагСтолбца.Бинар); }
    бул занул() { return cast(бул)(флаги & ФлагСтолбца.Занул); }
}

