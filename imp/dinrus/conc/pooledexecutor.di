module conc.pooledexecutor;

import conc.threadfactoryuser;
import conc.executor;
import conc.channel;
import conc.waitnotify;
private import conc.synchronouschannel;


const цел  ДЕФ_МАКС_РАЗМ_ПУЛА = цел.max;
const цел  ДЕФ_МИН_РАЗМ_ПУЛА = 1;
const дол ДЕФ_ВРЕМЯ_АКТИВНОСТИ = 60000;

class КатушечныйИсполнитель : ПользовательФабрикиНитей , Исполнитель {

  protected цел maximumPoolSize_ = ДЕФ_МАКС_РАЗМ_ПУЛА;
  protected цел minimumPoolSize_ = ДЕФ_МИН_РАЗМ_ПУЛА;
  protected цел poolSize_ = 0;
  protected дол keepAliveTime_ = ДЕФ_ВРЕМЯ_АКТИВНОСТИ;
  protected бул прерывание_ = нет;
  alias цел delegate() Пускаемый;
  alias СинхронныйКанал!(Пускаемый) СК;

  Канал!(Пускаемый) handOff_;
  protected Нить[Работяга] threads_;
  protected ОбработчикБлокированногоВыполнения blockedExecutionHandler_;

  mixin ЖдиУведомиВсех;

  this() ;
  this(цел максРазмПула) ;
  this(Канал!(Пускаемый) канал) ;
  this(Канал!(Пускаемый) канал, цел максРазмПула);
  ~this();
  synchronized цел дайМаксРазмПула();
  synchronized проц установиМаксРазмПула(цел новМаксимум);
  synchronized цел дайМинРазмПула();
  synchronized проц установиМинРазмПула(цел новМинимум) ;
  synchronized цел дайРазмПула() ;
  synchronized дол дайВремяАктивности() ;
  synchronized проц установиВремяАктивности(дол мсек) ;
  synchronized ОбработчикБлокированногоВыполнения дайОбрБлокВып();
  synchronized проц установиОбрБлокВып(ОбработчикБлокированногоВыполнения h) ;
  protected проц добавьНить(Пускаемый команда);
  цел создайНити(цел члоНитей) ;
  synchronized проц прервиВсе() ;
  проц выполниШатдаун() ;
  synchronized проц выполниШатдаун(ОбработчикБлокированногоВыполнения обработчик);
  проц прерываниеПослеОбработкиТекущихЗадачВОчереди() ;
  synchronized проц прерываниеПослеОбработкиТекущихЗадачВОчереди(ОбработчикБлокированногоВыполнения обработчик);
  synchronized бул терминированоПослеШатдауна() ;
  synchronized бул ждиТерминированиеПослеШатдауна(дол максВремОжидан);
  synchronized проц ждиТерминированиеПослеШатдауна();
  Пускаемый[] дренируй() ;
  protected synchronized проц работягаВыполнен(Работяга w);
  protected Пускаемый дайЗадачу() ;
  
				  class Работяга {
					protected Пускаемый firstTask_;
					protected КатушечныйИсполнитель объ;
					protected this(Пускаемый firstTask,КатушечныйИсполнитель объ) ;
					цел пуск();
				  }

				  interface ОбработчикБлокированногоВыполнения
				  {
					бул блокированноеДействие(Пускаемый команда);
				  }

				  class ПускПослеБлокировки : ОбработчикБлокированногоВыполнения 
				  {
					бул блокированноеДействие(Пускаемый команда);
				  }

  проц пускПослеБлокировки();
  
				  class ЖдиПокаБлокировано : ОбработчикБлокированногоВыполнения
				  {
					КатушечныйИсполнитель объ;
					this(КатушечныйИсполнитель объ) ;	
					бул блокированноеДействие(Пускаемый команда);
				  }

  проц ждиПокаБлокировано() ;
  
				  class ВыместиКогдаБлокировано : ОбработчикБлокированногоВыполнения
				  {
					бул блокированноеДействие(Пускаемый команда) ;
				  }

  проц выместиКогдаБлокировано() ;
  
				  class АбортКогдаБлокировано : ОбработчикБлокированногоВыполнения
				  {
					бул блокированноеДействие(Пускаемый команда) ;
				  }

  проц абортКогдаБлокировано() ;
  
				  class ВыместиСтаршуюКогдаБлокировано : ОбработчикБлокированногоВыполнения 
				  {
					КатушечныйИсполнитель объ;
					this(КатушечныйИсполнитель объ) ;
					бул блокированноеДействие(Пускаемый команда);
				  }

  проц выместиСтаршуюКогдаБлокировано();
  
  проц выполни(Пускаемый команда);

}

