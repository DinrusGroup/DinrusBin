//Автор Кристофер Миллер. Переработано для Динрус Виталием Кулич.
//Библиотека визуальных конпонентов VIZ (первоначально DFL).
module viz.graphics;
import  winapi, tpl.stream, viz.common;


extern(D) class СистемныеЦвета // docmain
{

	static:
	
	Цвет активныйБордюр();	
	Цвет активныйЗаголовок();	
	Цвет текстАктивногоЗаголовка();
	Цвет рабочееПространствоПрилож();
	Цвет упрэлт() ;	
	Цвет тёмныйУпр() ;	
	Цвет оченьТёмныйУпр();
	Цвет светлыйУпр();
	Цвет оченьСветлыйУпр();
	Цвет текстУпр() ;
	Цвет рабочийСтол();
	Цвет серыйТекст() ;
	Цвет подсветка() ;
	Цвет подсветкаТекста() ;
	Цвет хотТрэк();
	Цвет неактивныйБордюр();
	Цвет неактивныйЗаголовок() ;
	Цвет текстНеактивногоЗаголовка() ;
	Цвет инфо() ;
	Цвет текстИнфо() ;
	Цвет меню() ;
	Цвет текстМеню() ;
	Цвет полосаПрокрутки();
	Цвет окно() ;
	Цвет рамкаОкна();
	Цвет текстОкна() ;
}


extern(D) class СистемныеПиктограммы // docmain
{
	static:
	
	Пиктограмма приложение() ;
	Пиктограмма ошибка() ;
	Пиктограмма вопрос();
	Пиктограмма предупреждение();	
	Пиктограмма информация() ;
}

extern(D) abstract class Рисунок // docmain
{

	static Битмап изУкНаБитмап(HBITMAP hbm) ;
	abstract проц рисуй(Графика з, Точка тчк);	
	abstract проц рисуйРастяни(Графика з, Прям к);	
	abstract Размер размер();
	цел ширина();
	цел высота();
	цел _imgtype(HGDIOBJ* ph);
}

extern(D) class Битмап: Рисунок // docmain
{

	this(Ткст фимя);
	this(HBITMAP hbm, бул owned = да);
	final HBITMAP указатель();
	final override Размер размер() ;
	final override цел ширина() ;
	final override цел высота() ;
	final override проц рисуй(Графика з, Точка тчк);
	final проц рисуй(Графика з, Точка тчк, Графика tempMemGraphics);
	final override проц рисуйРастяни(Графика з, Прям к);
	final проц рисуйРастяни(Графика з, Прям к, Графика tempMemGraphics);
	проц вымести();
	~this();
	override цел _imgtype(HGDIOBJ* ph);
}

 extern(D) class Картинка: Рисунок // docmain
{
	this(Поток stm);
	this(Ткст фимя);
	this(проц[] mem);
	static Картинка изПотока(Поток stm);
	static Картинка изФайла(Ткст фимя);
	static Картинка изПамяти(проц[] mem);	
	final проц рисуй(HDC hdc, Точка тчк);
	final override проц рисуй(Графика з, Точка тчк);
	final проц рисуйРастяни(HDC hdc, Прям к) ;	
	final override проц рисуйРастяни(Графика з, Прям к);
	final OLE_XSIZE_HIMETRIC loghimX();
	final OLE_YSIZE_HIMETRIC loghimY();
	final override цел ширина();
	final override цел высота() ;	
	final override Размер размер();	
	final цел дайШирину(HDC hdc);	
	final цел дайШирину(Графика з);
	final цел дайВысоту(HDC hdc);
	final цел дайВысоту(Графика з);	
	final Размер дайРазмер(HDC hdc) ;
	final Размер дайРазмер(Графика з);
	проц вымести();
	~this();		
	final HBITMAP вУкНаБитмап(HDC hdc) ;	
	final Битмап вБитмап(HDC hdc) ;	
	final Битмап вБитмап();
	final Битмап вБитмап(Графика з);
	
	HBITMAP _hbmimgtype;
	
	override цел _imgtype(HGDIOBJ* ph);

}

extern(D) class ФорматТекста
{
	this();		
	this(ФорматТекста tf);
	this(ФлагиФорматаТекста флаги);
	static ФорматТекста генерныйДефолт();	
	static ФорматТекста генернаяТипографика();
	final проц расположение(РасположениеТекста ta);
	final РасположениеТекста расположение();
	final проц флагиФормата(ФлагиФорматаТекста tff);
	final ФлагиФорматаТекста флагиФормата();
	final проц сокращение(СокращениеТекста tt);		
	final СокращениеТекста сокращение() ;	
	final проц длинаТаб(цел tablen);
	final цел длинаТаб();	
	final проц левыйКрай(цел разм) ;
	final цел левыйКрай() ;	
	final проц правыйКрай(цел разм) ;
	final цел правыйКрай();

}

// Note: currently only works with the one screen.
extern(D) class Экран
{

	static Экран первичныйЭкран();
	Прям границы() ;	
	Прям рабочаяЗона() ;
	private:
	this() { }
}

extern(D) class Графика // docmain
{
	this(HDC hdc, бул owned = да);		
	~this();
	final проц drawSizeGrip(цел право, цел верх);
	final проц drawMoveGrip(Прям movableArea, бул вСплит = да, т_мера count = 5) ;
	final проц рисуйТекст(Ткст текст, Шрифт шрифт, Цвет цвет, Прям к, ФорматТекста фмт);	
	final проц рисуйТекст(Ткст текст, Шрифт шрифт, Цвет цвет, Прям к);
	final проц рисуйТекстДезакт(Ткст текст, Шрифт шрифт, Цвет цвет, Цвет цветФона, Прям к, ФорматТекста фмт);	
	final проц рисуйТекстДезакт(Ткст текст, Шрифт шрифт, Цвет цвет, Цвет цветФона, Прям к);
	final Размер мерьТекст(Ткст текст, Шрифт шрифт, цел максШирина, ФорматТекста фмт);
	final Размер мерьТекст(Ткст текст, Шрифт шрифт, ФорматТекста фмт);
	final Размер мерьТекст(Ткст текст, Шрифт шрифт, цел максШирина);	
	final Размер мерьТекст(Ткст текст, Шрифт шрифт);
	final проц рисуйПиктограмму(Пиктограмма пиктограмма, Прям к);
	final проц рисуйПиктограмму(Пиктограмма пиктограмма, цел ш, цел в);
	final проц заполниПрямоугольник(Кисть кисть, Прям к);	
	final проц заполниПрямоугольник(Кисть кисть, цел ш, цел в, цел ширина, цел высота);
	final проц заполниПрямоугольник(Цвет цвет, Прям к);
	final проц заполниПрямоугольник(Цвет цвет, цел ш, цел в, цел ширина, цел высота);
	final проц заполниРегион(Кисть кисть, Регион регион);
	static Графика изУок(УОК уок);
	static Графика дайЭкран();
	final проц рисуйЛинию(Перо pen, Точка старт, Точка end);
	final проц рисуйЛинию(Перо pen, цел стартX, цел стартY, цел endX, цел endY);
	final проц рисуйЛинии(Перо pen, Точка[] точки);
	final проц рисуйАрку(Перо pen, цел ш, цел в, цел ширина, цел высота, цел arcX1, цел arcY1, цел arcX2, цел arcY2);
	final проц рисуйАрку(Перо pen, Прям к, Точка arc1, Точка arc2);
	final проц рисуйБезье(Перо pen, Точка[4] точки);
	final проц рисуйБезье(Перо pen, Точка pt1, Точка pt2, Точка pt3, Точка pt4);
	final проц рисуйБезьеМн(Перо pen, Точка[] точки);
	final проц рисуйЭллипс(Перо pen, Прям к);
	final проц рисуйЭллипс(Перо pen, цел ш, цел в, цел ширина, цел высота);	
	final проц рисуйМногоугольник(Перо pen, Точка[] точки);
	final проц рисуйПрямоугольник(Перо pen, Прям к);	
	final проц рисуйПрямоугольник(Перо pen, цел ш, цел в, цел ширина, цел высота);
	final проц рисуйПрямоугольники(Перо pen, Прям[] rs);
	final проц слей();
	final Цвет дайБлижайшийЦвет(Цвет ктрл);
	final Размер getScaleSize(Шрифт f);
	final бул копируйВ(HDC dest, цел destX, цел destY, цел ширина, цел высота, цел srcX = 0, цел srcY = 0, DWORD rop = SRCCOPY);
	final бул копируйВ(Графика destGraphics, цел destX, цел destY, цел ширина, цел высота, цел srcX = 0, цел srcY = 0, DWORD rop = SRCCOPY);	
	final бул копируйВ(Графика destGraphics, Прям границы);
	final HDC указатель();	
	проц вымести();
}


extern(D) class ГрафикаВПамяти: Графика // docmain
{

	this(цел ширина, цел высота);
	this(цел ширина, цел высота, Графика graphicsCompatible);
	this(цел ширина, цел высота, HDC hdcCompatible) ;
	final цел ширина();	
	final цел высота();
	final Размер размер();
	final HBITMAP укНаБитмап();
	final HBITMAP вУкНаБитмап(HDC hdc);
	final Битмап вБитмап(HDC hdc) ;
	final Битмап вБитмап();
	final Битмап вБитмап(Графика з);
	override проц вымести();
}

extern(D) class Пиктограмма: Рисунок // docmain
{

	this(УИконка hi, бул owned = да);
	final Битмап вБитмап();
	final override проц рисуй(Графика з, Точка тчк);
	final override проц рисуйРастяни(Графика з, Прям к);
	final override Размер размер() ;	
	final override цел ширина();
	final override цел высота() ;
	~this();		
	цел _imgtype(HGDIOBJ* ph);	
	проц вымести();	
	final УИконка указатель() ;
}

extern(D) class Шрифт // docmain
{
	static проц LOGFONTAtoLogFont(inout ШрифтЛога шл, LOGFONTA* plfa);
	static проц LOGFONTWtoLogFont(inout ШрифтЛога шл, LOGFONTW* plfw);
	this(УШрифт hf, LOGFONTA* plfa, бул owned = да) ;
	this(УШрифт hf, inout ШрифтЛога шл, бул owned = да);
	this(УШрифт hf, бул owned = да) ;
	this(LOGFONTA* plfa, бул owned = да) ;
	this(Шрифт шрифт, СтильШрифта стиль);
	this(Ткст имя, float emSize, ЕдиницаГрафики unit);
	this(Ткст имя, float emSize, СтильШрифта стиль = СтильШрифта.ОБЫЧНЫЙ,
		ЕдиницаГрафики unit = ЕдиницаГрафики.ТОЧКА);
	this(Ткст имя, float emSize, СтильШрифта стиль,
		ЕдиницаГрафики unit, СглаживаниеШрифта smoothing);
	this(Ткст имя, float emSize, СтильШрифта стиль,
		ЕдиницаГрафики unit, ббайт гарнитураГди,
		СглаживаниеШрифта smoothing = СглаживаниеШрифта.ПО_УМОЛЧАНИЮ);
	~this();	
	final УШрифт указатель() ;
	final ЕдиницаГрафики unit() ;
	final float размер();
	final float дайРазмер(ЕдиницаГрафики unit);
	final float дайРазмер(ЕдиницаГрафики unit, Графика з);	
	final СтильШрифта стиль();
	final Ткст имя() ;
	final ббайт гарнитураГди();
}

extern(D) class Перо // docmain
{
	this(УПеро hp, бул owned = да);
	this(Цвет цвет, цел ширина = 1, ПСтильПера ps = ПСтильПера.Сплошной);
	~this();
	final УПеро указатель();
}


extern(D) class Кисть // docmain
{

	this(УКисть hb, бул owned = да);
	protected this();	
	~this();	
	final УКисть указатель();
}


extern(D) class ПлотнаяКисть: Кисть // docmain
{
	this(Цвет ктрл);
	final Цвет цвет();
}

extern(D) class HatchBrush: Кисть // docmain
{
	this(HatchStyle hs, Цвет ктрл);
	final Цвет foregroundColor();
	final HatchStyle hatchStyle();
}


extern(D) class Регион // docmain
{
	this(HRGN hrgn, бул owned = да);
	~this();
	final HRGN указатель();
	override т_рав opEquals(Объект o);
	т_рав opEquals(Регион rgn);
}

