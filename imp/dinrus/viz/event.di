//Автор Кристофер Миллер. Переработано для Динрус Виталием Кулич.
//Библиотека визуальных конпонентов VIZ (первоначально DFL).

module viz.event;
import tpl.traits, viz.control, viz.common;

// Create an событие обработчик; old стиль.
deprecated template Событие(TArgs : АргиСоб = АргиСоб)
{
	alias Событие!(Объект, TArgs) Событие;
}

/** Managing событие обработчики.
    Параметры:
		T1 = the отправитель тип.
		T2 = the событие arguments тип.
**/
template Событие(T1, T2) // docmain
{
	/// Managing событие обработчики.
	struct Событие // docmain
	{
		alias проц delegate(T1, T2) Обработчик; /// Событие обработчик тип.
		
		
		/// Add an событие обработчик with the exact тип.
		проц добавитьСоответствОбработчик(Обработчик обработчик)
		in
		{
			assert(обработчик);
		}
		body
		{
			if(!_массив.length)
			{
				_массив = new Обработчик[2];
				_массив[1] = обработчик;
				охлади();
			}
			else
			{
				if(!горяч_ли())
				{
					_массив ~= обработчик;
				}
				else // Hot.
				{
					_массив = _массив ~ (&обработчик)[0 .. 1]; // Force duplicate.
					охлади();
				}
			}
		}
		
		
		/// Add an событие обработчик with parameter contravariance.
		проц добавитьОбработчик(TDG)(TDG обработчик)
		in
		{
			assert(обработчик);
		}
		body
		{
			mixin _оцениОбработчик!(TDG);
			
			добавитьСоответствОбработчик(cast(Обработчик)обработчик);
		}
		
		
		/// Shortcut for добавитьОбработчик().
		проц opCatAssign(TDG)(TDG обработчик)
		{
			добавитьОбработчик!(TDG)(обработчик);
		}
		
		
		/// Remove the задано событие обработчик with the exact Обработчик тип.
		проц удалитьОбработчикСоответствующе(Обработчик обработчик)
		{
			if(!_массив.length)
				return;
			
			т_мера iw;
			for(iw = 1; iw != _массив.length; iw++)
			{
				if(обработчик == _массив[iw])
				{
					if(iw == 1 && _массив.length == 2)
					{
						_массив = пусто;
						break;
					}
					
					if(iw == _массив.length - 1)
					{
						_массив[iw] = пусто;
						_массив = _массив[0 .. iw];
						break;
					}
					
					if(!горяч_ли())
					{
						_массив[iw] = _массив[_массив.length - 1];
						_массив[_массив.length - 1] = пусто;
						_массив = _массив[0 .. _массив.length - 1];
					}
					else // Hot.
					{
						_массив = _массив[0 .. iw] ~ _массив[iw + 1 .. _массив.length]; // Force duplicate.
						охлади();
					}
					break;
				}
			}
		}
		
		
		/// Remove the задано событие обработчик with parameter contravariance.
		проц удалиОбработчик(TDG)(TDG обработчик)
		{
			mixin _оцениОбработчик!(TDG);
			
			удалитьОбработчикСоответствующе(cast(Обработчик)обработчик);
		}
		
		
		/// Fire the событие обработчики.
		проц opCall(T1 v1, T2 v2)
		{
			if(!_массив.length)
				return;
			установиГорячим();
			
			Обработчик[] local;
			local = _массив[1 .. _массив.length];
			foreach(Обработчик обработчик; local)
			{
				обработчик(v1, v2);
			}
			
			if(!_массив.length)
				return;
			охлади();
		}
		
		
				цел opApply(цел delegate(Обработчик) дг)
		{
			if(!_массив.length)
				return 0;
			установиГорячим();
			
			цел результат = 0;
			
			Обработчик[] local;
			local = _массив[1 .. _массив.length];
			foreach(Обработчик обработчик; local)
			{
				результат = дг(обработчик);
				if(результат)
					break;
			}
			
			if(_массив.length)
				охлади();
			
			return результат;
		}
		
		
				бул hasHandlers() // getter
		{
			return _массив.length > 1;
		}
		
		
		// Use opApply and hasHandlers instead.
		deprecated Обработчик[] обработчики() // getter
		{
			if(!hasHandlers)
				return пусто;
			return _массив[1 .. _массив.length].dup; // Because _массив can be изменён. Function is deprecated anyway.
		}
		
		
		private:
		Обработчик[] _массив; // Not what it seems.
		
		
		проц установиГорячим()
		{
			assert(_массив.length);
			_массив[0] = cast(Обработчик)&установиГорячим; // Non-пусто, GC friendly.
		}
		
		
		проц охлади()
		{
			assert(_массив.length);
			_массив[0] = пусто;
		}
		
		
		Обработчик горяч_ли()
		{
			assert(_массив.length);
			return _массив[0];
		}
		
		
		// Thanks to Tomasz "h3r3tic" Stachowiak for his assistance.
		template _оцениОбработчик(TDG)
		{
			static assert(is(TDG == delegate), "viz: Обработчик события должен быть делегатом");
			
			alias КортежТипаПараметров!(TDG) TDGParams;
			static assert(TDGParams.length == 2, "viz: Обработчику событий требуется ровно 2 параметра");
			
			static if(is(TDGParams[0] : Объект))
			{
				static assert(is(T1: TDGParams[0]), "viz: Параметр 1 обработчика события не соответствует типу");
			}
			else
			{
				static assert(is(T1 == TDGParams[0]), "viz: Параметр 1 обработчика события не соответствует типу");
			}
			
			static if(is(TDGParams[1] : Объект))
			{
				static assert(is(T2 : TDGParams[1]), "viz: Параметр 2 обработчика события не соответствует типу");
			}
			else
			{
				static assert(is(T2 == TDGParams[1]), "viz: Параметр 2 обработчика события не соответствует типу");
			}
		}
	}
}


extern(D) class АргиСоб 
{	
	static this();
	static АргиСоб пуст();
}

// Simple событие обработчик.
alias Событие!(Объект, АргиСоб) СобОбработчик; // deprecated


extern(D) class АргиСобИсклНити: АргиСоб
{
	this(Объект исключение);	
	final Объект исключение();
}

//////////////////////
extern(D) class АргиСобУпрЭлта: АргиСоб
{
		this(УпрЭлт упрэлм);
		final УпрЭлт упрэлт();
}

extern(D)  class АргиСобСправка: АргиСоб
{
	this(Точка позМыши);
	final проц обрабатывается(бул подтвержд);	
	final бул обрабатывается();	
	final Точка позМыши();
}

extern(D)  class АргиСобИнвалидировать: АргиСоб
{
	this(Прям невернПрям);
	final Прям невернПрям();
}


 extern(D) class АргиСобРасположение: АргиСоб
{
	this(УпрЭлт задействованныйУпрэлт);
	final УпрЭлт задействованныйУпрэлт();
}

extern(D) class АргиСобДрэг: АргиСоб
	{
	this(ИОбъектДанных объДанных, цел состКл, цел ш, цел в,	ПЭффектыДД разрешённыйЭффект, ПЭффектыДД эффект);
	final ПЭффектыДД разрешённыйЭффект();
	final проц эффект(ПЭффектыДД новыйЭффект);
	final ПЭффектыДД эффект();
	final ИОбъектДанных данные();
	final цел состКл();
	final цел ш();
	final цел в();
	}
	
extern(D) class АргиСобФидбэк: АргиСоб
	{
	this(ПЭффектыДД эффект, бул испДефКурсоры);
	final ПЭффектыДД эффект();
	final проц испДефКурсоры(бул подтвержд);	
	final бул испДефКурсоры();
	}
	
extern (D) class АргиСобДрэгОпросПродолжить: АргиСоб
	{
	this(цел состКл, бул нажатИскейп, ПДрэгДействие действие);
	final проц действие(ПДрэгДействие новДействие) ;
	final ПДрэгДействие действие() ;
	final бул нажатИскейп();
	final цел состКл();
	}
//////////////////////////////////////
extern(D) class АргиСобРис: АргиСоб
{
	this(Графика графика, Прям клипПрям);
	final Графика графика();	
	final Прям клипПрямоугольник();
}

extern(D) class АргиСобОтмены: АргиСоб
{
	this();
	this(бул отмена);	
	final проц отмена(бул подтвержд);
	final бул отмена();
}

extern(D) class АргиСобКлавиш: АргиСоб
{
	this(ПКлавиши клавиши);	
	final бул альт();	
	final бул упрэлт() ;
	final проц обрабатывается(бул подтвержд) ;	
	final бул обрабатывается() ;		
	final ПКлавиши кодКлавиши();
	final ПКлавиши данныеКлавиши();
	final цел значениеКлавиши();
	final ПКлавиши модификаторы();
	final бул шифт();
}

extern(D) class АргиСобНажатияКлав: АргиСобКлавиш
{
	this(дим ch);	
	this(дим ch, ПКлавиши модификаторы);
	final дим симКлавиши();
}


extern(D) class АргиСобМыши: АргиСоб
{
	this(ПКнопкиМыши кнопка, цел клики, цел ш, цел в, цел дельта);
	final ПКнопкиМыши кнопка();
	final цел клики();
	final цел дельта();
	final цел ш() ;
	final цел в() ;
}

extern(D) class АргиСобКликаСтолбца: АргиСоб
{
	this(цел col);	
	final цел столбец();
}


extern(D) class АргиСобПеретягаДанных: АргиСоб
{
	this(Графика з, Шрифт f, Прям к, цел i, ПСостОтрисовкиЭлемента dis);
	this(Графика з, Шрифт f, Прям к, цел i, ПСостОтрисовкиЭлемента dis, Цвет fc, Цвет bc);
	final Цвет цветФона();
	final Прям границы() ;
	final Шрифт шрифт();
	final Цвет цветПП();
	final Графика графика();
	final цел индекс();
	final ПСостОтрисовкиЭлемента состояние();
	проц рисуйФон();
	проц рисуйПрямФокуса();
}

extern(D) class АргиСобИзмеренияЭлемента: АргиСоб
{
	this(Графика з, цел индекс, цел высотаПункта);
	this(Графика з, цел индекс);
	
	final Графика графика() ;
	final цел индекс();
	final проц высотаПункта(цел высота);
	final цел высотаПункта() ;	
	final проц ширинаЭлемента(цел ширина);
	final цел ширинаЭлемента();
}

extern (D) class АргиСобБыстрЗапускаФормы: АргиСоб
{
	this(ПКлавиши быстрыйЗапуск);
	final ПКлавиши быстрыйЗапуск();
}
