// D import file generated from 'fmodextypes.d'
module derelict.fmod.fmodextypes;
private import derelict.util.compat;

alias int FMOD_BOOL;
struct FMOD_SYSTEM
{
}
struct FMOD_SOUND
{
}
struct FMOD_CHANNEL
{
}
struct FMOD_CHANNELGROUP
{
}
struct FMOD_SOUNDGROUP
{
}
struct FMOD_REVERB
{
}
struct FMOD_DSP
{
}
struct FMOD_DSPCONNECTION
{
}
struct FMOD_POLYGON
{
}
struct FMOD_GEOMETRY
{
}
struct FMOD_SYNCPOINT
{
}
alias uint FMOD_MODE;
alias uint FMOD_TIMEUNIT;
alias uint FMOD_INITFLAGS;
alias uint FMOD_CAPS;
alias uint FMOD_DEBUGLEVEL;
alias uint FMOD_MEMORY_TYPE;
struct FMOD_VECTOR
{
    float x;
    float y;
    float z;
}
struct FMOD_GUID
{
    uint Data1;
    ushort Data2;
    ushort Data3;
    ubyte[8] Data4;
}
alias int FMOD_RESULT;
enum 
{
FMOD_OK,
FMOD_ERR_ALREADYLOCKED,
FMOD_ERR_BADCOMMAND,
FMOD_ERR_CDDA_DRIVERS,
FMOD_ERR_CDDA_INIT,
FMOD_ERR_CDDA_INVALID_DEVICE,
FMOD_ERR_CDDA_NOAUDIO,
FMOD_ERR_CDDA_NODEVICES,
FMOD_ERR_CDDA_NODISC,
FMOD_ERR_CDDA_READ,
FMOD_ERR_CHANNEL_ALLOC,
FMOD_ERR_CHANNEL_STOLEN,
FMOD_ERR_COM,
FMOD_ERR_DMA,
FMOD_ERR_DSP_CONNECTION,
FMOD_ERR_DSP_FORMAT,
FMOD_ERR_DSP_NOTFOUND,
FMOD_ERR_DSP_RUNNING,
FMOD_ERR_DSP_TOOMANYCONNECTIONS,
FMOD_ERR_FILE_BAD,
FMOD_ERR_FILE_COULDNOTSEEK,
FMOD_ERR_FILE_DISKEJECTED,
FMOD_ERR_FILE_EOF,
FMOD_ERR_FILE_NOTFOUND,
FMOD_ERR_FILE_UNWANTED,
FMOD_ERR_FORMAT,
FMOD_ERR_HTTP,
FMOD_ERR_HTTP_ACCESS,
FMOD_ERR_HTTP_PROXY_AUTH,
FMOD_ERR_HTTP_SERVER_ERROR,
FMOD_ERR_HTTP_TIMEOUT,
FMOD_ERR_INITIALIZATION,
FMOD_ERR_INITIALIZED,
FMOD_ERR_INTERNAL,
FMOD_ERR_INVALID_ADDRESS,
FMOD_ERR_INVALID_FLOAT,
FMOD_ERR_INVALID_HANDLE,
FMOD_ERR_INVALID_PARAM,
FMOD_ERR_INVALID_POSITION,
FMOD_ERR_INVALID_SPEAKER,
FMOD_ERR_INVALID_SYNCPOINT,
FMOD_ERR_INVALID_VECTOR,
FMOD_ERR_IRX,
FMOD_ERR_MAXAUDIBLE,
FMOD_ERR_MEMORY,
FMOD_ERR_MEMORY_CANTPOINT,
FMOD_ERR_MEMORY_IOP,
FMOD_ERR_MEMORY_SRAM,
FMOD_ERR_NEEDS2D,
FMOD_ERR_NEEDS3D,
FMOD_ERR_NEEDSHARDWARE,
FMOD_ERR_NEEDSSOFTWARE,
FMOD_ERR_NET_CONNECT,
FMOD_ERR_NET_SOCKET_ERROR,
FMOD_ERR_NET_URL,
FMOD_ERR_NET_WOULD_BLOCK,
FMOD_ERR_NOTREADY,
FMOD_ERR_OUTPUT_ALLOCATED,
FMOD_ERR_OUTPUT_CREATEBUFFER,
FMOD_ERR_OUTPUT_DRIVERCALL,
FMOD_ERR_OUTPUT_ENUMERATION,
FMOD_ERR_OUTPUT_FORMAT,
FMOD_ERR_OUTPUT_INIT,
FMOD_ERR_OUTPUT_NOHARDWARE,
FMOD_ERR_OUTPUT_NOSOFTWARE,
FMOD_ERR_PAN,
FMOD_ERR_PLUGIN,
FMOD_ERR_PLUGIN_INSTANCES,
FMOD_ERR_PLUGIN_MISSING,
FMOD_ERR_PLUGIN_RESOURCE,
FMOD_ERR_PRELOADED,
FMOD_ERR_PROGRAMMERSOUND,
FMOD_ERR_RECORD,
FMOD_ERR_REVERB_INSTANCE,
FMOD_ERR_SUBSOUND_ALLOCATED,
FMOD_ERR_SUBSOUND_CANTMOVE,
FMOD_ERR_SUBSOUND_MODE,
FMOD_ERR_SUBSOUNDS,
FMOD_ERR_TAGNOTFOUND,
FMOD_ERR_TOOMANYCHANNELS,
FMOD_ERR_UNIMPLEMENTED,
FMOD_ERR_UNINITIALIZED,
FMOD_ERR_UNSUPPORTED,
FMOD_ERR_UPDATE,
FMOD_ERR_VERSION,
FMOD_ERR_EVENT_FAILED,
FMOD_ERR_EVENT_INFOONLY,
FMOD_ERR_EVENT_INTERNAL,
FMOD_ERR_EVENT_MAXSTREAMS,
FMOD_ERR_EVENT_MISMATCH,
FMOD_ERR_EVENT_NAMECONFLICT,
FMOD_ERR_EVENT_NOTFOUND,
FMOD_ERR_EVENT_NEEDSSIMPLE,
FMOD_ERR_EVENT_GUIDCONFLICT,
FMOD_ERR_EVENT_ALREADY_LOADED,
FMOD_ERR_MUSIC_UNINITIALIZED,
FMOD_ERR_MUSIC_NOTFOUND,
FMOD_ERR_MUSIC_NOCALLBACK,
}
alias int FMOD_OUTPUTTYPE;
enum 
{
FMOD_OUTPUTTYPE_AUTODETECT,
FMOD_OUTPUTTYPE_UNKNOWN,
FMOD_OUTPUTTYPE_NOSOUND,
FMOD_OUTPUTTYPE_WAVWRITER,
FMOD_OUTPUTTYPE_NOSOUND_NRT,
FMOD_OUTPUTTYPE_WAVWRITER_NRT,
FMOD_OUTPUTTYPE_DSOUND,
FMOD_OUTPUTTYPE_WINMM,
FMOD_OUTPUTTYPE_OPENAL,
FMOD_OUTPUTTYPE_WASAPI,
FMOD_OUTPUTTYPE_ASIO,
FMOD_OUTPUTTYPE_OSS,
FMOD_OUTPUTTYPE_ALSA,
FMOD_OUTPUTTYPE_ESD,
FMOD_OUTPUTTYPE_COREAUDIO,
FMOD_OUTPUTTYPE_PS2,
FMOD_OUTPUTTYPE_PS3,
FMOD_OUTPUTTYPE_XBOX360,
FMOD_OUTPUTTYPE_PSP,
FMOD_OUTPUTTYPE_WII,
FMOD_OUTPUTTYPE_MAX,
}
enum 
{
FMOD_CAPS_NONE = 0,
FMOD_CAPS_HARDWARE = 1,
FMOD_CAPS_HARDWARE_EMULATED = 2,
FMOD_CAPS_OUTPUT_MULTICHANNEL = 4,
FMOD_CAPS_OUTPUT_FORMAT_PCM8 = 8,
FMOD_CAPS_OUTPUT_FORMAT_PCM16 = 16,
FMOD_CAPS_OUTPUT_FORMAT_PCM24 = 32,
FMOD_CAPS_OUTPUT_FORMAT_PCM32 = 64,
FMOD_CAPS_OUTPUT_FORMAT_PCMFLOAT = 128,
FMOD_CAPS_REVERB_EAX2 = 256,
FMOD_CAPS_REVERB_EAX3 = 512,
FMOD_CAPS_REVERB_EAX4 = 1024,
FMOD_CAPS_REVERB_EAX5 = 2048,
FMOD_CAPS_REVERB_I3DL2 = 4096,
FMOD_CAPS_REVERB_LIMITED = 8192,
}
enum 
{
FMOD_DEBUG_LEVEL_NONE = 0,
FMOD_DEBUG_LEVEL_LOG = 1,
FMOD_DEBUG_LEVEL_ERROR = 2,
FMOD_DEBUG_LEVEL_WARNING = 4,
FMOD_DEBUG_LEVEL_HINT = 8,
FMOD_DEBUG_LEVEL_ALL = 255,
FMOD_DEBUG_TYPE_MEMORY = 256,
FMOD_DEBUG_TYPE_THREAD = 512,
FMOD_DEBUG_TYPE_FILE = 1024,
FMOD_DEBUG_TYPE_NET = 2048,
FMOD_DEBUG_TYPE_EVENT = 4096,
FMOD_DEBUG_TYPE_ALL = 65535,
FMOD_DEBUG_DISPLAY_TIMESTAMPS = 16777216,
FMOD_DEBUG_DISPLAY_LINENUMBERS = 33554432,
FMOD_DEBUG_DISPLAY_COMPRESS = 67108864,
FMOD_DEBUG_DISPLAY_THREAD = 134217728,
FMOD_DEBUG_DISPLAY_ALL = 251658240,
FMOD_DEBUG_ALL = -1u,
}
enum 
{
FMOD_MEMORY_NORMAL = 0,
FMOD_MEMORY_STREAM_FILE = 1,
FMOD_MEMORY_STREAM_DECODE = 2,
FMOD_MEMORY_XBOX360_PHYSICAL = 1048576,
FMOD_MEMORY_PERSISTENT = 2097152,
FMOD_MEMORY_SECONDARY = 4194304,
FMOD_MEMORY_ALL = -1u,
}
alias int FMOD_SPEAKERMODE;
enum 
{
FMOD_SPEAKERMODE_RAW,
FMOD_SPEAKERMODE_MONO,
FMOD_SPEAKERMODE_STEREO,
FMOD_SPEAKERMODE_QUAD,
FMOD_SPEAKERMODE_SURROUND,
FMOD_SPEAKERMODE_5POINT1,
FMOD_SPEAKERMODE_7POINT1,
FMOD_SPEAKERMODE_PROLOGIC,
FMOD_SPEAKERMODE_MAX,
}
alias int FMOD_SPEAKER;
enum 
{
FMOD_SPEAKER_FRONT_LEFT,
FMOD_SPEAKER_FRONT_RIGHT,
FMOD_SPEAKER_FRONT_CENTER,
FMOD_SPEAKER_LOW_FREQUENCY,
FMOD_SPEAKER_BACK_LEFT,
FMOD_SPEAKER_BACK_RIGHT,
FMOD_SPEAKER_SIDE_LEFT,
FMOD_SPEAKER_SIDE_RIGHT,
FMOD_SPEAKER_MAX,
FMOD_SPEAKER_MONO = FMOD_SPEAKER_FRONT_LEFT,
FMOD_SPEAKER_NULL = FMOD_SPEAKER_MAX,
FMOD_SPEAKER_SBL = FMOD_SPEAKER_SIDE_LEFT,
FMOD_SPEAKER_SBR = FMOD_SPEAKER_SIDE_RIGHT,
}
alias int FMOD_PLUGINTYPE;
enum 
{
FMOD_PLUGINTYPE_OUTPUT,
FMOD_PLUGINTYPE_CODEC,
FMOD_PLUGINTYPE_DSP,
FMOD_PLUGINTYPE_MAX,
}
enum 
{
FMOD_INIT_NORMAL = 0,
FMOD_INIT_STREAM_FROM_UPDATE = 1,
FMOD_INIT_3D_RIGHTHANDED = 2,
FMOD_INIT_SOFTWARE_DISABLE = 4,
FMOD_INIT_SOFTWARE_OCCLUSION = 8,
FMOD_INIT_SOFTWARE_HRTF = 16,
FMOD_INIT_SOFTWARE_REVERB_LOWMEM = 64,
FMOD_INIT_ENABLE_PROFILE = 32,
FMOD_INIT_VOL0_BECOMES_VIRTUAL = 128,
FMOD_INIT_WASAPI_EXCLUSIVE = 256,
FMOD_INIT_DSOUND_HRTFNONE = 512,
FMOD_INIT_DSOUND_HRTFLIGHT = 1024,
FMOD_INIT_DSOUND_HRTFFULL = 2048,
FMOD_INIT_PS2_DISABLECORE0REVERB = 65536,
FMOD_INIT_PS2_DISABLECORE1REVERB = 131072,
FMOD_INIT_PS2_DONTUSESCRATCHPAD = 262144,
FMOD_INIT_PS2_SWAPDMACHANNELS = 524288,
FMOD_INIT_PS3_PREFERDTS = 8388608,
FMOD_INIT_PS3_FORCE2CHLPCM = 16777216,
FMOD_INIT_XBOX_REMOVEHEADROOM = 1048576,
FMOD_INIT_SYSTEM_MUSICMUTENOTPAUSE = 2097152,
FMOD_INIT_SYNCMIXERWITHUPDATE = 4194304,
FMOD_INIT_DTS_NEURALSURROUND = 33554432,
FMOD_INIT_GEOMETRY_USECLOSEST = 67108864,
FMOD_INIT_DISABLE_MYEARS = 134217728,
}
alias int FMOD_SOUND_TYPE;
enum 
{
FMOD_SOUND_TYPE_UNKNOWN,
FMOD_SOUND_TYPE_AAC,
FMOD_SOUND_TYPE_AIFF,
FMOD_SOUND_TYPE_ASF,
FMOD_SOUND_TYPE_AT3,
FMOD_SOUND_TYPE_CDDA,
FMOD_SOUND_TYPE_DLS,
FMOD_SOUND_TYPE_FLAC,
FMOD_SOUND_TYPE_FSB,
FMOD_SOUND_TYPE_GCADPCM,
FMOD_SOUND_TYPE_IT,
FMOD_SOUND_TYPE_MIDI,
FMOD_SOUND_TYPE_MOD,
FMOD_SOUND_TYPE_MPEG,
FMOD_SOUND_TYPE_OGGVORBIS,
FMOD_SOUND_TYPE_PLAYLIST,
FMOD_SOUND_TYPE_RAW,
FMOD_SOUND_TYPE_S3M,
FMOD_SOUND_TYPE_SF2,
FMOD_SOUND_TYPE_USER,
FMOD_SOUND_TYPE_WAV,
FMOD_SOUND_TYPE_XM,
FMOD_SOUND_TYPE_XMA,
FMOD_SOUND_TYPE_VAG,
FMOD_SOUND_TYPE_MAX,
}
alias int FMOD_SOUND_FORMAT;
enum 
{
FMOD_SOUND_FORMAT_NONE,
FMOD_SOUND_FORMAT_PCM8,
FMOD_SOUND_FORMAT_PCM16,
FMOD_SOUND_FORMAT_PCM24,
FMOD_SOUND_FORMAT_PCM32,
FMOD_SOUND_FORMAT_PCMFLOAT,
FMOD_SOUND_FORMAT_GCADPCM,
FMOD_SOUND_FORMAT_IMAADPCM,
FMOD_SOUND_FORMAT_VAG,
FMOD_SOUND_FORMAT_XMA,
FMOD_SOUND_FORMAT_MPEG,
FMOD_SOUND_FORMAT_CELT,
FMOD_SOUND_FORMAT_MAX,
}
enum 
{
FMOD_DEFAULT = 0,
FMOD_LOOP_OFF = 1,
FMOD_LOOP_NORMAL = 2,
FMOD_LOOP_BIDI = 4,
FMOD_2D = 8,
FMOD_3D = 16,
FMOD_HARDWARE = 32,
FMOD_SOFTWARE = 64,
FMOD_CREATESTREAM = 128,
FMOD_CREATESAMPLE = 256,
FMOD_CREATECOMPRESSEDSAMPLE = 512,
FMOD_OPENUSER = 1024,
FMOD_OPENMEMORY = 2048,
FMOD_OPENMEMORY_POINT = 268435456,
FMOD_OPENRAW = 4096,
FMOD_OPENONLY = 8192,
FMOD_ACCURATETIME = 16384,
FMOD_MPEGSEARCH = 32768,
FMOD_NONBLOCKING = 65536,
FMOD_UNIQUE = 131072,
FMOD_3D_HEADRELATIVE = 262144,
FMOD_3D_WORLDRELATIVE = 524288,
FMOD_3D_LOGROLLOFF = 1048576,
FMOD_3D_LINEARROLLOFF = 2097152,
FMOD_3D_CUSTOMROLLOFF = 67108864,
FMOD_3D_IGNOREGEOMETRY = 1073741824,
FMOD_CDDA_FORCEASPI = 4194304,
FMOD_CDDA_JITTERCORRECT = 8388608,
FMOD_UNICODE = 16777216,
FMOD_IGNORETAGS = 33554432,
FMOD_LOWMEM = 134217728,
FMOD_LOADSECONDARYRAM = 536870912,
FMOD_VIRTUAL_PLAYFROMSTART = -2147483648u,
}
alias int FMOD_OPENSTATE;
enum 
{
FMOD_OPENSTATE_READY = 0,
FMOD_OPENSTATE_LOADING,
FMOD_OPENSTATE_ERROR,
FMOD_OPENSTATE_CONNECTING,
FMOD_OPENSTATE_BUFFERING,
FMOD_OPENSTATE_SEEKING,
FMOD_OPENSTATE_STREAMING,
FMOD_OPENSTATE_SETPOSITION,
FMOD_OPENSTATE_MAX,
}
alias int FMOD_SOUNDGROUP_BEHAVIOR;
enum 
{
FMOD_SOUNDGROUP_BEHAVIOR_FAIL,
FMOD_SOUNDGROUP_BEHAVIOR_MUTE,
FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST,
FMOD_SOUNDGROUP_BEHAVIOR_MAX,
}
alias int FMOD_CHANNEL_CALLBACKTYPE;
enum 
{
FMOD_CHANNEL_CALLBACKTYPE_END,
FMOD_CHANNEL_CALLBACKTYPE_VIRTUALVOICE,
FMOD_CHANNEL_CALLBACKTYPE_SYNCPOINT,
FMOD_CHANNEL_CALLBACKTYPE_OCCLUSION,
FMOD_CHANNEL_CALLBACKTYPE_MAX,
}
alias int FMOD_SYSTEM_CALLBACKTYPE;
enum 
{
FMOD_SYSTEM_CALLBACKTYPE_DEVICELISTCHANGED,
FMOD_SYSTEM_CALLBACKTYPE_MEMORYALLOCATIONFAILED,
FMOD_SYSTEM_CALLBACKTYPE_THREADCREATED,
FMOD_SYSTEM_CALLBACKTYPE_BADDSPCONNECTION,
FMOD_SYSTEM_CALLBACKTYPE_BADDSPLEVEL,
FMOD_SYSTEM_CALLBACKTYPE_MAX,
}
extern (C) 
{
    alias FMOD_RESULT function(FMOD_SYSTEM*, FMOD_SYSTEM_CALLBACKTYPE, void*, void*) FMOD_SYSTEM_CALLBACK;
    alias FMOD_RESULT function(FMOD_CHANNEL*, FMOD_CHANNEL_CALLBACKTYPE, void*, void*) FMOD_CHANNEL_CALLBACK;
    alias FMOD_RESULT function(FMOD_SOUND*, FMOD_RESULT) FMOD_SOUND_NONBLOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_SOUND*, void*, uint) FMOD_SOUND_PCMREADCALLBACK;
    alias FMOD_RESULT function(FMOD_SOUND*, int, uint, FMOD_TIMEUNIT) FMOD_SOUND_PCMSETPOSCALLBACK;
    alias FMOD_RESULT function(CCPTR, int, uint, uint*, void**, void**) FMOD_FILE_OPENCALLBACK;
    alias FMOD_RESULT function(void*, void*) FMOD_FILE_CLOSECALLBACK;
    alias FMOD_RESULT function(void*, void*, uint, uint*, void*) FMOD_FILE_READCALLBACK;
    alias FMOD_RESULT function(void*, uint, void*) FMOD_FILE_SEEKCALLBACK;
    alias void* function(uint, FMOD_MEMORY_TYPE) FMOD_MEMORY_ALLOCCALLBACK;
    alias void* function(void*, uint, FMOD_MEMORY_TYPE) FMOD_MEMORY_REALLOCALLBACK;
    alias void function(void*, FMOD_MEMORY_TYPE) FMOD_MEMORY_FREECALLBACK;
    alias float function(FMOD_CHANNEL*, float) FMOD_3D_ROLLOFFCALLBACK;
}
alias int FMOD_DSP_FFT_WINDOW;
enum 
{
FMOD_DSP_FFT_WINDOW_RECT,
FMOD_DSP_FFT_WINDOW_TRIANGLE,
FMOD_DSP_FFT_WINDOW_HAMMING,
FMOD_DSP_FFT_WINDOW_HANNING,
FMOD_DSP_FFT_WINDOW_BLACKMAN,
FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS,
FMOD_DSP_FFT_WINDOW_MAX,
}
alias int FMOD_DSP_RESAMPLER;
enum 
{
FMOD_DSP_RESAMPLER_NOINTERP,
FMOD_DSP_RESAMPLER_LINEAR,
FMOD_DSP_RESAMPLER_CUBIC,
FMOD_DSP_RESAMPLER_SPLINE,
FMOD_DSP_RESAMPLER_MAX,
}
alias int FMOD_TAGTYPE;
enum 
{
FMOD_TAGTYPE_UNKNOWN = 0,
FMOD_TAGTYPE_ID3V1,
FMOD_TAGTYPE_ID3V2,
FMOD_TAGTYPE_VORBISCOMMENT,
FMOD_TAGTYPE_SHOUTCAST,
FMOD_TAGTYPE_ICECAST,
FMOD_TAGTYPE_ASF,
FMOD_TAGTYPE_MIDI,
FMOD_TAGTYPE_PLAYLIST,
FMOD_TAGTYPE_FMOD,
FMOD_TAGTYPE_USER,
FMOD_TAGTYPE_MAX,
}
alias int FMOD_TAGDATATYPE;
enum 
{
FMOD_TAGDATATYPE_BINARY = 0,
FMOD_TAGDATATYPE_INT,
FMOD_TAGDATATYPE_FLOAT,
FMOD_TAGDATATYPE_STRING,
FMOD_TAGDATATYPE_STRING_UTF16,
FMOD_TAGDATATYPE_STRING_UTF16BE,
FMOD_TAGDATATYPE_STRING_UTF8,
FMOD_TAGDATATYPE_CDTOC,
FMOD_TAGDATATYPE_MAX,
}
alias int FMOD_DELAYTYPE;
enum 
{
FMOD_DELAYTYPE_END_MS,
FMOD_DELAYTYPE_DSPCLOCK_START,
FMOD_DELAYTYPE_DSPCLOCK_END,
FMOD_DELAYTYPE_DSPCLOCK_PAUSE,
FMOD_DELAYTYPE_MAX,
}
struct FMOD_TAG
{
    FMOD_TAGTYPE type;
    FMOD_TAGDATATYPE datatype;
    char* name;
    void* data;
    uint datalen;
    FMOD_BOOL updated;
}
struct FMOD_CDTOC
{
    int numtracks;
    int[100] min;
    int[100] sec;
    int[100] frame;
}
enum 
{
FMOD_TIMEUNIT_MS = 1,
FMOD_TIMEUNIT_PCM = 2,
FMOD_TIMEUNIT_PCMBYTES = 4,
FMOD_TIMEUNIT_RAWBYTES = 8,
FMOD_TIMEUNIT_MODORDER = 256,
FMOD_TIMEUNIT_MODROW = 512,
FMOD_TIMEUNIT_MODPATTERN = 1024,
FMOD_TIMEUNIT_SENTENCE_MS = 65536,
FMOD_TIMEUNIT_SENTENCE_PCM = 131072,
FMOD_TIMEUNIT_SENTENCE_PCMBYTES = 262144,
FMOD_TIMEUNIT_SENTENCE = 524288,
FMOD_TIMEUNIT_SENTENCE_SUBSOUND = 1048576,
FMOD_TIMEUNIT_BUFFERED = 268435456,
}
alias int FMOD_SPEAKERMAPTYPE;
enum 
{
FMOD_SPEAKERMAPTYPE_DEFAULT,
FMOD_SPEAKERMAPTYPE_ALLMONO,
FMOD_SPEAKERMAPTYPE_ALLSTEREO,
FMOD_SPEAKERMAPTYPE_51_PROTOOLS,
}
struct FMOD_CREATESOUNDEXINFO
{
    int cbsize;
    uint length;
    uint fileoffset;
    int numchannels;
    int defaultfrequency;
    FMOD_SOUND_FORMAT format;
    uint decodebuffersize;
    int initialsubsound;
    int numsubsounds;
    int* inclusionlist;
    int inclusionlistnum;
    FMOD_SOUND_PCMREADCALLBACK pcmreadcallback;
    FMOD_SOUND_PCMSETPOSCALLBACK pcmsetposcallback;
    FMOD_SOUND_NONBLOCKCALLBACK nonblockcallback;
    CCPTR dlsname;
    CCPTR encryptionkey;
    int maxpolyphony;
    void* userdata;
    FMOD_SOUND_TYPE suggestedsoundtype;
    FMOD_FILE_OPENCALLBACK useropen;
    FMOD_FILE_CLOSECALLBACK userclose;
    FMOD_FILE_READCALLBACK userread;
    FMOD_FILE_SEEKCALLBACK userseek;
    FMOD_SPEAKERMAPTYPE speakermap;
    FMOD_SOUNDGROUP* initialsoundgroup;
    uint initialseekposition;
    FMOD_TIMEUNIT initialseekpostype;
    int ignoresetfilesystem;
}
struct FMOD_REVERB_PROPERTIES
{
    int Instance;
    int Envrionment;
    float EnvSize;
    float EnvDiffusion;
    int Room;
    int RoomHF;
    int RoomLF;
    float DecayTime;
    float DecayHFRatio;
    float DecayLFRatio;
    int Reflections;
    float ReflectionsDelay;
    float[3] ReflectionsPan;
    int Reverb;
    float ReverbDelay;
    float[3] ReverbPan;
    float EchoTime;
    float EchoDepth;
    float ModulationTime;
    float ModulationDepth;
    float AirAborptionHF;
    float HFReference;
    float LFReference;
    float RoomRolloffFactor;
    float Diffusion;
    float Density;
    uint Flags;
}
enum 
{
FMOD_REVERB_FLAGS_DECAYTIMESCALE = 1,
FMOD_REVERB_FLAGS_REFLECTIONSSCALE = 2,
FMOD_REVERB_FLAGS_REFLECTIONSDELAYSCALE = 4,
FMOD_REVERB_FLAGS_REVERBSCALE = 8,
FMOD_REVERB_FLAGS_REVERBDELAYSCALE = 16,
FMOD_REVERB_FLAGS_DECAYHFLIMIT = 32,
FMOD_REVERB_FLAGS_ECHOTIMESCALE = 64,
FMOD_REVERB_FLAGS_MODULATIONTIMESCALE = 128,
FMOD_REVERB_FLAGS_CORE0 = 256,
FMOD_REVERB_FLAGS_CORE1 = 512,
FMOD_REVERB_FLAGS_HIGHQUALITYREVERB = 1024,
FMOD_REVERB_FLAGS_HIGHQUALITYDPL2REVERB = 2048,
FMOD_REVERB_FLAGS_DEFAULT = FMOD_REVERB_FLAGS_DECAYTIMESCALE | FMOD_REVERB_FLAGS_REFLECTIONSSCALE | FMOD_REVERB_FLAGS_REFLECTIONSDELAYSCALE | FMOD_REVERB_FLAGS_REVERBSCALE | FMOD_REVERB_FLAGS_REVERBDELAYSCALE | FMOD_REVERB_FLAGS_DECAYHFLIMIT | FMOD_REVERB_FLAGS_CORE0 | FMOD_REVERB_FLAGS_CORE1,
}
const FMOD_REVERB_PROPERTIES FMOD_PRESET_OFF = {0,-1,7.5F,1F,-10000,-10000,0,1F,1F,1F,-2602,0.007F,[0F,0F,0F],200,0.011F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,0F,0F,831};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_GENERIC = {0,0,7.5F,1F,-1000,-100,0,1.49F,0.83F,1F,-2602,0.007F,[0F,0F,0F],200,0.011F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_PADDEDCELL = {0,1,1.4F,1F,-1000,-6000,0,0.17F,0x1.9999999999999998p-4F,1F,-1204,0.001F,[0F,0F,0F],207,0.002F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_ROOM = {0,2,1.9F,1F,-1000,-454,0,0x1.9999999999999998p-2F,0.83F,1F,-1646,0.002F,[0F,0F,0F],53,0.003F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_BATHROOM = {0,3,1.4F,1F,-1000,-1200,0,1.49F,0.54F,1F,-370,0.007F,[0F,0F,0F],1030,0.011F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,60F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_LIVINGROOM = {0,4,2.5F,1F,-1000,-6000,0,0.5F,0x1.9999999999999998p-4F,1F,-1376,0.003F,[0F,0F,0F],-1104,0.004F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_STONEROOM = {0,5,11.6F,1F,-1000,-300,0,2.31F,0.64F,1F,-711,0.012F,[0F,0F,0F],83,0.017F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_AUDITORIUM = {0,6,21.6F,1F,-1000,-476,0,4.32F,0.59F,1F,-789,0.02F,[0F,0F,0F],-289,0.03F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_CONCERTHALL = {0,7,19.6F,1F,-1000,-500,0,3.92F,0.7F,1F,-1230,0.02F,[0F,0F,0F],-2,0.029F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_CAVE = {0,8,14.6F,1F,-1000,0,0,2.91F,0x1.4cccccccccccccccp+0F,1F,-602,0.015F,[0F,0F,0F],-302,0.022F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,31};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_ARENA = {0,9,36.2F,1F,-1000,-698,0,7.24F,0.33F,1F,-1166,0.02F,[0F,0F,0F],16,0.03F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_HANGAR = {0,10,50.3F,1F,-1000,-1000,0,10.05F,0.23F,1F,-602,0.02F,[0F,0F,0F],198,0.03F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_CARPETTEDHALLWAY = {0,11,1.9F,1F,-1000,-4000,0,0x1.3333333333333332p-2F,0x1.9999999999999998p-4F,1F,-1831,0.002F,[0F,0F,0F],-1630,0.03F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_HALLWAY = {0,12,1.8F,1F,-1000,-300,0,1.49F,0.59F,1F,-1219,0.007F,[0F,0F,0F],441,0.011F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_STONECORRIDOR = {0,13,13.5F,1F,-1000,-237,0,2.7F,0.79F,1F,-1214,0.013F,[0F,0F,0F],395,0.02F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_ALLEY = {0,14,7.5F,0x1.3333333333333332p-2F,-1000,-270,0,1.49F,0.86F,1F,-1204,0.007F,[0F,0F,0F],-4,0.011F,[0F,0F,0F],0.125F,0.95F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_FOREST = {0,15,38F,0x1.3333333333333332p-2F,-1000,-3300,0,1.49F,0.54F,1F,-2560,0.162F,[0F,0F,0F],-229,0.088F,[0F,0F,0F],0.125F,1F,0.25F,0F,-5F,5000F,250F,0F,79F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_CITY = {0,16,7.5F,0.5F,-1000,-800,0,1.49F,0.67F,1F,-2273,0.007F,[0F,0F,0F],-1691,0.011F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,50F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_MOUNTAINS = {0,17,100F,0.27F,-1000,-2500,0,1.49F,0.21F,1F,-2780,0.3F,[0F,0F,0F],-1434,0.1F,[0F,0F,0F],0.25F,1F,0.25F,0F,-5F,5000F,250F,0F,27F,100F,31};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_QUARRY = {0,18,17.5F,1F,-1000,-1000,0,1.49F,0.83F,1F,-10000,0.061F,[0F,0F,0F],500,0.025F,[0F,0F,0F],0.125F,0.7F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_PLAIN = {0,19,42.5F,0.21F,-1000,-2000,0,1.49F,0.5F,1F,-2466,0.179F,[0F,0F,0F],-1926,0.1F,[0F,0F,0F],0.25F,1F,0.25F,0F,-5F,5000F,250F,0F,21F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_PARKINGLOT = {0,20,8.3F,1F,-1000,0,0,1.65F,1.5F,1F,-1363,0.008F,[0F,0F,0F],-1153,0.012F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,100F,100F,31};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_SEWERPIPE = {0,21,1.7F,0x1.9999999999999998p-1F,-1000,-1000,0,2.81F,0.14F,1F,429,0.014F,[0F,0F,0F],1023,0.021F,[0F,0F,0F],0.25F,0F,0.25F,0F,-5F,5000F,250F,0F,80F,60F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_UNDERWATER = {0,22,1.8F,1F,-1000,-4000,0,1.49F,0x1.9999999999999998p-4F,1F,-449,0.007F,[0F,0F,0F],1700,0.011F,[0F,0F,0F],0.25F,0F,1.18F,0.348F,-5F,5000F,250F,0F,100F,100F,63};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_DRUGGED = {0,23,1.9F,0.5F,-1000,0,0,8.39F,1.39F,1F,-115,0.002F,[0F,0F,0F],985,0.03F,[0F,0F,0F],0.25F,0F,0.25F,1F,-5F,5000F,250F,0F,100F,100F,31};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_DIZZY = {0,24,1.8F,0x1.3333333333333332p-1F,-1000,-400,0,17.23F,0.56F,1F,-1713,0.02F,[0F,0F,0F],-613,0.03F,[0F,0F,0F],0.25F,1F,0.81F,0.31F,-5F,5000F,250F,0F,100F,100F,31};

const FMOD_REVERB_PROPERTIES FMOD_PRESET_PSYCHOTIC = {0,25,1F,0.5F,-1000,-151,0,7.56F,0.91F,1F,-626,0.02F,[0F,0F,0F],774,0.03F,[0F,0F,0F],0.25F,0F,4F,1F,-5F,5000F,250F,0F,100F,100F,31};

struct FMOD_REVERB_CHANNELPROPERTIES
{
    int Direct;
    int DirectHF;
    int Room;
    int RoomHF;
    int Obstruction;
    float ObstructionLFRatio;
    int Occlusion;
    float OcclusionLFRatio;
    float OcclusionRoomRatio;
    float OcclusionDirectRatio;
    int Exclusion;
    float ExclusionLFRatio;
    int OutsideVolumeHF;
    float DopplerFactor;
    float RolloffFactor;
    float RoomRolloffFactor;
    float AirAbsorptionFactor;
    uint flags;
    FMOD_DSP* ConnectionPoint;
}
enum 
{
FMOD_REVERB_CHANNELFLAGS_DIRECTHFAUTO = 1,
FMOD_REVERB_CHANNELFLAGS_ROOMAUTO = 2,
FMOD_REVERB_CHANNELFLAGS_ROOMHFAUTO = 4,
FMOD_REVERB_CHANNELFLAGS_INSTANCE0 = 16,
FMOD_REVERB_CHANNELFLAGS_INSTANCE1 = 32,
FMOD_REVERB_CHANNELFLAGS_INSTANCE2 = 64,
FMOD_REVERB_CHANNELFLAGS_INSTANCE3 = 128,
FMOD_REVERB_CHANNELFLAGS_DEFAULT = FMOD_REVERB_CHANNELFLAGS_DIRECTHFAUTO | FMOD_REVERB_CHANNELFLAGS_ROOMAUTO | FMOD_REVERB_CHANNELFLAGS_ROOMHFAUTO | FMOD_REVERB_CHANNELFLAGS_INSTANCE0,
}
struct FMOD_ADVANCEDSETTINGS
{
    int cbsize;
    int maxMPEGcodecs;
    int maxADPcodecs;
    int maxXMAcodecs;
    int maxCELTcodecs;
    int maxPCMcodecs;
    int ASIONumChannels;
    char** ASIOChannelList;
    FMOD_SPEAKER* ASIOSpeakerList;
    int max3DReverbDPS;
    float HRTFMinAngle;
    float HRTFMaxAngle;
    float HRTFFreq;
    float vol0virtualvol;
    int eventqueuesize;
    uint defaultDecodeBufferSize;
    char* debugLogFilename;
    ushort profileport;
    uint geometryMaxFadeTime;
    uint maxSpectrumWaveDataBuffers;
}
alias int FMOD_CHANNELINDEX;
enum 
{
FMOD_CHANNEL_FREE = -1,
FMOD_CHANNEL_REUSE = -2,
}
alias FMOD_RESULT function(FMOD_CODEC_STATE*, FMOD_MODE, FMOD_CREATESOUNDEXINFO*) FMOD_CODEC_OPENCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*) FMOD_CODEC_CLOSECALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, void*, uint, uint*) FMOD_CODEC_READCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, uint*, FMOD_TIMEUNIT) FMOD_CODEC_GETLENGTHCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, uint, FMOD_TIMEUNIT) FMOD_CODEC_SETPOSITIONCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, uint*, FMOD_TIMEUNIT) FMOD_CODEC_GETPOSITIONCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, FMOD_SOUND*) FMOD_CODEC_SOUNDCREATECALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, FMOD_TAGTYPE, char*, void*, uint, FMOD_TAGDATATYPE, int) FMOD_CODEC_METADATACALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, FMOD_CODEC_WAVEFORMAT*) FMOD_CODEC_GETWAVEFORMAT;
struct FMOD_CODEC_DESCRIPTION
{
    CCPTR name;
    uint _version;
    int defaultasstream;
    FMOD_TIMEUNIT timeunits;
    FMOD_CODEC_OPENCALLBACK open;
    FMOD_CODEC_CLOSECALLBACK close;
    FMOD_CODEC_READCALLBACK read;
    FMOD_CODEC_GETLENGTHCALLBACK getlength;
    FMOD_CODEC_SETPOSITIONCALLBACK setposition;
    FMOD_CODEC_GETPOSITIONCALLBACK getposition;
    FMOD_CODEC_SOUNDCREATECALLBACK soundcreate;
    FMOD_CODEC_GETWAVEFORMAT getwaveformat;
}
struct FMOD_CODEC_WAVEFORMAT
{
    char[256] name;
    FMOD_SOUND_FORMAT format;
    int channels;
    int frequency;
    uint lengthbytes;
    uint lengthpcm;
    int blockalign;
    int loopstart;
    int loopend;
    FMOD_MODE mode;
    uint channelmask;
}
struct FMOD_CODEC_STATE
{
    int numsubsounds;
    FMOD_CODEC_WAVEFORMAT* waveformat;
    void* plugindata;
    void* filehandle;
    uint filesize;
    FMOD_FILE_READCALLBACK fileread;
    FMOD_FILE_SEEKCALLBACK fileseek;
    FMOD_CODEC_METADATACALLBACK metadata;
}
extern (C) 
{
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_CREATECALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_RELEASECALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_RESETCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, float*, float*, uint, int, int) FMOD_DSP_READCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, uint) FMOD_DSP_SETPOSITIONCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, int, float) FMOD_DSP_SETPARAMCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, int, float*, char*) FMOD_DSP_GETPARAMCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, void*, int) FMOD_DSP_DIALOGCALLBACK;
}
alias int FMOD_DSP_TYPE;
enum 
{
FMOD_DSP_TYPE_UNKNOWN,
FMOD_DSP_TYPE_MIXER,
FMOD_DSP_TYPE_OSCILLATOR,
FMOD_DSP_TYPE_LOWPASS,
FMOD_DSP_TYPE_ITLOWPASS,
FMOD_DSP_TYPE_HIGHPASS,
FMOD_DSP_TYPE_ECHO,
FMOD_DSP_TYPE_FLANGE,
FMOD_DSP_TYPE_DISTORTION,
FMOD_DSP_TYPE_NORMALIZE,
FMOD_DSP_TYPE_PARAMEQ,
FMOD_DSP_TYPE_PITCHSHIFT,
FMOD_DSP_TYPE_CHORUS,
FMOD_DSP_TYPE_REVERB,
FMOD_DSP_TYPE_VSTPLUGIN,
FMOD_DSP_TYPE_WINAMPPLUGIN,
FMOD_DSP_TYPE_ITECHO,
FMOD_DSP_TYPE_COMPRESSOR,
FMOD_DSP_TYPE_SFXREVERB,
FMOD_DSP_TYPE_LOWPASS_SIMPLE,
FMOD_DSP_TYPE_DELAY,
FMOD_DSP_TYPE_TREMOLO,
}
struct FMOD_DSP_PARAMETERDESC
{
    float min;
    float max;
    float defaultval;
    char[16] name;
    char[16] label;
    CCPTR description;
}
struct FMOD_DSP_DESCRIPTION
{
    char[32] name;
    uint _version;
    int channels;
    FMOD_DSP_CREATECALLBACK create;
    FMOD_DSP_RELEASECALLBACK release;
    FMOD_DSP_RESETCALLBACK reset;
    FMOD_DSP_READCALLBACK read;
    FMOD_DSP_SETPOSITIONCALLBACK setposition;
    int numparameters;
    FMOD_DSP_PARAMETERDESC* paramdesc;
    FMOD_DSP_SETPARAMCALLBACK setparameter;
    FMOD_DSP_GETPARAMCALLBACK getparameter;
    FMOD_DSP_DIALOGCALLBACK config;
    int configwidth;
    int configheight;
    void* userdata;
}
struct FMOD_DSP_STATE
{
    FMOD_DSP* instance;
    void* plugindata;
    ushort* speakermask;
}
alias int FMOD_DSP_OSCILLATOR;
enum 
{
FMOD_DSP_OSCILLATOR_TYPE,
FMOD_DSP_OSCILLATOR_RATE,
}
alias int FMOD_DSP_LOWPASS;
enum 
{
FMOD_DSP_LOWPASS_CUTOFF,
FMOD_DSP_LOWPASS_RESONANCE,
}
alias int FMOD_DSP_ITLOWPASS;
enum 
{
FMOD_DSP_ITLOWPASS_CUTOFF,
FMOD_DSP_ITLOWPASS_RESONANCE,
}
alias int FMOD_DSP_HIGHPASS;
enum 
{
FMOD_DSP_HIGHPASS_CUTOFF,
FMOD_DSP_HIGHPASS_RESONANCE,
}
alias int FMOD_DSP_ECHO;
enum 
{
FMOD_DSP_ECHO_DELAY,
FMOD_DSP_ECHO_DECAYRATIO,
FMOD_DSP_ECHO_MAXCHANNELS,
FMOD_DSP_ECHO_DRYMIX,
FMOD_DSP_ECHO_WETMIX,
}
alias int FMOD_DSP_DELAY;
enum 
{
FMOD_DSP_DELAY_CH0,
FMOD_DSP_DELAY_CH1,
FMOD_DSP_DELAY_CH2,
FMOD_DSP_DELAY_CH3,
FMOD_DSP_DELAY_CH4,
FMOD_DSP_DELAY_CH5,
FMOD_DSP_DELAY_CH6,
FMOD_DSP_DELAY_CH7,
FMOD_DSP_DELAY_CH8,
FMOD_DSP_DELAY_CH9,
FMOD_DSP_DELAY_CH10,
FMOD_DSP_DELAY_CH11,
FMOD_DSP_DELAY_CH12,
FMOD_DSP_DELAY_CH13,
FMOD_DSP_DELAY_CH14,
FMOD_DSP_DELAY_CH15,
FMOD_DSP_DELAY_MAXDELAY,
}
alias int FMOD_DSP_FLANGE;
enum 
{
FMOD_DSP_FLANGE_DRYMIX,
FMOD_DSP_FLANGE_WETMIX,
FMOD_DSP_FLANGE_DEPTH,
FMOD_DSP_FLANGE_RATE,
}
alias int FMOD_DSP_TREMOLO;
enum 
{
FMOD_DSP_TREMOLO_FREQUENCY,
FMOD_DSP_TREMOLO_DEPTH,
FMOD_DSP_TREMOLO_SHAPE,
FMOD_DSP_TREMOLO_SKEW,
FMOD_DSP_TREMOLO_DUTY,
FMOD_DSP_TREMOLO_SQUARE,
FMOD_DSP_TREMOLO_PHASE,
FMOD_DSP_TREMOLO_SPREAD,
}
alias int FMOD_DSP_DISTORTION;
enum 
{
FMOD_DSP_DISTORTION_LEVEL,
}
alias int FMOD_DSP_NORMALIZE;
enum 
{
FMOD_DSP_NORMALIZE_FADETIME,
FMOD_DSP_NORMALIZE_THRESHHOLD,
FMOD_DSP_NORMALIZE_MAXAMP,
}
alias int FMOD_DSP_PARAMEQ;
enum 
{
FMOD_DSP_PARAMEQ_CENTER,
FMOD_DSP_PARAMEQ_BANDWIDTH,
FMOD_DSP_PARAMEQ_GAIN,
}
alias int FMOD_DSP_PITCHSHIFT;
enum 
{
FMOD_DSP_PITCHSHIFT_PITCH,
FMOD_DSP_PITCHSHIFT_FFTSIZE,
FMOD_DSP_PITCHSHIFT_OVERLAP,
FMOD_DSP_PITCHSHIFT_MAXCHANNELS,
}
alias int FMOD_DSP_CHORUS;
enum 
{
FMOD_DSP_CHORUS_DRYMIX,
FMOD_DSP_CHORUS_WETMIX1,
FMOD_DSP_CHORUS_WETMIX2,
FMOD_DSP_CHORUS_WETMIX3,
FMOD_DSP_CHORUS_DELAY,
FMOD_DSP_CHORUS_RATE,
FMOD_DSP_CHORUS_DEPTH,
FMOD_DSP_CHORUS_FEEDBACK,
}
alias int FMOD_DSP_REVERB;
enum 
{
FMOD_DSP_REVERB_ROOMSIZE,
FMOD_DSP_REVERB_DAMP,
FMOD_DSP_REVERB_WETMIX,
FMOD_DSP_REVERB_DRYMIX,
FMOD_DSP_REVERB_WIDTH,
FMOD_DSP_REVERB_MODE,
}
alias int FMOD_DSP_ITECHO;
enum 
{
FMOD_DSP_ITECHO_WETDRYMIX,
FMOD_DSP_ITECHO_FEEDBACK,
FMOD_DSP_ITECHO_LEFTDELAY,
FMOD_DSP_ITECHO_RIGHTDELAY,
FMOD_DSP_ITECHO_PANDELAY,
}
alias int FMOD_DSP_COMPRESSOR;
enum 
{
FMOD_DSP_COMPRESSOR_THRESHOLD,
FMOD_DSP_COMPRESSOR_ATTACK,
FMOD_DSP_COMPRESSOR_RELEASE,
FMOD_DSP_COMPRESSOR_GAINMAKEUP,
}
alias int FMOD_DSP_SFXREVERB;
enum 
{
FMOD_DSP_SFXREVERB_DRYLEVEL,
FMOD_DSP_SFXREVERB_ROOM,
FMOD_DSP_SFXREVERB_ROOMHF,
FMOD_DSP_SFXREVERB_ROOMROLLOFFFACTOR,
FMOD_DSP_SFXREVERB_DECAYTIME,
FMOD_DSP_SFXREVERB_DECAYHFRATIO,
FMOD_DSP_SFXREVERB_REFLECTIONSLEVEL,
FMOD_DSP_SFXREVERB_REFLECTIONSDELAY,
FMOD_DSP_SFXREVERB_REVERBLEVEL,
FMOD_DSP_SFXREVERB_REVERBDELAY,
FMOD_DSP_SFXREVERB_DIFFUSION,
FMOD_DSP_SFXREVERB_DENSITY,
FMOD_DSP_SFXREVERB_HFREFERENCE,
FMOD_DSP_SFXREVERB_ROOMLF,
FMOD_DSP_SFXREVERB_LFREFERENCE,
}
alias int FMOD_DSP_LOWPASS_SIMPLE;
enum 
{
FMOD_DSP_LOWPASS_SIMPLE_CUTOFF,
}
struct FMOD_MEMORY_USAGE_DETAILS
{
    uint other;
    uint string;
    uint system;
    uint plugins;
    uint output;
    uint channel;
    uint channelgroup;
    uint codec;
    uint file;
    uint sound;
    uint secondaryram;
    uint soundgroup;
    uint streambuffer;
    uint dspconnection;
    uint dsp;
    uint dspcodec;
    uint profile;
    uint recordbuffer;
    uint reverb;
    uint reverbchannelprops;
    uint geometry;
    uint syncpoint;
    uint eventsystem;
    uint musicsystem;
    uint fev;
    uint memoryfsb;
    uint eventproject;
    uint eventgroup1;
    uint soundbankclass;
    uint soundbanklist;
    uint streaminstance;
    uint sounddefclass;
    uint sounddefdefclass;
    uint sounddefpool;
    uint reverbdef;
    uint eventreverb;
    uint userproperty;
    uint eventinstance;
    uint eventinstance_complex;
    uint eventinstance_simple;
    uint eventinstance_layer;
    uint eventinstance_sound;
    uint eventenvelope;
    uint eventenvelopedef;
    uint eventparameter;
    uint eventcategory;
    uint eventevelopepoint;
    uint eventinstancepool;
}
enum 
{
FMOD_MEMBITS_OTHER = 1,
FMOD_MEMBITS_STRING = 2,
FMOD_MEMBITS_SYSTEM = 4,
FMOD_MEMBITS_PLUGINS = 8,
FMOD_MEMBITS_OUTPUT = 16,
FMOD_MEMBITS_CHANNEL = 32,
FMOD_MEMBITS_CHANNELGROUP = 64,
FMOD_MEMBITS_CODEC = 128,
FMOD_MEMBITS_FILE = 256,
FMOD_MEMBITS_SOUND = 512,
FMOD_MEMBITS_SOUND_SECONDARYRAM = 1024,
FMOD_MEMBITS_SOUNDGROUP = 2048,
FMOD_MEMBITS_STREAMBUFFER = 4096,
FMOD_MEMBITS_DSPCONNECTION = 8192,
FMOD_MEMBITS_DSP = 16384,
FMOD_MEMBITS_DSPCODEC = 32768,
FMOD_MEMBITS_PROFILE = 65536,
FMOD_MEMBITS_RECORDBUFFER = 131072,
FMOD_MEMBITS_REVERB = 262144,
FMOD_MEMBITS_REVERBCHANNELPROPS = 524288,
FMOD_MEMBITS_GEOMETRY = 1048576,
FMOD_MEMBITS_SYNCPOINT = 2097152,
FMOD_MEMBITS_ALL = -1u,
}
enum 
{
FMOD_EVENT_MEMBITS_EVENTSYSTEM = 1,
FMOD_EVENT_MEMBITS_MUSICSYSTEM = 2,
FMOD_EVENT_MEMBITS_FEV = 4,
FMOD_EVENT_MEMBITS_MEMORYFSB = 8,
FMOD_EVENT_MEMBITS_EVENTPROJECT = 16,
FMOD_EVENT_MEMBITS_EVENTGROUPI = 32,
FMOD_EVENT_MEMBITS_SOUNDBANKCLASS = 64,
FMOD_EVENT_MEMBITS_SOUNDBANKLIST = 128,
FMOD_EVENT_MEMBITS_STREAMINSTANCE = 256,
FMOD_EVENT_MEMBITS_SOUNDDEFCLASS = 512,
FMOD_EVENT_MEMBITS_SOUNDDEFDEFCLASS = 1024,
FMOD_EVENT_MEMBITS_SOUNDDEFPOOL = 2048,
FMOD_EVENT_MEMBITS_REVERBDEF = 4096,
FMOD_EVENT_MEMBITS_EVENTREVERB = 8192,
FMOD_EVENT_MEMBITS_USERPROPERTY = 16384,
FMOD_EVENT_MEMBITS_EVENTINSTANCE = 32768,
FMOD_EVENT_MEMBITS_EVENTINSTANCE_COMPLEX = 65536,
FMOD_EVENT_MEMBITS_EVENTINSTANCE_SIMPLE = 131072,
FMOD_EVENT_MEMBITS_EVENTINSTANCE_LAYER = 262144,
FMOD_EVENT_MEMBITS_EVENTINSTANCE_SOUND = 524288,
FMOD_EVENT_MEMBITS_EVENTENVELOPE = 1048576,
FMOD_EVENT_MEMBITS_EVENTENVELOPEDEF = 2097152,
FMOD_EVENT_MEMBITS_EVENTPARAMETER = 4194304,
FMOD_EVENT_MEMBITS_EVENTCATEGORY = 8388608,
FMOD_EVENT_MEMBITS_EVENTENVELOPEPOINT = 16777216,
FMOD_EVENT_MEMBITS_EVENTINSTANCEPOOL = 33554432,
FMOD_EVENT_MEMBITS_ALL = -1u,
FMOD_EVENT_MEMBITS_EVENTINSTANCE_GROUP = FMOD_EVENT_MEMBITS_EVENTINSTANCE | FMOD_EVENT_MEMBITS_EVENTINSTANCE_COMPLEX | FMOD_EVENT_MEMBITS_EVENTINSTANCE_SIMPLE | FMOD_EVENT_MEMBITS_EVENTINSTANCE_LAYER | FMOD_EVENT_MEMBITS_EVENTINSTANCE_SOUND,
FMOD_EVENT_MEMBITS_SOUNDDEF_GROUP = FMOD_EVENT_MEMBITS_SOUNDDEFCLASS | FMOD_EVENT_MEMBITS_SOUNDDEFDEFCLASS | FMOD_EVENT_MEMBITS_SOUNDDEFPOOL,
}
extern (C) 
{
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int*) FMOD_OUTPUT_GETNUMDRIVERSCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, char*, int) FMOD_OUTPUT_GETDRIVERNAMECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, FMOD_CAPS*) FMOD_OUTPUT_GETDRIVERCAPSCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, FMOD_INITFLAGS, int*, int, FMOD_SOUND_FORMAT*, int, int, void*) FMOD_OUTPUT_INITCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*) FMOD_OUTPUT_CLOSECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*) FMOD_OUTPUT_UPDATECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void**) FMOD_OUTPUT_GETHANDLECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, uint*) FMOD_OUTPUT_GETPOSITIONCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, uint, uint, void**, void**, uint*, uint*) FMOD_OUTPUT_LOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void*, void*, uint, uint) FMOD_OUTPUT_UNLOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void*, uint) FMOD_OUTPUT_READFROMMIXER;
}
struct FMOD_OUTPUT_DESCRIPTION
{
    CCPTR name;
    uint _version;
    int polling;
    FMOD_OUTPUT_GETNUMDRIVERSCALLBACK getnumdrivers;
    FMOD_OUTPUT_GETDRIVERNAMECALLBACK getdrivername;
    FMOD_OUTPUT_GETDRIVERCAPSCALLBACK getdrivercaps;
    FMOD_OUTPUT_INITCALLBACK init;
    FMOD_OUTPUT_CLOSECALLBACK close;
    FMOD_OUTPUT_UPDATECALLBACK update;
    FMOD_OUTPUT_GETHANDLECALLBACK gethandle;
    FMOD_OUTPUT_GETPOSITIONCALLBACK getposition;
    FMOD_OUTPUT_LOCKCALLBACK lock;
    FMOD_OUTPUT_UNLOCKCALLBACK unlock;
}
struct FMOD_OUTPUT_STATE
{
    void* plugindata;
    FMOD_OUTPUT_READFROMMIXER readfrommixer;
}
