// D import file generated from 'nfuncs.d'
module derelict.sfml.nfuncs;
private 
{
    import derelict.util.compat;
    import derelict.sfml.config;
    import derelict.sfml.ntypes;
}
extern (C) mixin(gsharedString!() ~ "\x0a    // Ftp.h\x0a    void function(sfFtpListingResponse*) sfFtpListingResponse_Destroy;\x0a    sfBool function(sfFtpListingResponse*) sfFtpListingResponse_IsOk;\x0a    sfFtpStatus function(sfFtpListingResponse*) sfFtpListingResponse_GetStatus;\x0a    CCPTR function(sfFtpListingResponse*) sfFtpListingResponse_GetMessage;\x0a    size_t function(sfFtpListingResponse*) sfFtpListingResponse_GetCount;\x0a    CCPTR function(sfFtpListingResponse*, size_t) sfFtpListingResponse_GetFilename;\x0a    void function(sfFtpDirectoryResponse*) sfFtpDirectoryResponse_Destroy;\x0a    sfBool function(sfFtpDirectoryResponse*) sfFtpDirectoryResponse_IsOk;\x0a    sfFtpStatus function(sfFtpDirectoryResponse*) sfFtpDirectoryResponse_GetStatus;\x0a    CCPTR function(sfFtpDirectoryResponse*) sfFtpDirectoryResponse_GetMessage;\x0a    CCPTR function(sfFtpDirectoryResponse*) sfFtpDirectoryResponse_GetDirectory;\x0a    void function(sfFtpResponse*) sfFtpResponse_Destroy;\x0a    sfBool function(sfFtpResponse*) sfFtpResponse_IsOk;\x0a    sfFtpStatus function(sfFtpResponse*) sfFtpResponse_GetStatus;\x0a    CCPTR function(sfFtpResponse*) sfFtpResponse_GetMessage;\x0a    sfFtp* function() sfFtp_Create;\x0a    void function(sfFtp*) sfFtp_Destroy;\x0a    sfFtpResponse* function(sfFtp*, sfIPAddress, ushort, float) sfFtp_Connect;\x0a    sfFtpResponse* function(sfFtp*) sfFtp_LoginAnonymous;\x0a    sfFtpResponse* function(sfFtp*, CCPTR, CCPTR) sfFtp_Login;\x0a    sfFtpResponse* function(sfFtp*) sfFtp_Disconnect;\x0a    sfFtpResponse* function(sfFtp*) sfFtp_KeepAlive;\x0a    sfFtpDirectoryResponse* function(sfFtp*) sfFtp_GetWorkingDirectory;\x0a    sfFtpListingResponse* function(sfFtp*, CCPTR) sfFtp_GetDirectoryListing;\x0a    sfFtpResponse* function(sfFtp*, CCPTR) sfFtp_ChangeDirectory;\x0a    sfFtpResponse* function(sfFtp*) sfFtp_ParentDirectory;\x0a    sfFtpResponse* function(sfFtp*, CCPTR) sfFtp_MakeDirectory;\x0a    sfFtpResponse* function(sfFtp*, CCPTR) sfFtp_DeleteDirectory;\x0a    sfFtpResponse* function(sfFtp*, CCPTR, CCPTR) sfFtp_RenameFile;\x0a    sfFtpResponse* function(sfFtp*, CCPTR) sfFtp_DeleteFile;\x0a    sfFtpResponse* function(sfFtp*, CCPTR, CCPTR, sfFtpTransferMode) sfFtp_Download;\x0a    sfFtpResponse* function(sfFtp*, CCPTR, CCPTR, sfFtpTransferMode) sfFtp_Upload;\x0a\x0a    // Http.h\x0a    sfHttpRequest* function() sfHttpRequest_Create;\x0a    void function(sfHttpRequest*) sfHttpRequest_Destroy;\x0a    void function(sfHttpRequest*, CCPTR, CCPTR) sfHttpRequest_SetField;\x0a    void function(sfHttpRequest*, sfHttpMethod) sfHttpRequest_SetMethod;\x0a    void function(sfHttpRequest*, CCPTR) sfHttpRequest_SetURI;\x0a    void function(sfHttpRequest*, uint, uint) sfHttpRequest_SetHttpVersion;\x0a    void function(sfHttpRequest*, CCPTR) sfHttpRequest_SetBody;\x0a    void function(sfHttpRequest*) sfHttpResponse_Destroy;\x0a    CCPTR function(sfHttpResponse*, CCPTR) sfHttpResponse_GetField;\x0a    sfHttpStatus function(sfHttpResponse*) sfHttpResponse_GetStatus;\x0a    uint function(sfHttpResponse*) sfHttpResponse_GetMajorVersion;\x0a    uint function(sfHttpResponse*) sfHttpResponse_GetMinorVersion;\x0a    CCPTR function(sfHttpResponse*) sfHttpResponse_GetBody;\x0a    sfHttp* function() sfHttp_Create;\x0a    void function(sfHttp*) sfHttp_Destroy;\x0a    void function(sfHttp*, CCPTR, ushort) sfHttp_SetHost;\x0a    sfHttpResponse* function(sfHttp*, sfHttpRequest*, float) sfHttp_SendRequest;\x0a\x0a    // IPAddress.h\x0a    sfIPAddress function(CCPTR) sfIPAddress_FromString;\x0a    sfIPAddress function(sfUint8, sfUint8, sfUint8, sfUint8) sfIPAddress_FromBytes;\x0a    sfIPAddress function(sfUint32) sfIPAddress_FromInteger;\x0a    void function(sfIPAddress, char*) sfIPAddress_ToString;\x0a    sfUint32 function(sfIPAddress) sfIPAddress_ToInteger;\x0a    sfIPAddress function() sfIPAddress_GetLocalAddress;\x0a    sfIPAddress function(float) sfIPAddress_GetPublicAddress;\x0a    sfIPAddress function() sfIPAddress_LocalHost;\x0a\x0a    // Packet.h\x0a    sfPacket* function() sfPacket_Create;\x0a    void function(sfPacket*) sfPacket_Destroy;\x0a    void function(sfPacket*, void*, size_t) sfPacket_Append;\x0a    void function(sfPacket*) sfPacket_Clear;\x0a    CUBPTR function(sfPacket*) sfPacket_GetData;\x0a    size_t function(sfPacket*) sfPacket_GetDataSize;\x0a    sfBool function(sfPacket*) sfPacket_EndOfPacket;\x0a    sfBool function(sfPacket*) sfPacket_CanRead;\x0a    sfBool function(sfPacket*) sfPacket_ReadBool;\x0a    sfInt8 function(sfPacket*) sfPacket_ReadInt8;\x0a    sfUint8 function(sfPacket*) sfPacket_ReadUint8;\x0a    sfInt16 function(sfPacket*) sfPacket_ReadInt16;\x0a    sfUint16 function(sfPacket*) sfPacket_ReadUint16;\x0a    sfInt32 function(sfPacket*) sfPacket_ReadInt32;\x0a    sfUint32 function(sfPacket*) sfPacket_ReadUint32;\x0a    float function(sfPacket*) sfPacket_ReadFloat;\x0a    double function(sfPacket*) sfPacket_ReadDouble;\x0a    void function(sfPacket*, char*) sfPacket_ReadString;\x0a    void function(sfPacket*, wchar*) sfPacket_ReadWideString;\x0a    void function(sfPacket*, sfBool) sfPacket_WriteBool;\x0a    void function(sfPacket*, sfInt8) sfPacket_WriteInt8;\x0a    void function(sfPacket*, sfUint8) sfPacket_WriteUint8;\x0a    void function(sfPacket*, sfInt16) sfPacket_WriteInt16;\x0a    void function(sfPacket*, sfUint16) sfPacket_WriteUint16;\x0a    void function(sfPacket*, sfInt32) sfPacket_WriteInt32;\x0a    void function(sfPacket*, sfUint32) sfPacket_WriteUint32;\x0a    void function(sfPacket*, float) sfPacket_WriteFloat;\x0a    void function(sfPacket*, double) sfPacket_WriteDouble;\x0a    void function(sfPacket*, CCPTR) sfPacket_WriteString;\x0a    void function(sfPacket*, CWCPTR) sfPacket_WriteWideString;\x0a\x0a    // Selector.h\x0a    sfSelectorTCP* function() sfSelectorTCP_Create;\x0a    void function(sfSelectorTCP*) sfSelectorTCP_Destroy;\x0a    void function(sfSelectorTCP*) sfSelectorTCP_Add;\x0a    void function(sfSelectorTCP*) sfSelectorTCP_Remove;\x0a    void function(sfSelectorTCP*) sfSelectorTCP_Clear;\x0a    uint function(sfSelectorTCP*) sfSelectorTCP_Wait;\x0a    sfSocketTCP* function(sfSelectorTCP*, uint) sfSelectorTCP_GetSocketReady;\x0a    sfSelectorTCP* function() sfSelectorUDP_Create;\x0a    void function(sfSelectorUDP*) sfSelectorUDP_Destroy;\x0a    void function(sfSelectorUDP*) sfSelectorUDP_Add;\x0a    void function(sfSelectorUDP*) sfSelectorUDP_Remove;\x0a    void function(sfSelectorUDP*) sfSelectorUDP_Clear;\x0a    uint function(sfSelectorUDP*) sfSelectorUDP_Wait;\x0a    sfSocketUDP* function(sfSelectorUDP*, uint) sfSelectorUDP_GetSocketReady;\x0a\x0a    // SocketTCP.h\x0a    sfSocketTCP* function() sfSocketTCP_Create;\x0a    void function(sfSocketTCP*) sfSocketTCP_Destroy;\x0a    void function(sfSocketTCP*, sfBool) sfSocketTCP_SetBlocking;\x0a    void function(sfSocketTCP*, ushort, sfIPAddress, float) sfSocketTCP_Connect;\x0a    void function(sfSocketTCP*, ushort) sfSocketTCP_Listen;\x0a    sfSocketStatus function(sfSocketTCP*, sfSocketTCP*, sfIPAddress*) sfSocketTCP_Accept;\x0a    sfSocketStatus function(sfSocketTCP*, in ubyte*, size_t) sfSocketTCP_Send;\x0a    sfSocketStatus function(sfSocketTCP*, ubyte*, size_t, size_t*) sfSocketTCP_Receive;\x0a    sfSocketStatus function(sfSocketTCP*, sfPacket*) sfSocketTCP_SendPacket;\x0a    sfSocketStatus function(sfSocketTCP*, sfPacket*) sfSocketTCP_ReceivePacket;\x0a    sfBool function(sfSocketTCP*) sfSocketTCP_IsValid;\x0a\x0a    // SocketUDP.h\x0a    sfSocketUDP* function() sfSocketUDP_Create;\x0a    void function(sfSocketUDP*) sfSocketUDP_Destroy;\x0a    void function(sfSocketUDP*, sfBool) sfSocketUDP_SetBlocking;\x0a    sfBool function(sfSocketUDP*, ushort) sfSocketUDP_Bind;\x0a    sfBool function(sfSocketUDP*) sfSocketUDP_Unbind;\x0a    sfSocketStatus function(sfSocketUDP*, in ubyte*, size_t) sfSocketUDP_Send;\x0a    sfSocketStatus function(sfSocketUDP*, ubyte*, size_t, size_t*) sfSocketUDP_Receive;\x0a    sfSocketStatus function(sfSocketUDP*, sfPacket*) sfSocketUDP_SendPacket;\x0a    sfSocketStatus function(sfSocketUDP*, sfPacket*) sfSocketUDP_ReceivePacket;\x0a    sfBool function(sfSocketUDP*) sfSocketUDP_IsValid;\x0a    ");

