module sys.com;

private import tpl.args, tpl.stream, sys.DConsts, sys.DIfaces, sys.DStructs, sys.DFuncs, exception, tpl.com, sys.uuid;

extern(C) бул комАктивен();
extern(D)
{
	проц откройКОМ();
	проц закройКОМ();
	ткст прогИдИзКлсид(ГУИД клсид);
	ГУИД клсидИзПрогИд(ткст прогИд);
	Исключение исклКомРез(цел кодОшибки);
	проц ошибкаКомРез(цел кодОшибки);
	ДЕСЯТОК дес(ткст т)();
	проц высвободиПосле(Инкогнито объ, проц delegate() блокируй);
	проц сотриПосле(ВАРИАНТ var, проц delegate() блокируй) ;
	проц пробуйСброс(Инкогнито объ);
	проц финальныйСброс(Инкогнито объ) ;
	шим* вБткст(ткст s);
	ткст бткстВТкст(шим* s, бул высвободить = true);
	проц высвободиБткст(шим* s);
	бцел длинаБткст(шим* s) ;
	Инкогнито создайЭкземплярКо(ГУИД клсид,Инкогнито внешний, ПКонтекстВып контекст,ГУИД iid) ;
	Инкогнито дайАктивныйОбъект(ткст прогИд);
	бул объектКОМ_ли(Объект объ);
	проц установиСвойство(ИДиспетчер цель, ткст имя, ...) ;
	проц установиССылСвойство(ИДиспетчер цель, ткст имя, ...) ;
	ВАРИАНТ вызовиЧленПоИду(цел dispId, ПДиспачФлаг флаги, ИДиспетчер цель,ВАРИАНТ[] арги...);
	ВАРИАНТ вызовиЧлен(ткст имя, ПДиспачФлаг флаги, ИДиспетчер цель,ВАРИАНТ[] арги...) ;
	protected ВАРИАНТ[] аргиВВариантСписок(ИнфОТипе[] типы, спис_ва аргук) ;
	protected проц фиксАрги(ref ИнфОТипе[] арги, ref спис_ва аргук) ;
	
	final class КомОбъект
	 {
	  this(Инкогнито объ) ;
	  ~this() ;
	 Инкогнито opCast() ;
	}
}
///////////////////////////////////

	R вызовиМетод(R =ВАРИАНТ)(ИДиспетчер цель, ткст имя, ...)
	 {
	  auto арги = _arguments;
	  auto аргук = _argptr;
	  if (арги.length == 2) фиксАрги(арги, аргук);

	 ВАРИАНТ ret = вызовиЧлен(имя, ПДиспачФлаг.ВызватьМетод, цель, аргиВВариантСписок(арги, аргук));
	  static if (is(R ==ВАРИАНТ)) {
		return ret;
	  }
	  else {
		return com_cast!(R)(ret);
	  }
	}

	R дайСвойство(R =ВАРИАНТ)(ИДиспетчер цель, ткст имя, ...)
	 {
	  auto арги = _arguments;
	  auto аргук = _argptr;
	  if (арги.length == 2) фиксАрги(арги, аргук);

	 ВАРИАНТ ret = вызовиЧлен(имя, ПДиспачФлаг.ДатьСвойство, цель, аргиВВариантСписок(арги, аргук));
	  static if (is(R ==ВАРИАНТ))
		return ret;
	  else
		return com_cast!(R)(ret);
	}

//////////////////////////////////	

class Диспетчер

 {

  private ИДиспетчер цель_;
  private ВАРИАНТ результат_;
  
  this(ГУИД клсид, ПКонтекстВып контекст = cast(ПКонтекстВып)(0x1 | 0x4));
  this(ГУИД клсид, ткст сервер, ПКонтекстВып контекст = cast(ПКонтекстВып)(0x1 | 0x10));
  this(ткст прогИд, ПКонтекстВып контекст = cast(ПКонтекстВып)(0x1 | 0x4));
  this(ткст прогИд, ткст сервер, ПКонтекстВып контекст = cast(ПКонтекстВып)(0x1 | 0x10));
  this(ИДиспетчер цель) ;
  this(ВАРИАНТ цель);
  private this(ВАРИАНТ результат, бцел игнорировать);

  ~this() ;
  final проц сбрось();
  
  R вызови(R = Диспетчер)(ткст имя, ...) {
    static if (is(R == Диспетчер)) {
      return new Диспетчер(вызовиМетод(цель_, имя, _arguments, _argptr), 0);
    }
    else {
      R ret = вызовиМетод!(R)(цель_, имя, _arguments, _argptr);
      результат_ = ret;
      return ret;
    }
  }

  /**
   */
  R дай(R = Диспетчер)(ткст имя, ...) {
    static if (is(R == Диспетчер)) {
      return new Диспетчер(дайСвойство(цель_, имя, _arguments, _argptr), 0);
    }
    else {
      R ret = дайСвойство!(R)(цель_, имя, _arguments, _argptr);
      результат_ = ret;
      return ret;
    }
  }

  /**
   */
  проц установи(ткст имя, ...);
  проц установиСсылку(ткст имя, ...);
  final ИДиспетчер цель() ;
  final ВАРИАНТ результат();

}
alias Диспетчер Обдис;

////////////////////////////////////////////////////////////
/**
 * Предлагает реализацию интерфейса ИПоток.
 */
 
class КОМПоток : Реализует!(ИПоток) {

  protected Поток поток_; 

 this(Поток поток);

 Поток потокОснова();
  
extern(Windows):

  цел Read(ук pv, бцел кб, ref бцел кбЧтен); alias Read читай;
  цел Write(in ук pv, бцел кб, ref бцел кбСчитанных); alias Write пиши;
  цел Seek(дол dlibMove, бцел dwOrigin, ref бдол plibNewPosition); alias Seek сместись;
  цел SetSize(бдол libNewSize) ; alias SetSize установиРазм;
  цел CopyTo(ИПоток поток, бдол кб, ref бдол кбЧтен, ref бдол кбСчитанных) ; alias CopyTo копируйВ;
  цел Commit(бцел hrfCommitFlags) ; alias Commit передай;
  цел Revert(); alias Revert верни;
  цел LockRegion(бдол смещБиб, бдол кб, бцел типБлокир) ; alias LockRegion замкниРегион;
  цел UnlockRegion(бдол смещБиб, бдол кб, бцел типБлокир); alias UnlockRegion разблокРегион;
  цел Stat(out ОТКРПМБ pstatstg, бцел grfStatFlag); alias Stat стат;
  цел Clone(out ИПоток ppstm); alias Clone клонируй;

}


