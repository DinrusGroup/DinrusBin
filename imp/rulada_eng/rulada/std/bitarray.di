/***********************
 * Macros:
 *	WIKI = StdBitarray
 */

module std.bitarray;


/**
 * Массив из битов.
 */
alias BitArray МассивБит;
 struct BitArray
{
alias len длин;
alias ptr ук;

    size_t len;
    uint* ptr;
	
	т_мера разм();
    size_t dim();

	т_мера длина();
    size_t length();

	проц длина(т_мера новдлин);
    void length(size_t newlen);

    /**********************************************
     * Поддержка операции [$(I index)] для BitArray.
     */
     bool opIndex(size_t i);

    /**********************************************
     * Поддержка свойства array.dup для BitArray.
     */
	МассивБит дубль();
    BitArray dup();
	
 bool opIndexAssign(bool b, size_t i);
    /**********************************************
     * Поддержка циклов foreach для BitArray.
     */
    int opApply(int delegate(inout bool) dg);

    /** ditto */
    int opApply(int delegate(inout size_t, inout bool) dg);



    /**********************************************
     * Поддержка свойства array.reverse для BitArray.
     */

	 МассивБит реверсни();
    BitArray reverse();
	


    /**********************************************
     * Поддержка свойства array.sort для BitArray.
     */
	МассивБит сортируй();
    BitArray sort();
			   

    /***************************************
     * Поддержка операторов == и != для массивов бит.
     */

    int opEquals(BitArray a2);
	

    /***************************************
     * Реализует операторы сравнения.
     */

   int opCmp(BitArray a2);
	

    /***************************************
     * Устанавливает BitArray с содержимым ba[]
     */
	проц иниц(бул[] бм);
     void init(bool[] ba);

    /***************************************
     * Передает BitArray в v[], при этом numbits представляют собой число битов
     * в данном массиве. Данные при операции не копируются.
     *
     * Это инверсия opCast.
     */
	проц иниц(проц[] в, т_мера члобит);
    void init(void[] v, size_t numbits);
    

    /***************************************
     * Преобразует в void[].
     */
    void[] opCast();
   

    /***************************************
     * Поддержка унарного оператора ~ для массивов битов.
     */
    BitArray opCom();
    


    /***************************************
     * Поддержка бинарного оператора & для массивов бит.
     */
    BitArray opAnd(BitArray e2);
    


    /***************************************
     * Поддержка бинарного оператора | для массивов бит.
     */
    BitArray opOr(BitArray e2);
    

    /***************************************
     * Поддержка бинарного оператора ^ для массивов бит.
     */
    BitArray opXor(BitArray e2);
    

    /***************************************
     * Поддержка бинарного оператора - для массивов бит.
     *
     * $(I a - b) для BitArrays означает то же, что $(I a &amp; ~b).
     */
    BitArray opSub(BitArray e2);
    


    /***************************************
     * Поддержка оператора &= для массивов бит.
     */
    BitArray opAndAssign(BitArray e2);
    

    /***************************************
     * Поддержка оператора |= для массивов бит.
     */
    BitArray opOrAssign(BitArray e2);
    

    /***************************************
     * Поддержка оператора ^= для массивов бит.
     */
    BitArray opXorAssign(BitArray e2);
    

    /***************************************
     * Поддержка оператора -= для массивов бит.
     *
     * $(I a -= b) для BitArrays означает то же, что $(I a &amp;= ~b).
     */
    BitArray opSubAssign(BitArray e2);
    
    /***************************************
     * Поддержка оператора ~= для массивов бит.
     */

    BitArray opCatAssign(bool b);
    

    /***************************************
     * ditto
     */

    BitArray opCatAssign(BitArray b);
   

    /***************************************
     * Поддержка бинарного оператора ~ для массивов бит.
     */
    BitArray opCat(bool b);

    
}
