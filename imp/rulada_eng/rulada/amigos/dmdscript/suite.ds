
// DScript test suite program

a = new Object();
assert(a == "[object Object]");

//

a = new Array(1);
a[0] = 3;
print(a[1]);

//

for (i = 0; i < 10; i++)
{
	print("hello " + i + "\n");
	if (i == 5)
	    break;
}
assert(i == 5);

i = 0;
for (; i < 10; i++)
{
	print("hello " + i + "\n");
	if (i == 5)
	    break;
}
assert(i == 5);

i = 0;
for (;;)
{
	if (i >= 10)
	    break;
	print("hello " + i + "\n");
	if (i == 5)
	    break;
	i++;
}
assert(i == 5);

//////////////////////////////////////////////

iloop:
    for(i=0; i<5; i++)
    {
      if (i == 2)
	break iloop;
      assert(i == 0 || i == 1);
    }
assert(i == 2);
    
//////////////////////////////////////////////

a = new Array();
a[1] = "x";
a[2] = "y";
a[3] = "z";
for (o in a)
{
	print(o + "\n");
	delete a[2];
}

/////////////////////////////////////////////////////////

print( " Date(): " + Date() + "\n");

end = new Date(Date.parse("Tue Apr 02 02:04:57 GMT-0800 1996"));
print(end.toString() + "\n");
assert(Date.parse(end.toString()) == end.valueOf());
print( " toString: " + end.toString() +
       "\n toLocaleString: " + end.toLocaleString() +
       "\n toUTCString: " + end.toUTCString() + "\n");

D1 = new Date(-1995, 11, 32);
//assert(D1.valueOf() == -125091705600000);
assert(D1.getDate() == 1);

DSet = new Date();
DSet.setTime(0);
println(DSet.getUTCFullYear());
assert(DSet.getUTCFullYear() == 1970);
assert(DSet.getUTCMonth() == 0);
assert(DSet.getUTCDate() == 1);

DSet.setTime(333534344423);
assert(DSet.getFullYear() == 1980);
assert(DSet.getMonth() == 6);
assert(DSet.getDate() == 27);

myDay = new Date("March 14,1980 12:00:00");
//assert(myDay.valueOf() == 321912000000);
//assert(myDay.getHours() == 12);

// The '-' should be ignored
D1 = new Date("March 14, -1980 20:14:35");
println(D1.toString());

myD = new Date();
results = myD.toDateString();
println(results);

results = myD.toTimeString();
println(results);

results = myD.toLocaleString();
println(results);

results = myD.toLocaleDateString();
println(results);

results = myD.toLocaleTimeString();
println(results);

results = myD.toUTCString();
println(results);


//////////////////////////////////////////////////

myD = new Date(0);
println(myD.toUTCString());
assert(myD.toUTCString() == "Thu, 01 Jan 1970 00:00:00 UTC");

//////////////////////////////////////////////////

var scope = "global";
function f()
{
	print(scope + "\n");
	assert(scope == undefined);
	var scope = "local";
	print(scope + "\n");
	assert(scope == "local");
}
f();

//


//

var square = function(x) { return x * x; }
x = square(3);
assert(x == 9);

//

var square2 = new Function( "x", "return x * x;" );
x = square2(5);
print(x);
assert(x == 25);
print("\n");

//

r = /ab*/g;
str = "abbcdefabh";
a = r.exec(str);

//print("Found " + RegExp.lastMatch + "\n");
//print("Next match starts at " + r.lastIndex + "\n");
//print("Found " + a[0] + "\n");
assert(RegExp.lastMatch == "abb");
assert(r.lastIndex == 3);
assert(a[0] == "abb");

a = r.exec(str);
//print("Found " + RegExp.lastMatch + "\n");
//print("Next match starts at " + r.lastIndex + "\n");
assert(RegExp.lastMatch == "ab");
assert(r.lastIndex == 9);

//

r = /d(b+)(d)/ig;
a = r.exec("cdbBdbsbz");

//print("myArray = " + a + "\n");
assert(a == "dbBd,bB,d");
//print("a.input = " + a.input + "\n");
assert(a.input == "cdbBdbsbz");

assert(r.lastIndex == 5);
assert(r.ignoreCase == true);
assert(r.global == true);
//print("r.source = " + r.source + "\n");
assert(r.source == "d(b+)(d)");

//print("lastMatch = " + RegExp.lastMatch + "\n");
assert(RegExp.lastMatch == "dbBd");
//print("$& = " + RegExp["$&"] + "\n");
assert(RegExp["$&"] == "dbBd");

//print("leftContext = " + RegExp.leftContext + "\n");
assert(RegExp.leftContext == "c");
//print("$` = " + RegExp["$`"] + "\n");
assert(RegExp["$`"] == "c");

//print("rightContext = " + RegExp.rightContext + "\n");
assert(RegExp.rightContext == "bsbz");
//print("$' = " + RegExp["$'"] + "\n");
assert(RegExp["$'"] == "bsbz");

//print("lastParen = " + RegExp.lastParen + "\n");
assert(RegExp.lastParen == "d");
//print("$+ = " + RegExp["$+"] + "\n");
assert(RegExp["$+"] == "d");

//print("$1 = " + RegExp["$1"] + "\n");
assert(RegExp["$1"] == "bB");
//print("$2 = " + RegExp["$2"] + "\n");
assert(RegExp["$2"] == "d");

//

r = /(hi)?/g;

a = r.exec("hi");
//print("Found " + a + "\n");
assert(a.length == 2);
//print("Next match starts at " + r.lastIndex + "\n");
assert(r.lastIndex == 2);

a = r.exec("hi");
print("Found " + a + "\n");
println(a.length);
assert(a.length == 2);
assert(r.lastIndex == 2);

//

r = /(hi)?/g;
a = r("hi");
//print("Found " + a + "\n");
assert(a.length == 2);
//print("Next match starts at " + r.lastIndex + "\n");
assert(r.lastIndex == 2);

//

r = /a|ab/;
a = r("abc");
//print("Found [" + a + "]\n");
assert(a == "a");

r = /((a)|(ab))((c)|(bc))/;
a = r("abc");
//print("Found [" + a + "]\n");
assert(a == "abc,a,a,,bc,,bc");

//

findMe = /ab+c/
findString = new String("accabbbabbcabcd");
newString = findString.replace(findMe, "BUGGY");
println(newString);
assert(newString == "accabbbBUGGYabcd");

//////////////////////////////////////////////

function foundx(arr)
{
  for (i in arr)
  {
    println("array[" + i + "]= " + arr[i]);
  }

  for (var v in arr)
  {
    println("array[" + v + "]= " + arr[v]);
  }
}

myReg = /ab/
foundx(myReg.exec("It is absolutely there."));

//////////////////////////////////////////////

function foundy(bool)
{
    assert(!bool);
}

myReg = /[^f-o]/
foundy(myReg.test("hiho"));
myReg = /\D/
foundy(myReg.test(7));

//////////////////////////////////////////////

try
{
   throw 5;
}
catch (c)
{
    //print("caught = " + 5 + "\n");
    assert(c == 5);
}

//

try
{
    a = 3;;
}
finally
{
    a = 4;
}
assert(a == 4);

//

try
{
    a = 3;
    throw 5;
}
catch (c)
{
    //print("caught = " + 5 + "\n");
    assert(c == 5);
}
finally
{
    //print("in finally\n");
    a = 4;
}
assert(a == 4);

////////////////////////////////////////

TryNewJavaInteger();

function newJavaInteger() {
	throw ( "throw exception" );
}

function TryNewJavaInteger()
{
    try {
	newJavaInteger();
    } catch ( e ) {
	result = String( e );
    }
    assert(result == "throw exception");
}

////////////////////////////////////////

DefaultValue_1();

function MyObject2036() {
    this.toString = void 0;
    this.valueOf = new Object();
}

function DefaultValue_1() {
    result = "failed: no exception thrown";
    exception = null;

    try {
       result = new MyObject2036() + new MyObject2036();
    } catch ( e ) {
	exception = e.toString();
    }
}

////////////////////////////////////////

//

var x = Number.NaN;
var y = 3;

assert(!(x < y));
assert(!(x <= y));
assert(!(x > y));
assert(!(x >= y));
assert(!(x == y));
assert((x != y));
assert(!(x === y));
assert(!(x !== y));

x = 3;
y = Number.NaN;

assert(!(x < y));
assert(!(x <= y));
assert(!(x > y));
assert(!(x >= y));
assert(!(x == y));
assert((x != y));
assert(!(x === y));
assert(!(x !== y));


x = Number.NaN;
y = Number.NaN;

assert(!(x < y));
assert(!(x <= y));
assert(!(x > y));
assert(!(x >= y));
assert(!(x == y));
assert((x != y));
assert(!(x === y));
assert(!(x !== y));

x = 3;
y = 4;

assert((x < y));
assert((x <= y));
assert(!(x > y));
assert(!(x >= y));
assert(!(x == y));
assert((x != y));
assert(!(x === y));
assert((x !== y));

x = 4;
y = 3;

assert(!(x < y));
assert(!(x <= y));
assert((x > y));
assert((x >= y));
assert(!(x == y));
assert((x != y));
assert(!(x === y));
assert((x !== y));

x = 3;
y = 3;

assert(!(x < y));
assert((x <= y));
assert(!(x > y));
assert((x >= y));
assert((x == y));
assert(!(x != y));
assert((x === y));
assert(!(x !== y));

x = 2;
y = "hello";
assert(x != y);
assert(!(x == y));

////////////////////////////////////////

myHonda =
    {
	color:"red",
	wheels:4,
	engine:
	{
	    cylinders:4,
	    size:2.2
	}
    };

////////////////////////////////////////

large = 123456789123456;
large = 0x123456789123456;

////////////////////////////////////////

A1 = new Array(0, 1, 2, 3, 4, 5, 6, 7, 8);

concatArray = A1.concat(A1);
print("A concatenation: " + concatArray + "\n");
assert(concatArray == "0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8");


var a = [1,2,3];

b = a.concat(4,5);
print(b + "\n");
assert(b == "1,2,3,4,5");

b = a.concat([4,5]);
print(b + "\n");
assert(b == "1,2,3,4,5");

b = a.concat([4,5],[6,7]);
print(b + "\n");
assert(b == "1,2,3,4,5,6,7");

b = a.concat(4, [5,[6,7]]);
print(b + "\n");
assert(b == "1,2,3,4,5,6,7");

////////////////////////////////////////

myFish = ["angel", "clown", "mandarin", "surgeon"];
print("myFish before: " + myFish + " at length " + myFish.length);
print("\n");
assert(myFish.length == 4);
shifted = myFish.shift();
print("shifted = " + shifted + "\n");
assert(shifted == "angel");
print("myFish after: " + myFish + " at length " + myFish.length);
print("\n");
assert(myFish == "clown,mandarin,surgeon");
assert(myFish.length == 3);
print("\n");

////////////////////////////////////////

myFish = ["angel", "clown"];
print("myFish before: " + myFish + " at length " + myFish.length);
print("\n");
pushed = myFish.push("carp");
assert(pushed == 3);

print("myFish after: " + myFish);
print(" at length " + myFish.length);
print("\n");
assert(myFish.length == 3);
assert(myFish == "angel,clown,carp");

////////////////////////////////////////

myFish = ["angel", "clown"];
print("myFish before: " + myFish + " at length " + myFish.length);
pushed = myFish.push("drum", "lion");
print("\n");
assert(pushed == 4);

print("myFish after: " + myFish);
print(" at length " + myFish.length);
print("\n");
assert(myFish.length == 4);
assert(myFish == "angel,clown,drum,lion");

////////////////////////////////////////

myFish = ["angel", "clown", "mandarin", "surgeon"];
print("myFish before: " + myFish + " at size " + myFish.length);
print("\n");
popped = myFish.pop();
print("Popped: " + popped);
print("\n");
assert(popped == "surgeon");

print("myFish after: " + myFish);
print(" at size " + myFish.length);
print("\n");
assert(myFish.length == 3);
assert(myFish == "angel,clown,mandarin");

////////////////////////////////////////

function pout(line)
{
  print(line);
  nline();
}

function nline()
{
  print("\n");
}

pout(0xFFFFFFFFFFFFFFFFFFFFFFFF);
pout(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
pout(03777777777777777777777777777777777777777777);
pout(03777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777);
upe = -1.77E12;
x = 1.2473567464653111e308;
pout(x);
assert(x == "1.247356746465311e+308");
x = 1.2473567464653111e309;	// should print "Infinity"
pout(x);
assert(x == "Infinity");
x = 112.553e57;
pout(x);
assert(x == "1.12553e+059");

pout((((5/4)/3)/2)/1);

x = (3/0)-(3/0);
pout(x);
assert((x + " ") == "NaN ");
x = (3/0)>999;
pout(x);
assert((x + " ") == "true "); 
assert(x == true);

x = (3/0)>=999;
assert(x == true);
x = (3/0)<999;
assert(x == false);


x = 23;
pout(x <<= 3);
pout(x <<=-2);
x = 117;
pout(x>>>=3);

assert(~44657645543 == -1707972584);
assert(~446576455431 == 100143352);
assert((12246574946 | 18897) == -638324749);
assert((16386631520 >>> 4) == 218858102);
assert((-5 >> 2)==-2);
assert((12246334222358946 & 18897) == 18816);

x = 99999999999999999999999999999999999999999999999999999999 * 999999999999999999999999999999999999999999999999999999999999999999999999;
println(x);
assert(x >= 0.9999999e+128 && x <= 1.00000001e+128);

x=3;

assert(x-- == 3);
assert(x++ == 2);
++x;
assert(x == 4);
--x;
assert(x == 3);

assert(parseFloat(.144) == 0.144);

////////////////////////////////////////

newstr = new String("\{hj7");

String.prototype.whatImMissing = 3;
String.prototype.undecl;

myName = new String("Jonathan Nelson");
myJob = new String("Chromium");
newstring = myName.concat(" : ", myJob);  
pout(newstring);
assert(newstring == "Jonathan Nelson : Chromium");
emptyString = new String();
newstring = newstring.concat(emptyString);
pout(newstring);
assert(newstring == "Jonathan Nelson : Chromium");

newstr = "Good afternoon";
assert(newstr.length == 14);

////////////////////////////////////////

pout(String.toString());
pout(String.valueOf());
pout(Date.toString());
pout(Date.valueOf());
println(Math.toString());
assert(Math.toString() == "[object Math]");
println(Math.valueOf());
assert(Math.valueOf() == "[object Math]");
println(Boolean.toString());
println(Boolean.valueOf());

println(String(Math));
println(String(Number));
println(String(String));
println(String(Array));
println(String(Boolean));
println(String(Date));
println(String(RegExp));

////////////////////////////////////////

var v;

x=Math.acos(0);
print("acos(0) = "+x+"\n");
assert(x>1.57);
assert(x<1.58);

////////////////////////////////////////

test = new String("\34$5s");
pout(test);
test = new String("\x1C$5s");
pout(test);

assert(test.length == 4);
assert(test == "\x1C$5s");

////////////////////////////////////////

x = new String("Hi there.");

String.prototype.nullproto = null;
print(x.nullproto + "\n");
assert(x.nullproto == null);

String.prototype.undecl;
print(x.undecl + "\n");
assert(x.undecl == undefined);

String.prototype.decl = "something";
print(x.decl + "\n");
assert(x.decl == "something");

////////////////////////////////////////

newArray = new Array(1, 2, 3, 4, 5, 6, 7, 8);
a = newArray.splice(4);
print("deleted: ");
print(a);
print("\n");
assert(a == "5,6,7,8");

print("newArray: ");
print(newArray);
print("\n");
assert(newArray == "1,2,3,4");

a = newArray.splice(1,2);
print("deleted: ");
print(a);
print("\n");
assert(a == "2,3");

print("newArray: ");
print(newArray);
print("\n");
assert(newArray == "1,4");

a = newArray.splice(1,1);
print("deleted: ");
print(a);
print("\n");
assert(a == "4");

print("newArray: ");
print(newArray);
print("\n");
assert(newArray == "1");

////////////////////////////////////////

function one_value(newval)
{
  this.value = newval;
} 
  
  x = new one_value(7);
  pout(x.value);
  assert(x.value == 7);

////////////////////////////////////////

x = 14452;
x <<= 3;
println(x);
assert(x == 115616);

x >>>= 2;
println(x);
assert(x == 28904);

////////////////////////////////////////

i = 0;
n = 0;
while(i < 5)
{
  i++;
  if (i == 3)
    continue
  n +=i
}

println(i);
assert(i == 5);
println(n);
assert(n == 12);

////////////////////////////////////////

for(var i=0; i<10; i++)
	;
assert(i == 10);
  
////////////////////////////////////////

x = ((3/4)/5);
assert(x == 0.15);

////////////////////////////////////////

println(3/5); // Some division

////////////////////////////////////////

x = "4"
println(eval(x));
assert(eval(x) == 4);
eval("(7<4)?println(0):println(1)");

////////////////////////////////////////

text = "1234567890"
s = text.substring(4);
assert(s == "567890");

////////////////////////////////////////

var s = "abcdefg";
p = s.substr(2,2);
println(p);
assert(p == "cd");
p = s.substr(3);
println(p);
assert(p == "defg");
p = s.substr(-3,2);
println(p);
assert(p == "ef");	// BUG: IE4 returns "ab"

////////////////////////////////////////

myName = "abcdefghijklmnop"
assert(myName.slice(1, 43) == "bcdefghijklmnop");

////////////////////////////////////////

str = "the cat in the hat"
word = "the"
assert(str.search(word) == 0);
assert(str.search("cat") == 4);

////////////////////////////////////////

str = escape("This & That");
assert(str == "This%20%26%20That");

////////////////////////////////////////

assert(typeof(null) == "object");
assert(isFinite(""));
assert(isNaN("") == false);

this_thing = new Object;
delete (this_thing);

////////////////////////////////////////

r = -1;
j= 2;
switch(j)
{
  case 1:
    r = 5;
    break;
  case 2:
    r = 6;
    break;
  default:
    r = 7;
}
assert(r == 6);

r = -1;
j= 2;
switch(j)
{
  case 1:
    r = 5;
    break;
  default:
    r = 7;
}
assert(r == 7);

r = -1;
j= 2;
switch(j)
{
  case 1:
    r = 5;
    break;
}
assert(r == -1);

////////////////////////////////////////

sortArray = new Array("f", "a", "p", "d", "e", "r", "b", "b", "w", "o");
newArray = sortArray.sort();
assert(newArray == "a,b,b,d,e,f,o,p,r,w");
assert(sortArray == newArray);

////////////////////////////////////////

myFish = ["angel", "clown"];
assert(myFish[0] == "angel");
assert(myFish.length == 2);

newLength = myFish.unshift("drum", "lion");

assert(myFish[0] == "drum");
assert(myFish[1] == "lion");
assert(myFish.length == 4);
assert(newLength == 4);

////////////////////////////////////////

assert(Math.toSource() == "{}");
xobj = new Boolean(true);
xobj.x = 3;
xobj.y = 4;
assert(xobj.toSource() == "{y:4,x:3}");
x = [1,2,3].toSource();
assert(x == "[1,2,3]");
x = ["a","b","c"].toSource();
assert(x == '["a","b","c"]');
x = [1,[2,'c']].toSource();
assert(x == '[1,[2,"c"]]');

////////////////////////////////////////

nString = new String("Hi there")
assert(Number(nString).toString() == "NaN");

x = -1.2473567464653111e309;
assert(x == -Infinity);

////////////////////////////////////////

function fruit(type, brand, source)
{
  this.type = type;
  this.brand = brand;
  this.source = source;
}

function source(country, city)
{
  this.country = country;
  this.city = city;
}

mySource = new source("USA", "Walla-Walla");
myFruit = new fruit("apple", "Jonathan", mySource);

println("I have an " + myFruit.type);
assert(myFruit.type == "apple");

println("It is from " + myFruit.source.city);
assert(myFruit.source.city == "Walla-Walla");

////////////////////////////////////////

function myFunctionxy(x, y)
{
  print(x + y);
}

assert(myFunctionxy.arity == 2);

////////////////////////////////////////

x = "0734";

//print(parseInt(x, 26));
assert(parseInt(x, 26) == 4814);

//print(parseInt(x, 27));
assert(parseInt(x, 27) == 5188);

////////////////////////////////////////

s = ':ast:blah:::lit:hubble:';
r = s.split(":")
// NOTE: jscript gives "ast,blah,lit,hubble", which I believe is wrong.
assert(r == ",ast,blah,,,lit,hubble,");

s = "ab";
r = s.split(/a*?/);
assert(r == "a,b");	// NOTE: jscript crashes on this

s = "ab";
r = s.split(/a*/);
// NOTE: jscript gives "b" which is wrong
assert(r == ",b");

s = "A<B>bold</B>and<CODE>coded</CODE>";
r = s.split(/<(\/)?([^<>]+)>/);
// NOTE: jscript gets this wrong, too (it leaves out undefined results)
assert(r == "A,,B,bold,/,B,and,,CODE,coded,/,CODE,");

////////////////////////////////////////

a = b = 3;

assert(a == 3);
assert(b == 3);

////////////////////////////////////////

for (i = 0; i < 100; i++)
{
	x = Math.random();
	assert(x >= 0.0 && x < 1.0);
}

////////////////////////////////////////

var zev = 3;

function fooeval()
{
	xev = 4;
	eval("yev = 5;");
	zev = 6;
	var zev;
}
fooeval();
println(xev);
println(yev);
println(zev);

assert(xev == 4);
assert(yev == 5);
assert(zev == 3);


////////////////////////////////////////

function two_value(newval)
{
  this.value = newval;
  eval("footwo = this;");
} 
  
two = new two_value(7);
println(two.value);
println(footwo.value);
assert(two.value == 7);
assert(footwo.value == 7);

////////////////////////////////////////

function submitForms()
{  var foo;
   foo  = function() { return 3; };
   assert(foo() == 3);
}

submitForms();

////////////////////////////////////////

function MakeArray() {
  assert(MakeArray.arguments.length == 9);
  this.length = MakeArray.arguments.length
  for (var i = 0; i < this.length; i++)
      this[i+1] = arguments[i]
}

var cardpic = new MakeArray("LL","AP","BA","MB","FH","AW","CW","CV","DZ");
assert(cardpic.length == 9);
println(cardpic[3]);
assert(cardpic[4] == "MB");

////////////////////////////////////////

var MM_latestPluginRevision = new Object();
MM_latestPluginRevision["5.0"] = new Object();
MM_latestPluginRevision["4.0"] = new Object();
MM_latestPluginRevision["3.0"] = new Object();
MM_latestPluginRevision["2.0"] = new Object();
MM_latestPluginRevision["5.0"]["Windows"] = 30;
MM_latestPluginRevision["5.0"]["Macintosh"] = 30;
MM_latestPluginRevision["4.0"]["Windows"] = 28;
MM_latestPluginRevision["4.0"]["Macintosh"] = 27;
MM_latestPluginRevision["4.0"]["Unix"] = 12;
MM_latestPluginRevision["3.0"]["Windows"] = 10;
MM_latestPluginRevision["3.0"]["Macintosh"] = 10;
MM_latestPluginRevision["2.0"]["Windows"] = 11;
MM_latestPluginRevision["2.0"]["Macintosh"] = 11;

assert(MM_latestPluginRevision["5.0"]["Windows"] == 30);
assert(MM_latestPluginRevision["5.0"]["Macintosh"] == 30);
assert(MM_latestPluginRevision["4.0"]["Windows"] == 28);
assert(MM_latestPluginRevision["4.0"]["Macintosh"] == 27);
assert(MM_latestPluginRevision["4.0"]["Unix"] == 12);
assert(MM_latestPluginRevision["3.0"]["Windows"] == 10);
assert(MM_latestPluginRevision["3.0"]["Macintosh"] == 10);
assert(MM_latestPluginRevision["2.0"]["Windows"] == 11);
assert(MM_latestPluginRevision["2.0"]["Macintosh"] == 11);

////////////////////////////////////////

x = 63;

println("x = ", x.toString(2));
println("x = ", x.toString(3));
println("x = ", x.toString(37));
println("x = ", x.toString(2.001));
println("x = ", x.toString(undefined));

assert(x.toString(2) == "111111");
assert(x.toString(3) == "2100");
assert(x.toString(37) == "63");
assert(x.toString(2.001) == "63");
assert(x.toString(undefined) == "63");

////////////////////////////////////////

x = (123).toFixed(0); println(x);
assert(x == "123");

x = (123.2234).toFixed(2); println(x);
assert(x == "123.22");

x = (123.2254).toFixed(2); println(x);
assert(x == "123.23");

x = (1000000000000000128).toString(0); println(x);
//assert(x == "1000000000000000100");

x = (1000000000000000128).toFixed(0); println(x);
assert(x == "1000000000000000128");

////////////////////////////////////////

x = (123).toExponential(0); println(x);
assert(x == "1e+2");

x = (123.2234).toExponential(2); println(x);
assert(x == "1.23e+2");

x = (123.2254).toExponential(2); println(x);
assert(x == "1.23e+2");

x = (1000000000000000128).toExponential(0); println(x);
assert(x == "1e+18");

////////////////////////////////////////

x = (123).toPrecision(); println(x);
assert(x == "123");

x = (123.2234).toPrecision(2); println(x);
assert(x == "1.2e+2");

x = (123.2254).toPrecision(); println(x);
//assert(x == "123.22539999999999");

x = (1000000000000000128).toPrecision(); println(x);
//assert(x == "1000000000000000100");

////////////////////////////////////////

x = new Boolean(true);
y = new Boolean(false);

assert(Number(x)==1);
assert(Number(y)==0);

////////////////////////////////////////

st1 = new String("qwertyuiopasdfghjklzxcvbnmqwertyuioplkjhgfdsazxcvbn")
st2 = new String("qwertyuiopasdfghjklzxcvbnmqwertyuioplkjhgfdsazxcvbnqwertyuiopasdfghjklzxcvbnmqwertyuioplkjhgfdsazx")

assert(st1.length == 51);
assert(st2.length == 98);

//print(st1.length + "\n");
//print(st2.length + "\n");

////////////////////////////////////////

test2 = " that dog, that bad that smelly dog!";
results = test2.match("that", "g")
x = 0;
for (x in results)
{
  print("result[" + x + "] = " + results[x] + "\n");
}
assert(results.length == 3);

////////////////////////////////////////

re = /(\w+)\s(\w+)/;
str = "John Smith";
newstr = str.replace(re, "$2, $1!!");
assert(newstr == "Smith, John!!");

////////////////////////////////////////

reg = /d/
str = "abcdef";
newstr = str.replace(reg, "undefined");
assert(newstr == "abcundefinedef");
assert(newstr.search("undefined") == 3);

////////////////////////////////////////

myReg = /[abc](\*)[def]\1/
assert(myReg.test("b*e*g*") == true);

////////////////////////////////////////

var recurse_count = 0;

function recurse(x)
{
  recurse_count++;
  if (x>1)
  {
    x = x-1;
    recurse(x);
  }
}

recurse(15);
assert(recurse_count == 15);

////////////////////////////////////////


d1 = decodeURI("hello");
println(d1);
d1 = decodeURIComponent("hello");
println(d1);
d1 = encodeURI("hello");
println(d1);
d1 = encodeURIComponent("hello");
println(d1);

////////////////////////////////////////


a = new Array(3);

a[0] = 6;
a[1] = 7;
a[2] = 8;

assert(a.toString() == "6,7,8");
assert(a.toLocaleString() == "6,7,8");

////////////////////////////////////////

o = new Object();
o.foo = 3;
assert(o.hasOwnProperty("foo"));
assert(o.propertyIsEnumerable("foo"));
assert(Object.prototype.isPrototypeOf(o));

////////////////////////////////////////

println((Array(1073741823)).length);

////////////////////////////////////////


declMyArray = "new Array(1,2,3,4,5)"
mArray = eval(declMyArray);

////////////////////////////////////////

println(Function.prototype);
println(Function.toString());
println(Function);
null == Function;

////////////////////////////////////////

n = new Number('0xc');
assert(n == 12);

n = new Number('5e-324');
assert(n == 5e-324);

n = new Date(3.1459);
assert(n.valueOf() == 3);


n = -1.1 >>> 0;
assert(n == 4294967295);

////////////////////////////////////////

assert(String.fromCharCode.length == 1);

////////////////////////////////////////

var s = new Array(1,2,3,4,5);
s.substring = String.prototype.substring;
assert(s.substring(Infinity,-Infinity) == "1,2,3,4,5");

////////////////////////////////////////

y = eval("var x; with (7) x = valueOf(); typeof x;");
assert(y == "number");

////////////////////////////////////////

VAR1 = 0;
VAR2 = -Infinity;
VAR1 %= VAR2;
assert(VAR1 == 0);

////////////////////////////////////////

assert(eval("true, false") == false);

////////////////////////////////////////

x = eval("x=true; x.valueOf=Boolean.prototype.valueOf;x.valueOf()");
assert(x == true);

////////////////////////////////////////

function GetScriptEngineInfo()
{
   var s;
   s = ""; // Build string with necessary info.
   s += ScriptEngine() + " Version ";
   s += ScriptEngineMajorVersion() + ".";
   s += ScriptEngineMinorVersion() + ".";
   s += ScriptEngineBuildVersion();
   return(s);
}

println(GetScriptEngineInfo());

////////////////////////////////////////

my_array = new Array(1, 2, 3);
assert(delete my_array.length == false);

////////////////////////////////////////


var A = new Array(6);
A.length = 123;

for (var p in A)
{
    println(p);
    assert(0);
}

////////////////////////////////////////

x = Infinity/Math.min(0,-0);
assert(x == "-Infinity");

////////////////////////////////////////

var o = {};

////////////////////////////////////////

assert(String.fromCharCode(0).charCodeAt(0) == 0);
assert(String.fromCharCode(-0).charCodeAt(0) == 0);
assert(String.fromCharCode(Math.pow(2,16)).charCodeAt(0) == 0);
assert(String.fromCharCode(65536).charCodeAt(0) == 0);
assert(String.fromCharCode(131072).charCodeAt(0) == 0);
assert(String.fromCharCode('65536').charCodeAt(0) == 0);
assert(String.fromCharCode(-Math.pow(2,16)).charCodeAt(0) == 0);
assert(String.fromCharCode(-65536).charCodeAt(0) == 0);
assert(String.fromCharCode(-131072).charCodeAt(0) == 0);
assert(String.fromCharCode('-65536').charCodeAt(0) == 0);

////////////////////////////////////////

assert(parseInt("\u20001234\u2000") == 1234);
assert(parseInt(-"\u20001234\u2001") == -1234);
assert(parseInt(-"\u20001234\0").toString() == "NaN");

////////////////////////////////////////

assert(1 / "-1e-2000" == "-Infinity");

////////////////////////////////////////

reg = /a([xy]+)a|b(z*)a/;
s = "waxyxayyaBzaxayxaqt";
r = s.match(reg);

for (i in r)
{
  println("r[" + i + "] = " + r[i]);
}

assert(r["input"] == s);
assert(r["index"] == 1);
assert(r["lastIndex"] == 6);
assert(r.length == 3);
assert(r[0] == "axyxa");
assert(r[1] == "xyx");
assert(r[2] == "");

////////////////////////////////////////

TDATE = new Date(0);
(TDATE).setUTCMilliseconds(0);
TDATE1 = TDATE.getFullYear();
assert(TDATE1 == 1970);
println("The Date1 is" + TDATE1);
////////////////////////////////////////

TDATE = new Date(0);
(TDATE).setUTCMonth(0);
TDATE1 = TDATE.valueOf()
assert(TDATE1 == 0);

////////////////////////////////////////

TDATE = new Date(0);
(TDATE).setFullYear(1969,11);
TDATE1 = TDATE.valueOf();
//assert(TDATE1 == 0);
println("Date2 is here equal to" + TDATE1);
////////////////////////////////////////

var re = /([\S]+([ \t]+[\S]+)*)[ \t]*=[ \t]*[\S]+/;
var result = re.exec("Course_Creator = Test");

////////////////////////////////////////

var mine = "a\nb";
myReg = /a$/m;
eex = myReg.exec(mine);
assert(eex == "a\n");

////////////////////////////////////////

ZERO = new Number(0);
FALSE = new Boolean( false );
var result = "";

switch (ZERO)
{
    default:			result += "default"; break;
    case "hi there":		result += "WTF";       break;
    case new Boolean(false):	result += "new FALSE"; break;
    case "":			result += "empty";       break;
    case false:			result += "false";  break;
    case FALSE:			result += "FALSE";  break;
    case 0:			result += "0";       break;
    case new Number(0):		result += "new ZERO";  break;
    case ZERO:			result += "ZERO";    break;
} 

println("I got " + result);
assert(result == "ZERO");

////////////////////////////////////////

x = 09;
assert(x == 9);

x = 099;
assert(x == 99);

////////////////////////////////////////

x = MyFunction("PASSED!");
assert(x == "PASSED!");

x = MyOtherFunction(true);
assert(x == false);

 function MyFunction( value ) {
     var x = value;
     delete x;
     return x;
 }
 function MyOtherFunction(value) {
     var x = value;
     return delete x;
 }

////////////////////////////////////////

try {
  result = foo["bar"];
} catch ( e ) {
  result = "passed:  threw exception-",
  exception = e.toString();
} finally {
  println(result + exception + "<BR>");
}

////////////////////////////////////////

myVar = [];

////////////////////////////////////////

assert((true instanceof Boolean) == false);

////////////////////////////////////////

myReg = /.\011/g;

assert(myReg.toString() == "/.\\011/g");

////////////////////////////////////////

\u0041 = 5;
assert(A == 5);

B = 5;
assert(\u0042 == 5);

////////////////////////////////////////

var s = new String('hello');
x = s.lastIndexOf('ll', NaN);
assert(x == 2);

////////////////////////////////////////

var b = new Boolean();
b.toString = Object.prototype.toString;
b.lastIndexOf = String.prototype.lastIndexOf;
x = b.lastIndexOf('o', 1);
assert(x == 1);

////////////////////////////////////////

var s = new String( String.fromCharCode(0) );
x = s.toLowerCase().charCodeAt(0);
assert(x == 0);

s = "HELLO";
x = s.toLowerCase();
assert(x == "hello");

////////////////////////////////////////

make_array(["hi"]);

function make_array(arr)
{
  assert(arr.length == 1);
  assert(arr[0] == "hi");
}

////////////////////////////////////////

otherDate = new Date("Apr 18 2001");
//assert(otherDate.toString() == "Wed Apr 18 00:00:00 GMT-0700 2001");

////////////////////////////////////////

result = 5;
try
{
result = eval("return 0;");
}
catch(x)
{
  result++;
}
assert(result == 6);

////////////////////////////////////////

x = eval( 'this + ""' );
assert(x == "[object global]");

////////////////////////////////////////

function newCar(make, year)
{
  this.make = make;
  this.year = year;
  this.valueOf = function () { return(this.make + " " + this.year); }
}

mycar = new newCar("Ford", "2001");

assert(mycar.valueOf() == "Ford 2001");

////////////////////////////////////////


expression = '(.*)(...)\\s\\w';
modifier = 'g';

myReg = new RegExp(expression, modifier);
myReg2 = RegExp(myReg, undefined);

assert(myReg == myReg2);

////////////////////////////////////////

make_array2([5,,,,,]);

function make_array2(arr)
{
  println(arr.length);
  println(arr[1]);
  assert(arr.length == 6);
  assert(arr[1] == undefined);
}

////////////////////////////////////////

var ic1 = 0, if1 = 0;

function F2()
{
    try
    {
	throw("an error");
    }
    catch(e)
    {
	ic1++;
	return 10;	
    }
    finally
    {
	if1++;
	return 20;	
    }
}

assert(F2() == 20);
assert(ic1 == 1);
assert(if1 == 1);

////////////////////////////////////////

var oc1 = 0, ic1 = 0, if1 = 0, if2 = 0;

function F3()
{
    try
    {
	throw("an error");
    }
    catch(e)
    {
	oc1++;
	try
	{
		ic1++;
		throw(e + "innerE");
	}
	catch(e)
	{
		ic1++;
	}
	finally
	{
		if1++;
	}
	oc1++;
    }
    finally
    {
	if2++;
	return(20);	
    }
    oc1++;			
}

assert(F3() == 20);
assert(ic1 == 2);
assert(oc1 == 2);
assert(if1 == 1);
assert(if2 == 1);

////////////////////////////////////////

void 0;

////////////////////////////////////////

println("Success");
